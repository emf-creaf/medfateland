% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fordyn_scenario.R
\name{fordyn_scenario}
\alias{fordyn_scenario}
\title{Scenario of forest dynamics}
\usage{
fordyn_scenario(
  sf,
  SpParams,
  meteo = NULL,
  management_scenario,
  volume_function = NULL,
  volume_arguments = NULL,
  local_control = defaultControl(),
  dates = NULL,
  CO2ByYear = numeric(0),
  summary_function = NULL,
  summary_arguments = NULL,
  parallelize = FALSE,
  num_cores = detectCores() - 1,
  chunk_size = NULL,
  progress = TRUE
)
}
\arguments{
\item{sf}{An object of class \code{\link{sf}} with the following columns:
\itemize{
\item{\code{geometry}: Spatial geometry.}
\item{\code{id}: Stand identifiers.}
\item{\code{elevation}: Elevation above sea level (in m).}
\item{\code{slope}: Slope (in degrees).}
\item{\code{aspect}: Aspect (in degrees).}
\item{\code{forest}: Objects of class \code{\link{forest}}.}
\item{\code{soil}: Objects of class \code{\link{soil}}.}
\item{\code{state}: Objects of class \code{\link{spwbInput}} or \code{\link{growthInput}} (optional).}
\item{\code{meteo}: Data frames with weather data (required if parameter \code{meteo = NULL}).}
\item{\code{management_unit}: Management unit corresponding to each stand.}
\item{\code{represented_area}: Area represented by each stand (in hectares).}
}
Alternatively, the user may supply the result of a previous call to \code{fordyn_scenario}, where
to continue simulations.}

\item{SpParams}{A data frame with species parameters (see \code{\link{SpParamsMED}}).}

\item{meteo}{Meteorology data (see \code{\link{fordyn_spatial}}).}

\item{management_scenario}{A list defining the management scenario (see \code{\link{create_management_scenario}})}

\item{volume_function}{A function accepting a forest object or a tree data table, and a species parameter table, as input and
returning the wood volume (m3/ha) corresponding to each tree cohort. The function may accept additional arguments.
If NULL, the default volume function is used (not recommended!).}

\item{volume_arguments}{List with additional arguments for the volume function.}

\item{local_control}{A list of local model control parameters (see \code{\link{defaultControl}}).}

\item{dates}{A \code{\link{Date}} object with the days of the period to be simulated. If \code{NULL}, then the whole period of \code{meteo} is used.}

\item{CO2ByYear}{A named numeric vector with years as names and atmospheric CO2 concentration (in ppm) as values. Used to specify annual changes in CO2 concentration along the simulation (as an alternative to specifying daily values in \code{meteo}).}

\item{summary_function}{An appropriate function to calculate summaries from an object of class 'fordyn' (e.g., \code{\link{summary.fordyn}}).}

\item{summary_arguments}{List with additional arguments for the summary function.}

\item{parallelize}{Boolean flag to try parallelization (will use all clusters minus one).}

\item{num_cores}{Integer with the number of cores to be used for parallel computation.}

\item{chunk_size}{Integer indicating the size of chunks to be sent to different processes (by default, the number of spatial elements divided by the number of cores).}

\item{progress}{Boolean flag to display progress information for simulations.}
}
\value{
An list of class 'fordyn_scenario' with the following elements:
\itemize{
\item{\code{result_sf}: An object of class 'sf' containing four elements:
\itemize{
\item{\code{geometry}: Spatial geometry.}
\item{\code{id}: Stand id, taken from the input.}
\item{\code{tree_table}: A list of data frames for each simulated stand, containing the living trees at each time step.}
\item{\code{shrub_table}: A list of data frames for each simulated stand, containing the living shrub at each time step.}
\item{\code{dead_tree_table}: A list of data frames for each simulated stand, containing the dead trees at each time step.}
\item{\code{dead_shrub_table}: A list of data frames for each simulated stand, containing the dead shrub at each time step.}
\item{\code{cut_tree_table}: A list of data frames for each simulated stand, containing the cut trees at each time step.}
\item{\code{cut_shrub_table}: A list of data frames for each simulated stand, containing the cut shrub at each time step.}
\item{\code{summary}: A list of model output summaries for each simulated stand (if \code{summary_function} was not \code{NULL}).}
}
}
\item{\code{result_volumes}: A data frame with initial, growth, extracted and final volumes (m3) by year. In demand-based scenarios volumes corresponding to species with demand are also included.}
\item{\code{result_volumes_spp}: A data frame with growth and extracted volumes (m3) by species and year. In demand-based scenarios target volumes are also included.}
\item{\code{next_sf}: An object of class 'sf' to continue simulations in subsequent calls to \code{fordyn_scenario}.}
\item{\code{next_demand}: In demand-based scenarios, a list with information (i.e. demand offset by species and last volume growth)
to modify demand in subsequent calls to \code{fordyn_scenario}.}
}
}
\description{
Evaluates forest dynamics over a landscape including climate and management scenarios
}
\details{
This function allows coordinating the dynamics of simulated forest stands via management actions. For each year to be simulated, the
function determines which plots will be managed and then calls function \code{\link{fordyn_spatial}} for one year. If the simulation of some
stands results in an error, the function will try to restore the previous state of the forest stand for the next year steps.
Management is implemented using the \code{\link{defaultManagementFunction}} in medfate,
meaning that management parameters need to follow the structure of \code{\link{defaultManagementArguments}}
}
\examples{
\dontrun{
# Load example landscape data
data("example_ifn")
  
# Load example meteo data frame from package meteoland
data("examplemeteo")
  
#Prepare a three-year meteorological data in two blocks
meteo_01_02 <- rbind(examplemeteo, examplemeteo)
row.names(meteo_01_02) <- seq(as.Date("2001-01-01"), 
                              as.Date("2002-12-31"), by="day")
meteo_03 <- examplemeteo
row.names(meteo_03) <- seq(as.Date("2003-01-01"), 
                           as.Date("2003-12-31"), by="day")
                         
# Load default medfate parameters
data("SpParamsMED")

# Assign management unit to all stands
example_ifn$management_unit <- 1 

# Assume that each stand represents 1km2 = 100 ha
example_ifn$represented_area <- 100

# Creates scenario with one management unit and annual demand for P. nigra 
scen <- create_management_scenario(1, c("Pinus nigra" = 2300))

# Launch simulation scenario (years 2001 and 2002)
fs_12 <- fordyn_scenario(example_ifn, SpParamsMED, meteo = meteo_01_02, 
                       volume_function = NULL, management_scenario = scen,
                       parallelize = TRUE)
                       
# Continue simulation scenario 1 (year 2003)
fs_3 <- fordyn_scenario(fs_12, SpParamsMED, meteo = meteo_03, 
                       volume_function = NULL, management_scenario = scen,
                       parallelize = TRUE)
}

}
\seealso{
\code{\link{fordyn_spatial}}, \code{\link{create_management_scenario}}
}
\author{
Miquel De \enc{CÃ¡ceres}{Caceres} Ainsa, CREAF
}
