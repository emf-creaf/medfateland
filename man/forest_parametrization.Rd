% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute_forests.R
\name{forest_parametrization}
\alias{forest_parametrization}
\alias{impute_forests}
\alias{modify_forest_structure}
\title{Landscape forest parametrization}
\usage{
impute_forests(
  x,
  sf_nfi,
  dem,
  forest_map,
  var_class = NA,
  max_distance_km = 100,
  replace_existing = FALSE,
  merge_trees = TRUE,
  merge_shrubs = TRUE,
  progress = TRUE
)

modify_forest_structure(
  x,
  structure_map,
  variable,
  map_var = NA,
  ratio_limits = NULL,
  progress = TRUE
)
}
\arguments{
\item{x}{An object of class \code{\link{sf}}. If it contains a column named 'land_cover_type', imputation
will be performed for locations whose land cover is "wildland". Otherwise, forest imputation is done for all locations.
For structural corrections, \code{x} should already contain a column named 'forest' containing  \code{\link{forest}} objects.}

\item{sf_nfi}{An object of class \code{\link{sf}} with forest inventory data column 'forest'.}

\item{dem}{A digital elevation model (class \code{\link{rast}}) with meters as units}

\item{forest_map}{An object of class \code{\link{rast}} or \code{\link{vect}} with the forest class map}

\item{var_class}{Variable name or index containing forest classes in 'forest_map'. If missing the first column is taken.}

\item{max_distance_km}{Maximum distance, in km, for forest inventory plot imputation.}

\item{replace_existing}{A logical flag to force the replacement of existing \code{\link{forest}} objects, when present.}

\item{merge_trees}{A logical flag to simplify tree cohorts by merging tree records in DBH classes (see \code{\link{forest_mergeTrees}}).}

\item{merge_shrubs}{A logical flag to simplify shrub cohorts by merging shrub records in height classes (see \code{\link{forest_mergeShrubs}}).}

\item{progress}{A logical flag to print console output.}

\item{structure_map}{An object of class \code{\link{rast}} or \code{\link{vect}} with a forest structural variable map}

\item{variable}{Structural variable to correct. See options in details.}

\item{map_var}{Variable name or index containing structural variable in 'structure_map'. If missing the first column is taken.}

\item{ratio_limits}{Limits for ratio of variable in corrections, used to avoid outliers.}
}
\value{
Both functions return a modified object of class \code{\link{sf}}.
}
\description{
Function \code{impute_forests()} performs imputation of forest objects from a forest inventory using a forest map to match forest types and topography as covariates.
Function \code{modify_forest_structure()} uses forest structure rasters supplied by the user to correct forest structure metrics.
}
\details{
Function \code{impute_forests()} performs imputation of forest inventory plots on target locations provided that
they correspond to the same forest class, defined in the input forest map, and are geographically closer than a distance threshold (\code{max_distance_km}).
Among the multiple stands that can have fulfill these two requirements, the function chooses the one that has the most similar elevation
and position in the N-to-S slopes (i.e. the product of the cosine of aspect and slope). Both topographic
features are standardized to zero mean and unit standard deviation (using the supplied digital elevation model to calculate those metrics), to make their
weight on the imputation equal. This imputation method will be more or less successful depending on the resolution of forest classes and
the number of forest inventory plots available for each of them. Additionally, tree and shrub cohorts can be simplified after imputation (\code{merge_trees} and \code{merge_shrubs}),
to reduce the number of records (and hence, speed-up simulations).

Function \code{modify_forest_structure} can be used to modify specific structure variables of the imputed forests
building on rasters supplied by the user (typically from aerial or satellite LiDAR products). For any given metric,
the function will calculate the ratio of the structure metric between the target \code{\link{forest}} object (see \code{\link[medfate]{stand_basalArea}})
and the input map in the target location. Locations where the metric value in the map is missing are left unmodified.
Options for structural variables are the following:
\itemize{
\item{\code{mean_tree_height}: Should contain values in cm. Corrects tree heights and diameters (assuming a constant diameter-height relationship).}
\item{\code{dominant_tree_height}: Should contain values in cm. Corrects tree heights and diameters (assuming a constant diameter-height relationship).}
\item{\code{tree_density}: Should contain values in individuals per hectare. Corrects tree density.}
\item{\code{basal_area}: Should contain values in squared meters per hectare (m2/ha). Corrects tree density.}
\item{\code{mean_shrub_height}: Should contain values in cm. Corrects shrub cover.}
}
}
\examples{
\dontrun{
  # See vignette 'Preparing inputs'
}
}
\seealso{
\code{\link[=create_landscape]{create_landscape()}}, \code{\link[=add_soilgrids]{add_soilgrids()}}, \code{\link[medfate]{forest_mergeTrees}}
}
