[{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"introduction","dir":"Articles > Evaluation","previous_headings":"","what":"Introduction","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"","code":"## Loading required package: sp"},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"goal","dir":"Articles > Evaluation","previous_headings":"Introduction","what":"Goal","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"aim article provide assessment performance fordyn (using either basic advanced sub-model) prediction forest dynamics Catalonia (NE Spain). aim, simulate forest dynamics surveys Spanish National Forest Inventory compare model predictions forest development inventory data set permanent plots. evaluation focuses first growth (diameter height) surviving trees, turning attention basal area dead trees overall changes terms basal area density. , evaluate changes stand leaf area index , finally, changes shrub cover mean shrub height.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"simulation-procedure","dir":"Articles > Evaluation","previous_headings":"Introduction","what":"Simulation procedure","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"selected permanent plots second (IFN2) fourth (IFN4) without signs management (.e. presence stumps) whose basal area decrease 10% inventory surveys (avoid effect disturbances). Soil physical properties drawn SoilGrids (Hengl 2016), complemented rock fragment content estimates derived surface stoniness measurements forest plots. fordyn simulations conducted different periods: IFN2 - IFN3 (~ 10 years) IFN3 - IFN4 (~ 15 years) IFN2 - IFN4 (~ 25 years) actual simulated period varied depending sampling years target plot. Daily weather data obtained via interpolation plot’s coordinates using package meteoland. Default species-specific parameters modified using results meta-modelling exercise growth calibration exercise. two exercises provide values main species included , expected evaluation results worse species included exercises. Simulations done basic (.e. Granier) advanced (.e. Sperry) transpiration/photosynthesis sub-models. server 20 parallel threads, computational times longest simulation period (25 years) around 4 hours (.e. 2.5 min/plot) basic sub-model, versus around 6 days (.e. 1.5 hr/plot) advanced submodel. following sections, provide bias, root mean squared error (absolute relative terms) explained variance (R-squared) growth mortality predictions tree-level stand-level obtained simulations sub-models. Scatter plots provided IFN2-IFN4 simulation represent relationship predicted observed values, well factors may influence direction magnitude prediction error (.e. initial values, environmental conditions, …). Detailed results growth evaluation tree species provided last section.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-of-surviving-trees","dir":"Articles > Evaluation","previous_headings":"","what":"Growth of surviving trees","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Comparison diameter/height growth trees (DBH >= 7.5) survived surveys.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-diameter-increment","dir":"Articles > Evaluation","previous_headings":"Growth of surviving trees","what":"Annual diameter increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Predictive capacity plots (IFN2-IFN4):  Relationship diameter increase climatic variables (MAT, P/PET available PAR; IFN2 - IFN4):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment","dir":"Articles > Evaluation","previous_headings":"Growth of surviving trees","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Predictive capacity plots (IFN2-IFN4):  Relationship height increase climatic variables (MAT, P/PET available PAR; IFN2 - IFN4):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"stand-level-basal-area-increment","dir":"Articles > Evaluation","previous_headings":"Growth of surviving trees","what":"Stand-level basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Comparison basal area increment surviving trees take account changes density. words, densities first inventory used calculate stand-level basal area surviving trees. Hence, comparison meant evaluate effect diameter increment surviving trees terms annual stand basal area increments (m2/ha/yr) period evaluated. Predictive capacity plots (IFN2 - IFN4):  Relationship basal area increase climatic variables (MAT P/PET; IFN2 - IFN4):  Spatial error distribution (IFN2 - IFN4):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"basal-area-reduction","dir":"Articles > Evaluation","previous_headings":"Mortality","what":"Basal area reduction","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Annual reduction basal area (m2/ha/yr) due trees (DBH >= 7.5) died evaluation period model’s mortality prediction. cases, basal area calculated using initial diameter trees, density reductions prediction actually evaluated (possible growth trees simulation). Overall predictive capacity: Predictive capacity plots (IFN2 - IFN4):  Relationship dead basal area climatic variables (MAT P/PET; IFN2 - IFN4):  Spatial distribution errors (IFN2 - IFN4):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"density-reduction","dir":"Articles > Evaluation","previous_headings":"Mortality","what":"Density reduction","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Annual reduction density (ind/ha/yr) due trees (DBH >= 7.5) died evaluation period model’s mortality prediction. similar evaluating reduction basal area Overall predictive capacity:","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"basal-area-increase","dir":"Articles > Evaluation","previous_headings":"Ingrowth","what":"Basal area increase","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Annual increase basal area (m2/ha/yr) due ingrowth trees diameters 7.5 cm 12.5 cm evaluated period. Predictive capacity: Predictive capacity plots (IFN2 - IFN4):  Relationship ingrowth basal area climatic variables (MAT P/PET; IFN2 - IFN4):  Spatial distribution errors (IFN2 - IFN4):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"density-increase","dir":"Articles > Evaluation","previous_headings":"Ingrowth","what":"Density increase","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Annual increase density (ind/ha/yr) due ingrowth trees diameters 7.5 cm 12.5 cm evaluated period. Predictive capacity:","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"basal-area-changes","dir":"Articles > Evaluation","previous_headings":"Overall stand-level change","what":"Basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"includes annual changes basal area (m2/ha/yr) due growth surviving trees, mortality reductions ingrowth derived sapling growth. observed data, basal area changes include also incorporation trees large diameter classes results variable-radius sampling design. Since takes account processes together, evaluation rellevant . Overall predictive capacity: Predictive capacity plot (IFN2 - IFN4):  Relationship overall basal area change climatic variables (MAT P/PET; IFN2 - IFN4):  Spatial distribution errors (IFN2 - IFN4):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"density-changes","dir":"Articles > Evaluation","previous_headings":"Overall stand-level change","what":"Density changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"includes annual changes density (ind/ha/yr) due growth surviving trees, mortality reductions ingrowth derived sapling growth. observed data, changes include also incorporation trees large diameter classes results variable-radius sampling design. Overall predictive capacity:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"changes-in-leaf-area-index-of-trees-7-5-cm","dir":"Articles > Evaluation","previous_headings":"Overall stand-level change","what":"Changes in leaf area index of trees > 7.5 cm","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Overall predictive capacity using allometric equations: Overall predictive capacity using state variables:","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"shrub-percent-cover-changes","dir":"Articles > Evaluation","previous_headings":"Shrub cover and mean height","what":"Shrub percent cover changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Overall predictive capacity:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"shrub-mean-height-changes","dir":"Articles > Evaluation","previous_headings":"Shrub cover and mean height","what":"Shrub mean height changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Overall predictive capacity:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"detailed-evaluation-by-tree-species","dir":"Articles > Evaluation","previous_headings":"","what":"Detailed evaluation by tree species","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"following provide detailed evaluation results important species.","code":""},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-1","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Abies alba","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Abies alba","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-1","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Abies alba","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-1","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Abies alba","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Abies alba","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-2","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Fagus sylvatica","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-1","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Fagus sylvatica","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-2","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Fagus sylvatica","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-2","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Fagus sylvatica","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-1","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Fagus sylvatica","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-3","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus halepensis","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-2","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus halepensis","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-3","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus halepensis","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-3","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus halepensis","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-2","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus halepensis","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-4","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus nigra","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-3","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus nigra","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-4","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus nigra","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-4","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus nigra","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-3","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus nigra","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-5","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus sylvestris","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-4","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus sylvestris","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-5","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus sylvestris","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-5","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus sylvestris","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-4","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus sylvestris","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-6","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus uncinata","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-5","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus uncinata","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-6","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus uncinata","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-6","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus uncinata","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-5","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Pinus uncinata","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-7","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus faginea","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-6","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus faginea","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-7","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus faginea","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-7","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus faginea","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-6","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus faginea","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-8","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus ilex","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-7","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus ilex","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-8","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus ilex","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-8","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus ilex","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-7","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus ilex","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-9","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus pubescens","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-8","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus pubescens","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-9","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus pubescens","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-9","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus pubescens","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-8","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus pubescens","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"annual-height-increment-10","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus suber","what":"Annual height increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability height increase (cm/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"growth-basal-area-increment-9","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus suber","what":"Growth basal area increment","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due growth (m2/ha/yr) surviving trees:","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"mortality-10","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus suber","what":"Mortality","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area decrease due mortality (m2/ha/yr): Prediction ability density decrease due mortality (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"ingrowth-10","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus suber","what":"Ingrowth","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability basal area increase due ingrowth (m2/ha/yr): Prediction ability density increase due ingrowth (ind/ha/yr):","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/RegionalLevelEvaluation.html","id":"overall-basal-area-changes-9","dir":"Articles > Evaluation","previous_headings":"Detailed evaluation by tree species > Quercus suber","what":"Overall basal area changes","title":"Evaluation of regional-level forest dynamics with forest inventory data","text":"Prediction ability overall basal area changes (including growth, mortality ingrowth): Predictive capacity plots (IFN2-IFN4):  Relationship basal area changes climatic variables (MAT P/PET; IFN2-IFN4): Spatial distribution errors (IFN2-IFN4):  Prediction ability overall density changes (including growth, mortality ingrowth):","code":"## Warning in get_plot_component(plot, \"guide-box\"): Multiple components found; ## returning the first one. To return all, use `return_all = TRUE`."},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"goal","dir":"Articles > Evaluation","previous_headings":"Introduction","what":"Goal","title":"Evaluation of watershed-level runoff against river gauge data","text":"aim article provide assessment performance spwb_land() prediction watershed outflow. aim, simulate hydrological processes set benchmark watersheds compare model predictions watershed outflow measurements obtained using river gauges watershed outlets.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"simulation-procedure","dir":"Articles > Evaluation","previous_headings":"Introduction","what":"Simulation procedure","title":"Evaluation of watershed-level runoff against river gauge data","text":"watershed, following procedure conducted: Initial warm-simulation specified number years Simulation period observed data calibrating watershed parameters Manual calibration watershed parameters (replaced automatized calibration) Final simulation period observed data calibrating watershed parameters.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"goodness-of-fit-statistics","dir":"Articles > Evaluation","previous_headings":"Introduction","what":"Goodness-of-fit statistics","title":"Evaluation of watershed-level runoff against river gauge data","text":"following goodness fit statistics calculated using package hydroGOF: Nash-Sutcliffe Efficiency (NSE): coefficient sensitive extreme values might yield sub-optimal results dataset contains large outliers. Kling–Gupta efficiency (KGE): Provides decomposition Nash-Sutcliffe efficiency, facilitates analysis importance different components (bias, correlation variability). Index agreement (d): Initially proposed Willmott (1981) overcome drawbacks R2, differences observed predicted means variances (Legates McCabe, 1999). d also dimensionless bounded 0 1 can interpreted similarly R2. Volumetric efficiency index (VE): Originally proposed Criss Winston (2008) circumvent NSE flaws. VE values also bounded [0, 1] represent fraction water delivered proper time. Root mean squared error (RMSE): usual estimation average model error (.e. square root mean squared errors).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"watershed-tetis-parameters","dir":"Articles > Evaluation","previous_headings":"","what":"Watershed (TETIS) parameters","title":"Evaluation of watershed-level runoff against river gauge data","text":"following table contains set TETIS parameters employed spwb_land() simulations watersheds, calibration:","code":""},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"graphical-evaluation","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.4.6","what":"Graphical evaluation","title":"Evaluation of watershed-level runoff against river gauge data","text":"Daily Monthly","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"hydrological-analysis-1","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.4.6","what":"Hydrological analysis","title":"Evaluation of watershed-level runoff against river gauge data","text":"Density distribution  Percentiles","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"graphical-evaluation-1","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.1","what":"Graphical evaluation","title":"Evaluation of watershed-level runoff against river gauge data","text":"Daily Monthly","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"hydrological-analysis-2","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.1","what":"Hydrological analysis","title":"Evaluation of watershed-level runoff against river gauge data","text":"Density distribution  Percentiles","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"graphical-evaluation-2","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.2","what":"Graphical evaluation","title":"Evaluation of watershed-level runoff against river gauge data","text":"Daily Monthly","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"hydrological-analysis-3","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.2","what":"Hydrological analysis","title":"Evaluation of watershed-level runoff against river gauge data","text":"Density distribution  Percentiles","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"graphical-evaluation-3","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.3","what":"Graphical evaluation","title":"Evaluation of watershed-level runoff against river gauge data","text":"Daily Monthly","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"hydrological-analysis-4","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.5.3","what":"Hydrological analysis","title":"Evaluation of watershed-level runoff against river gauge data","text":"Density distribution  Percentiles","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"graphical-evaluation-4","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.6.0","what":"Graphical evaluation","title":"Evaluation of watershed-level runoff against river gauge data","text":"Daily Monthly","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/evaluation/WatershedLevelEvaluation.html","id":"hydrological-analysis-5","dir":"Articles > Evaluation","previous_headings":"Evaluation results > AIGUADORA watershed with TETIS and version 2.6.0","what":"Hydrological analysis","title":"Evaluation of watershed-level runoff against river gauge data","text":"Density distribution  Percentiles","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"introduction","dir":"Articles > Intro","previous_headings":"","what":"Introduction","title":"Package overview","text":"R package medfateland (v. 2.6.0) designed facilitate running simulations forest function dynamics landscape regional scales. package allows executing stand-level models available R package medfate specific locations within landscape, using either sequential parallel computation. Spatial units uncoupled simulations, local processes represented. addition, medfateland provides functions allow performing model simulations accounting processes relating different spatial units, lateral water transfer seed dispersal.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"spatial-structures","dir":"Articles > Intro","previous_headings":"Data structures","what":"Spatial structures","title":"Package overview","text":"previous versions medfateland package, data structures depended package sp. Current versions medfateland (ver. > 2.0.0) extensively use package sf (simple features) represent spatial structures, rows correspond spatial units (normally point geometries) columns include either model inputs (forest, soil, weather forcing) model outputs. simulations including lateral water transfer processes, spatial units need conform incomplete complete grid. cases, additional input form raster topology package terra required specify neighborhood adjacent cells cell size. spatial inputs need share coordinate projection system unambiguous correspondence grid cells sf rows.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"land-cover-types","dir":"Articles > Intro","previous_headings":"Data structures","what":"Land cover types","title":"Package overview","text":"Five kinds land cover recognized medfateland, determine set local landscape processes represented: wildland: forests, shrublands grasslands. agriculture: agricultural lands. rock: rock outcrops. artificial: urban areas. water: water bodies.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"processes-and-simulation-functions","dir":"Articles > Intro","previous_headings":"","what":"Processes and simulation functions","title":"Package overview","text":"figure provides overview simulation functions medfateland processes available . Colored squares simulation function indicate processes included.  following details processes functions. complete documentation design formulation simulation models inputs can found medfate reference book.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"local-and-landscape-processes","dir":"Articles > Intro","previous_headings":"Processes and simulation functions","what":"Local and landscape processes","title":"Package overview","text":"processes represented simulations medfateland can divided local landscape processes. Examples local water processes include rainfall, canopy interception, infiltration runoff, percolation deep drainage, soil evaporation plant transpiration. Processes involved carbon balance (photosynthesis, respiration) forest dynamics also local. Examples landscape processes lateral surface flows, sub-surface flows base flows. Seed dispersal another example landscape-level process, generates spatial dependency spatial units. Local processes represented wildland cells described medfate package. Lateral water transfer processes seed dispersal can included medfateland simulations add spatial dependencies. Evapotranspiration soil hydrology also represented agriculture locations, although strongly simplified manner, lateral water transfer processes also influence water balance agriculture locations. remaining land covers main focus medfateland. relevant determine water transfer neighboring cells entail simulation local processes.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"spatially-uncoupled-simulation-functions","dir":"Articles > Intro","previous_headings":"Processes and simulation functions","what":"Spatially-uncoupled simulation functions","title":"Package overview","text":"Package medfateland allows performing simulations multiple locations single function call. addition, simulations can performed using parallel computing, absence landscape-level processes induce spatial dependency. Uncoupled simulation functions detailed following sub-sections examples given vignette Spatially-uncoupled simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"local-water-balance-functions","dir":"Articles > Intro","previous_headings":"Processes and simulation functions > Spatially-uncoupled simulation functions","what":"Local water balance functions","title":"Package overview","text":"package medfate, local soil water balance forest primarily used predict forest water flows plant drought stress; main simulation function called spwb(). Package medfateland extends former function allowing simulation soil water balance multiple stands distributed spatially given time period using function spwb_spatial(), makes internal calls spwb() elements spatial classes introduced . Function spwb_spatial_day() analogous former, used simulation single day, using internal calls function spwb_day() medfate. Function spwb_spatial() one-day counterpart may used : Monitor forecast temporal variation soil water content particular stands (example estimate mushroom yield) continuous areas. Monitor forecast temporal variation plant drought stress particular stands (example anticipate mortality events) continuous areas. Monitor forecast temporal variation fuel moisture particular stands (example monitor wildfire risk) continuous areas.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"local-carbon-balance-and-plant-growth","dir":"Articles > Intro","previous_headings":"Processes and simulation functions > Spatially-uncoupled simulation functions","what":"Local carbon balance and plant growth","title":"Package overview","text":"Changes leaf area, plant density biomass key evaluate influence climatic conditions forest function dynamics. Processes affecting annual changes leaf area plant size involved water carbon balances, well affecting growth directly. Processes influencing plant water balance include affecting soil water content, rainfall, canopy interception, infiltration runoff, percolation deep drainage, soil evaporation plant transpiration. Carbon balance arises relationship plant photosynthesis respiration, although carbon reserves play role availability carbon growth. Water carbon balances coupled regulation transpiration done stomata. Plant growth affected availability carbon (source limitation), also temperature water status (sink limitation). Leaf area plants can severely decreased drought stress, causing increase dead leaf area affecting carbon water fluxes. Package medfate allows simulating carbon balance, growth mortality set plant cohorts (competing light water) single forest stand using function growth(). Package medfateland extends former function providing function growth_spatial(), operates spatial classes makes internal calls function growth(). Function growth_spatial_day() analogous former, used simulation single day, using internal calls function growth_day() medfate. Function growth_spatial() one-day counterpart may used : Monitor forecast temporal variation water fluxes soil water content particular stands (example estimate regulation ecosystem services) taking account processes determining plant growth. Monitor forecast temporal variation plant drought stress particular stands(example anticipate mortality events) taking account processes determining plant growth. Monitor forecast temporal variation live fuel moisture amount standing dead live fuels particular stands (example monitor wildfire risk).","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"local-forest-dynamics","dir":"Articles > Intro","previous_headings":"Processes and simulation functions > Spatially-uncoupled simulation functions","what":"Local forest dynamics","title":"Package overview","text":"Changes forest structure composition result interplay natural demographic processes (growth, mortality recruitment) natural anthropogenic disturbances, including effects forest management. Package medfate includes function fordyn(), allows simulating processes yearly time steps given forest stand, building previous models. Package medfateland extends former function providing function fordyn_spatial(), operates spatial classes make internal calls function fordyn().","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"spatial-coordination-via-management-scenarios","dir":"Articles > Intro","previous_headings":"Processes and simulation functions","what":"Spatial coordination via management scenarios","title":"Package overview","text":"addition former spatially-uncoupled simulation functions, medfateland provides function fordyn_scenario() landscape regional-scale simulations. function allows performing simulations forest function dynamics set forest stands, coordinating management actions set stands following timber demand-based approach, defines amount wood cut annually target tree species. addition, stands classified management units, can associated different silvicultural practices. Management decisions (well seed dispersal) evaluated year, means simulation processes occurring within year spatially uncoupled. reason, fordyn_scenario() makes internal calls fordyn_spatial() every year, local simulations parallel. kind simulations illustrated vignette Management scenarios.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PackageOverview.html","id":"watershed-simulations-including-spatial-processes","dir":"Articles > Intro","previous_headings":"Processes and simulation functions","what":"Watershed simulations including spatial processes","title":"Package overview","text":"input data form continuous spatial variation forests landscape, typically watershed, medfateland package allows performing local process simulations accounting landscape processes. done using functions spwb_land(), growth_land() fordyn_land(), analogous spwb_spatial(), growth_spatial() fordyn_spatial(), respectively. Similarly, functions spwb_land_day() growth_land_day() landscape counterparts spwb_spatial_day() growth_spatial(), respectively. Importantly, functions allow simulating lateral water transfer processes, two alternative sub-models possible. first sub-model, similar TETIS (Francés et al. 2007) offered default, includes lateral water flows solved simple way: Overland surface flows upslope cells Lateral saturated soil flows (.e. interflow) adjacent cells Lateral groundwater flow (.e. baseflow) adjacent cells Channel water routing (channel network specified) Alternatively, water transfer processes can simulated via coupling SERGHEI (Caviedes-Voullième et al. 2023), physically-based distributed hydrologic model much greater physical detail. case, SERGHEI outputs generated files provided output function call. Hence, user responsible accessing post-processing outputs. Functions spwb_land() growth_land() (single-day counterparts spwb_land_day() growth_land_day()) may used : Determine areas particular plant species high vulnerability suffer drought stress fire risk, accounting watershed hydrology. Partition total rainfall given watershed among: water evaporated canopy interception bare soil evaporation water transpired plants water exported via runoff deep drainage water table river streams. Function fordyn_land() includes seed dispersal additional landscape process. Similarly relationship fordyn() growth(), fordyn_land() makes call, year, growth_land(), deals daily processes. , dispersal, regeneration forest management simulated level fordyn_land(). function may used : Determine effect forest management alternatives forest function, dynamics water production forested watersheds. Examples watershed simulations including landscape processes given vignette Watershed simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"aim","dir":"Articles > Intro","previous_headings":"","what":"Aim","title":"Preparing inputs I: forest inventory plots","text":"vignette created illustrate creation spatial inputs used model simulations package, starting forest inventory plot data. reading vignette, users familiar forest soil structures package medfate. Moreover, brief introduction spatial structures used medfateland package given vignette Package overview examples given vignettes Spatially-uncoupled simulations. Let’s first load necessary libraries: first section, , shows create spatial inputs forest inventory data tree lists, general case. second section, B, shows differences occur starting point data structure issued package forestables. part need package forestables environment, take example data table . package can installed GitHub:","code":"library(medfate) library(medfateland) library(ggplot2) library(tidyterra) # remotes::install_github(\"emf-creaf/forestables\") library(forestables) ## Loading required package: data.table ## Loading required package: dtplyr"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"a--general-procedure","dir":"Articles > Intro","previous_headings":"","what":"A. General procedure","title":"Preparing inputs I: forest inventory plots","text":"functions introduced procedure meant executed sequentially progressively add spatial information, illustrated workflow , users free use convenient way.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"target-locations","dir":"Articles > Intro","previous_headings":"A. General procedure","what":"Target locations","title":"Preparing inputs I: forest inventory plots","text":"Package medfate includes small dataset tree data, corresponding dense holm oak forest Poblet (Catalonia, Spain). result abandonment previous coppicing exploitation, high density stems per individual. data set includes data control plot managed plot, second two inventories carried , one management (thinning operation) another afterwards. Hence, three stand structures. begin defining sf object target locations forest stand identifiers (column id): POBL_CTL control forest plot, POBL_THI_BEF managed plot thinning POBL_THI_AFT managed plot thinning.","code":"# Define sf with three stands cc <- rbind(c(1.0215, 41.3432),             c(1.0219, 41.3443),              c(1.0219, 41.3443)) d <- data.frame(lon = cc[,1], lat = cc[,2],                  id = c(\"POBL_CTL\", \"POBL_THI_BEF\", \"POBL_THI_AFT\")) x <- sf::st_as_sf(d, coords = c(\"lon\", \"lat\"), crs = 4326) x ## Simple feature collection with 3 features and 1 field ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 ## Geodetic CRS:  WGS 84 ##             id               geometry ## 1     POBL_CTL POINT (1.0215 41.3432) ## 2 POBL_THI_BEF POINT (1.0219 41.3443) ## 3 POBL_THI_AFT POINT (1.0219 41.3443)"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"topography","dir":"Articles > Intro","previous_headings":"A. General procedure","what":"Topography","title":"Preparing inputs I: forest inventory plots","text":"object sf defined target locations, need determine topographic features (elevation, slope, aspect) land cover corresponding locations. access Digital Elevation Model (DEM) desired resolution. use DEM raster Catalonia 30 m resolution, load using package terra: inputs, can use function add_topography() add topographic features starting sf: can check missing values topographic features:","code":"dataset_path <- \"~/OneDrive/EMF_datasets/\" dem <- terra::rast(paste0(dataset_path,\"Topography/Products/Catalunya/MET30m_ETRS89_UTM31_ICGC.tif\")) dem ## class       : SpatRaster  ## dimensions  : 9282, 9391, 1  (nrow, ncol, nlyr) ## resolution  : 30, 30  (x, y) ## extent      : 258097.5, 539827.5, 4485488, 4763948  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source      : MET30m_ETRS89_UTM31_ICGC.tif  ## name        : met15v20as0f0118Bmr1r050  ## min value   :                   -7.120  ## max value   :                 3133.625 y_1 <- add_topography(x, dem = dem, progress = FALSE) y_1 ## Simple feature collection with 3 features and 4 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 ## Geodetic CRS:  WGS 84 ## # A tibble: 3 × 5 ##   id                   geometry elevation slope aspect ##   <chr>             <POINT [°]>     <dbl> <dbl>  <dbl> ## 1 POBL_CTL     (1.0215 41.3432)      853.  30.1   76.0 ## 2 POBL_THI_BEF (1.0219 41.3443)      814.  29.3   40.3 ## 3 POBL_THI_AFT (1.0219 41.3443)      814.  29.3   40.3 check_topography(y_1) ## ✔ No missing values in topography."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"forest-inventory-data-parsing","dir":"Articles > Intro","previous_headings":"A. General procedure","what":"Forest inventory data parsing","title":"Preparing inputs I: forest inventory plots","text":"next step define forest objects simulations. Forests defined target locations whose land cover defined wildland (, three stands). case, define forest objects tree records Poblet. point read data file data base, simply load data medfate: four columns data set. Plot.Code identifies forest stand, Indv.Ref tree number, Species scientific name tree species Diameter.cm tree diameter cm. properly parse forest inventory data, need define mapping variables names meaningful medfate. , can check function forest_mapTreeTable() package. Furthermore, need map forest stand identifier. exclude Indv.Ref, variables mapped using: Now ready call function add_forests(), facilitate creation forest objects: Note two warnings raised, informing us Quercus humilis (downy oak) matched species name SpParamsMED (reason provided input). correct scientific name downy oak repeat avoid losing tree records: function added column forest tree data. can check metrics first forest stand using: density tree basal area seem unusually low. specify sampled area, tree data forest objects require density estimation. default, record (row input data frame) count tree, can add sampled plot surface correct density per hectare. 15-m radius plot, sampled surface 706.86 m2. add information data table: can repeat read forest inventory data adding new element mapping vector: check forest , see change density basal area: point, may wonder whether finished. Function check_forests() can help detecting missing data: function alerts us height values missing. Since required simulations using medfate, need estimate . overly simplistic, use one allometric equation species estimate tree height cm diameter: Now modify mapping include height repeat reading operation: check forest data , encounter issues:","code":"data(poblet_trees) head(poblet_trees) ##   Plot.Code Indv.Ref             Species Diameter.cm ## 1  POBL_CTL        1 Acer monspessulanum         7.6 ## 2  POBL_CTL        2       Arbutus unedo         7.5 ## 3  POBL_CTL        3       Arbutus unedo         7.5 ## 4  POBL_CTL        4       Arbutus unedo         7.5 ## 5  POBL_CTL        5       Arbutus unedo         7.5 ## 6  POBL_CTL        6       Arbutus unedo         7.5 mapping <- c(\"id\" = \"Plot.Code\", \"Species.name\" = \"Species\", \"DBH\" = \"Diameter.cm\") y_2 <- add_forests(y_1, tree_table = poblet_trees, tree_mapping = mapping,                     SpParams = SpParamsMED) ## Warning in forest_mapTreeTable(x = tree_id, mapping_x = tree_mapping, SpParams ## = SpParams): Taxon names that were not matched: Quercus humilis. ## Warning in forest_mapTreeTable(x = tree_id, mapping_x = tree_mapping, SpParams ## = SpParams): Taxon names that were not matched: Quercus humilis. poblet_trees$Species[poblet_trees$Species==\"Quercus humilis\"] <- \"Quercus pubescens\" y_2 <- add_forests(y_1, tree_table = poblet_trees, tree_mapping = mapping,                     SpParams = SpParamsMED) y_2 ## Simple feature collection with 3 features and 5 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 ## Geodetic CRS:  WGS 84 ## # A tibble: 3 × 6 ##   id                   geometry elevation slope aspect forest       ##   <chr>             <POINT [°]>     <dbl> <dbl>  <dbl> <list>       ## 1 POBL_CTL     (1.0215 41.3432)      853.  30.1   76.0 <forest [5]> ## 2 POBL_THI_BEF (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> ## 3 POBL_THI_AFT (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> summary(y_2$forest[[1]], SpParamsMED) ## Tree BA (m2/ha): 3.0179815  adult trees: 3.0179815  saplings: 0  ## Density (ind/ha) adult trees: 267  saplings: 0  shrubs (estimated): 0  ## Cover (%) adult trees: 42.3272186  saplings: 0  shrubs: 0  herbs: 0  ## LAI (m2/m2) total: 0.5419688  adult trees: 0.5419688  saplings: 0  shrubs: 0  herbs: 0  ## Fuel loading (kg/m2) total: 0.1414227  adult trees: 0.1414227  saplings: 0  shrubs: 0  herbs: 0  ## PAR ground (%): NA  SWR ground (%): NA poblet_trees$PlotSurface <- 706.86 mapping <- c(mapping, \"plot.size\" = \"PlotSurface\") y_2 <- add_forests(y_1, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED) summary(y_2$forest[[1]], SpParamsMED) ## Tree BA (m2/ha): 42.6956049  adult trees: 42.6956049  saplings: 0  ## Density (ind/ha) adult trees: 3777.2684832  saplings: 0  shrubs (estimated): 0  ## Cover (%) adult trees: 100  saplings: 0  shrubs: 0  herbs: 0  ## LAI (m2/m2) total: 4.9189289  adult trees: 4.9189289  saplings: 0  shrubs: 0  herbs: 0  ## Fuel loading (kg/m2) total: 1.2992685  adult trees: 1.2992685  saplings: 0  shrubs: 0  herbs: 0  ## PAR ground (%): NA  SWR ground (%): NA check_forests(y_2) ## ✔ No wildland locations with NULL values in column 'forest'. ## ✔ All objects in column 'forest' have the right class. ## ! Missing tree height values detected for 28 (100%) in 3 wildland locations (100%). poblet_trees$Height.cm <- 100 * 1.806*poblet_trees$Diameter.cm^0.518 mapping <- c(mapping, \"Height\" = \"Height.cm\") y_2 <- add_forests(y_1, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED) check_forests(y_2) ## ✔ No wildland locations with NULL values in column 'forest'. ## ✔ All objects in column 'forest' have the right class. ## ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"soil-parameterization","dir":"Articles > Intro","previous_headings":"A. General procedure","what":"Soil parameterization","title":"Preparing inputs I: forest inventory plots","text":"Soil information usually lacking target locations. Regional maps soil properties may available cases. assume information available, resort global products. particular, use information provided SoilGrids 250 m resolution (Hengl et al. (2017); Poggio et al. (2021)).","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"soilgrids-2-0-data","dir":"Articles > Intro","previous_headings":"A. General procedure > Soil parameterization","what":"SoilGrids 2.0 data","title":"Preparing inputs I: forest inventory plots","text":"Function add_soilgrids() can perform queries using REST API SoilGrids, becomes problematic multiple sites. Hence, recommend downloading SoilGrid rasters target region storing particular format, function add_soilgrids() can read (check details function documentation). extraction SoilGrids data target locations fast using approach: result extra column soil: elements list usual data frames soil properties medfate: can use function check_soils() detect whether missing values:","code":"soilgrids_path = paste0(dataset_path,\"Soils/Sources/Global/SoilGrids/Spain/\") y_3 <- add_soilgrids(y_2, soilgrids_path = soilgrids_path, progress = FALSE) y_3 ## Simple feature collection with 3 features and 6 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 ## Geodetic CRS:  WGS 84 ## # A tibble: 3 × 7 ##   id                   geometry elevation slope aspect forest       soil         ##   <chr>             <POINT [°]>     <dbl> <dbl>  <dbl> <list>       <list>       ## 1 POBL_CTL     (1.0215 41.3432)      853.  30.1   76.0 <forest [5]> <df [6 × 7]> ## 2 POBL_THI_BEF (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> <df [6 × 7]> ## 3 POBL_THI_AFT (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> <df [6 × 7]> y_3$soil[[1]] ##   widths clay sand   om   bd  rfc nitrogen ## 1     50 25.3 32.1 7.24 1.05 16.8     5.07 ## 2    100 25.5 32.0 3.10 1.16 18.7     2.18 ## 3    150 29.9 31.2 1.96 1.25 19.8     1.35 ## 4    300 30.7 30.7 1.00 1.39 19.6     0.81 ## 5    400 30.4 30.2 0.89 1.49 20.4     0.58 ## 6   1000 32.0 30.2 0.62 1.50 21.5     0.44 check_soils(y_3) ## ✔ No wildland/agriculture locations with NULL values in column 'soil'. ## ✔ No missing values detected in key soil attributes."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"soil-depth-and-rock-content-modification","dir":"Articles > Intro","previous_headings":"A. General procedure > Soil parameterization","what":"Soil depth and rock content modification","title":"Preparing inputs I: forest inventory plots","text":"SoilGrids 2.0 provide information soil depth, rock fragment content normally underestimated, leads overestimation water holding capacity. Function modify_soils() allows modifying soil definitions, information available soil depth, depth (unaltered) bedrock, . Soil depth maps common many regions, resort global product 250m-resolution Shangguan et al. (2017), consists three rasters: order accelerate raster manipulations, crop global rasters extent target area: Censored soil depth poor product actual soil depth, observed fairly good correlation soil depth values Catalonia probability finding bedrock within first two meters. Hence, multiply two layers use (crude) estimate soil depth, expressing mm: take depth bedrock appropriate, change units mm well: can now call function modify_soils() two rasters perform correction soil characteristics: case, depth bedrock values deeper 2m, soil depth map effect correction procedure. correction, rock fragment content soil changed substantially: Finally, can call check_soils() verify everything fine:","code":"# Censored soil depth (cm) bdricm <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDRICM_M_250m_ll.tif\")) # Probability of bedrock within first 2m [0-100] bdrlog <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDRLOG_M_250m_ll.tif\")) # Absolute depth to bedrock (cm) bdticm <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDTICM_M_250m_ll.tif\")) x_vect <- terra::vect(sf::st_transform(sf::st_geometry(x), terra::crs(bdricm))) x_ext <- terra::ext(x_vect) bdricm <- terra::crop(bdricm, x_ext, snap = \"out\") bdrlog <- terra::crop(bdrlog, x_ext, snap = \"out\") bdticm <- terra::crop(bdticm, x_ext, snap = \"out\") soil_depth_mm <- (bdricm$BDRICM_M_250m_ll*10)*(1 - (bdrlog$BDRLOG_M_250m_ll/100)) depth_to_bedrock_mm <- bdticm*10 y_4 <- modify_soils(y_3,                      soil_depth_map = soil_depth_mm,                      depth_to_bedrock_map = depth_to_bedrock_mm,                     progress = FALSE) y_4$soil[[1]] ##   widths clay sand   om   bd      rfc nitrogen ## 1     50 25.3 32.1 7.24 1.05 16.80000     5.07 ## 2    100 25.5 32.0 3.10 1.16 18.70000     2.18 ## 3    150 29.9 31.2 1.96 1.25 19.80000     1.35 ## 4    300 30.7 30.7 1.00 1.39 27.76899     0.81 ## 5    400 30.4 30.2 0.89 1.49 49.36709     0.58 ## 6   1000 32.0 30.2 0.62 1.50 92.56329     0.44 check_soils(y_4) ## ✔ No wildland/agriculture locations with NULL values in column 'soil'. ## ✔ No missing values detected in key soil attributes."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"initialization-test","dir":"Articles > Intro","previous_headings":"A. General procedure","what":"Initialization test","title":"Preparing inputs I: forest inventory plots","text":"can check whether input data set well formed calling function initialize_landscape(): Everything seems fine simulations!","code":"z <- initialize_landscape(y_4, SpParamsMED, defaultControl(),                           progress = FALSE) z ## Simple feature collection with 3 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 ## Geodetic CRS:  WGS 84 ## # A tibble: 3 × 8 ##   id                   geometry elevation slope aspect forest       soil         ## * <chr>             <POINT [°]>     <dbl> <dbl>  <dbl> <list>       <list>       ## 1 POBL_CTL     (1.0215 41.3432)      853.  30.1   76.0 <forest [5]> <df [6 × 7]> ## 2 POBL_THI_BEF (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> <df [6 × 7]> ## 3 POBL_THI_AFT (1.0219 41.3443)      814.  29.3   40.3 <forest [5]> <df [6 × 7]> ## # ℹ 1 more variable: state <list>"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"b--procedure-from-forestables","dir":"Articles > Intro","previous_headings":"","what":"B. Procedure from forestables","title":"Preparing inputs I: forest inventory plots","text":"R package forestables allows reading harmonizing national forest inventory data FIA (USA forest inventory), FFI (France forest inventory) IFN (Spain forest inventory). data issued package starting point create spatial inputs medfateland, general procedure simplified, shown :","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"example-dataset","dir":"Articles > Intro","previous_headings":"B. Procedure from forestables","what":"Example dataset","title":"Preparing inputs I: forest inventory plots","text":"illustrate procedure, first load example data set given forestables package Spanish national forest inventory: dataset contains data different forest inventory surveys: use data last survey (IFN4):","code":"data(\"ifn_output_example\") ifn_output_example ## # A tibble: 8,997 × 24 ##    id_unique_code    year plot  coordx coordy coord_sys   crs  elev aspect slope ##    <chr>            <int> <chr>  <dbl>  <dbl> <chr>     <dbl> <dbl>  <dbl> <dbl> ##  1 08_0001_NN_A1_A1  1990 0001  402000 4.68e6 ED50      23031  1900     NA    NA ##  2 08_0002_NN_A1_A1  1990 0002  400000 4.68e6 ED50      23031  1700     NA    NA ##  3 08_0003_NN_A1_A1  1990 0003  401000 4.68e6 ED50      23031  1700     NA    NA ##  4 08_0004_NN_A1_A1  1990 0004  402000 4.68e6 ED50      23031  1400     NA    NA ##  5 08_0005_NN_A1_A1  1990 0005  400000 4.68e6 ED50      23031  1300     NA    NA ##  6 08_0006_NN_A1_A1  1990 0006  397000 4.68e6 ED50      23031  1700     NA    NA ##  7 08_0007_NN_A1_xx  1990 0007  399000 4.68e6 ED50      23031  1400     NA    NA ##  8 08_0008_NN_A1_xx  1990 0008  401000 4.68e6 ED50      23031  1100     NA    NA ##  9 08_0009_NN_A1_xx  1990 0009  402000 4.68e6 ED50      23031  1100     52    NA ## 10 08_0010_NN_A1_xx  1990 0010  394000 4.68e6 ED50      23031  1500     NA    NA ## # ℹ 8,987 more rows ## # ℹ 14 more variables: country <chr>, version <chr>, class <chr>, ## #   subclass <chr>, province_code <chr>, province_name_original <chr>, ## #   ca_name_original <chr>, sheet_ntm <chr>, huso <dbl>, slope_mean <chr>, ## #   type <int>, tree <list>, understory <list>, regen <list> table(ifn_output_example$version) ##  ## ifn2 ifn3 ifn4  ## 3542 3769 1686 ifn4_example <- ifn_output_example |>   dplyr::filter(version == \"ifn4\") ifn4_example ## # A tibble: 1,686 × 24 ##    id_unique_code    year plot  coordx coordy coord_sys   crs  elev aspect slope ##    <chr>            <int> <chr>  <dbl>  <dbl> <chr>     <dbl> <dbl>  <dbl> <dbl> ##  1 08_0001_NN_A1_A1  2015 0001  401922 4.68e6 ED50      23031    NA   202.    40 ##  2 08_0002_NN_A1_A1  2014 0002  399895 4.68e6 ED50      23031    NA   342     40 ##  3 08_0003_NN_A1_A1  2015 0003  400898 4.68e6 ED50      23031    NA    99     40 ##  4 08_0004_NN_A1_A1  2014 0004  401903 4.68e6 ED50      23031    NA   292.    40 ##  5 08_0005_NN_A1_A1  2014 0005  399917 4.68e6 ED50      23031    NA    99     40 ##  6 08_0006_NN_A1_A1  2014 0006  396931 4.68e6 ED50      23031    NA   351     40 ##  7 08_0009_xx_xx_A4  2016 0009  401899 4.68e6 ED50      23031    NA    90     40 ##  8 08_0014_NN_A1_A1  2015 0014  397927 4.68e6 ED50      23031    NA   234     40 ##  9 08_0016_xx_xx_A4  2014 0016  392906 4.68e6 ED50      23031    NA   346.    40 ## 10 08_0020_NN_A1_A1  2015 0020  397842 4.68e6 ED50      23031    NA    36     40 ## # ℹ 1,676 more rows ## # ℹ 14 more variables: country <chr>, version <chr>, class <chr>, ## #   subclass <chr>, province_code <chr>, province_name_original <chr>, ## #   ca_name_original <chr>, sheet_ntm <chr>, huso <dbl>, slope_mean <chr>, ## #   type <int>, tree <list>, understory <list>, regen <list>"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"parsing-forestable-data","dir":"Articles > Intro","previous_headings":"B. Procedure from forestables","what":"Parsing forestable data","title":"Preparing inputs I: forest inventory plots","text":"Function parse_forestable() allows parsing data frame (sf) issued package forestables reshaping medfateland. example transform first 100 rows: can seen output, function parsed plot ids, plot coordinates, topography. Importantly, defined new column called forest parsed tree shrub data . check forest data, may encounter issues solved:","code":"y_1 <- parse_forestable(ifn4_example[1:100,]) y_1 ## Simple feature collection with 100 features and 9 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.689588 ymin: 42.14464 xmax: 2.041199 ymax: 42.29967 ## Geodetic CRS:  WGS 84 ## # A tibble: 100 × 10 ##    id                 geometry  year plot  country version elevation slope ##    <chr>           <POINT [°]> <int> <chr> <chr>   <chr>       <dbl> <dbl> ##  1 08_000… (1.809049 42.29746)  2015 0001  ES      ifn4           NA    40 ##  2 08_000… (1.784615 42.28933)  2014 0002  ES      ifn4           NA    40 ##  3 08_000… (1.796778 42.28951)  2015 0003  ES      ifn4           NA    40 ##  4 08_000… (1.808973 42.28922)  2014 0004  ES      ifn4           NA    40 ##  5 08_000…  (1.78507 42.27957)  2014 0005  ES      ifn4           NA    40 ##  6 08_000… (1.749026 42.27098)  2014 0006  ES      ifn4           NA    40 ##  7 08_000…  (1.809255 42.2717)  2016 0009  ES      ifn4           NA    40 ##  8 08_001… (1.761288 42.26155)  2015 0014  ES      ifn4           NA    40 ##  9 08_001… (1.700605 42.25216)  2014 0016  ES      ifn4           NA    40 ## 10 08_002… (1.760416 42.25344)  2015 0020  ES      ifn4           NA    40 ## # ℹ 90 more rows ## # ℹ 2 more variables: aspect <dbl>, forest <list> check_forests(y_1) ## ✔ No wildland locations with NULL values in column 'forest'. ## ✔ All objects in column 'forest' have the right class. ## ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_I.html","id":"remaining-steps","dir":"Articles > Intro","previous_headings":"B. Procedure from forestables","what":"Remaining steps","title":"Preparing inputs I: forest inventory plots","text":"remaining steps similar general procedure, repeated completeness. Topography data Topographic information national forest inventory data can contain lot missing values. normally preferrable extract topographic features digital elevation model (although error plot coordinates adds uncertainty result): Soil data Soil data normally sampled national forest inventory data, difficult harmonize. Therefore, normally resort SoilGrids : can now call function modify_soils() two rasters perform correction soil characteristics: Finally, can call check_soils() verify everything fine: Initialization test point test initialization. , however, use SpParams data frame species mentioned forest inventory data.","code":"y_2 <- add_topography(y_1, dem = dem, progress = FALSE) y_3 <- add_soilgrids(y_2, soilgrids_path = soilgrids_path, progress = FALSE) y_4 <- modify_soils(y_3,                      soil_depth_map = soil_depth_mm,                      depth_to_bedrock_map = depth_to_bedrock_mm,                     progress = FALSE) check_soils(y_4) ## ✔ No wildland/agriculture locations with NULL values in column 'soil'. ## ✔ No missing values detected in key soil attributes."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"aim","dir":"Articles > Intro","previous_headings":"","what":"Aim","title":"Preparing inputs II: arbitrary locations","text":"vignette created illustrate creation spatial inputs used model simulations package, starting set coordinates corresponding arbitrary locations. functions introduced document meant executed sequentially progressively add spatial information, illustrated workflow , users free use convenient way.  reading vignette, users familiar forest soil structures package medfate. Moreover, brief introduction spatial structures used medfateland package given vignette Package overview examples given vignettes Spatially-uncoupled simulations Watershed simulations. Let’s first load necessary libraries:","code":"library(medfate) library(medfateland) library(ggplot2) library(tidyterra)"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"target-area","dir":"Articles > Intro","previous_headings":"","what":"Target area","title":"Preparing inputs II: arbitrary locations","text":"spatial data set begin definition spatial elements. use watershed Catalonia example, describe using cells 200 m EPSG:32631 (UTM fuse 31) projection. First load polygon data set describing watersheds Spain select target watershed (Riera de Bianya [river code “2005528”]): can draw map location watershed within Catalonia using:  Now define raster 200 m resolution, including target area. intersect watershed boundaries keep target locations: finally transform result sf object: use raster definition plots.","code":"dataset_path <- \"~/OneDrive/EMF_datasets/\" scchh <- terra::vect(paste0(dataset_path, \"Hydrography/Sources/Spain/CuencasMedNorte_Pfafs/M_cuencas_rios_Med_Norte.shp\")) watershed <-terra::project(scchh[scchh$pfafrio ==\"2005528\",], \"epsg:25831\") watershed ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 1, 8  (geometries, attributes) ##  extent      : 444922.8, 459850.8, 4668354, 4678487  (xmin, xmax, ymin, ymax) ##  coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ##  names       : OBJECTID COD_MAR cod_uni pfafrio       nom_rio_1 Cuen_Tipo ##  type        :    <int>   <chr>   <int>   <chr>           <chr>     <chr> ##  values      :    63564       M 1001395 2005528 RIERA DE BIANYA        NA ##  Shape_Leng Shape_Area ##       <num>      <num> ##   4.905e+04  1.024e+08 dataset_path <- \"~/OneDrive/EMF_datasets/\" counties <- terra::vect(paste0(dataset_path, \"PoliticalBoundaries/Sources/Catalunya/Comarques/comarques.shp\")) ggplot()+   geom_spatvector(data = counties)+   geom_spatvector(fill = \"black\", data = watershed)+   theme_bw() res <- 200 r <-terra::rast(terra::ext(watershed), resolution = c(res,res), crs = \"epsg:25831\") v <- terra::intersect(terra::as.points(r), watershed) x <- sf::st_as_sf(v)[,\"geometry\", drop = FALSE] x ## Simple feature collection with 2573 features and 0 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 445022.4 ymin: 4668453 xmax: 459751.3 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## First 10 features: ##                    geometry ## 1  POINT (449799.3 4678387) ## 2  POINT (449998.3 4678387) ## 3  POINT (450197.4 4678387) ## 4  POINT (450396.4 4678387) ## 5  POINT (450595.5 4678387) ## 6  POINT (450794.5 4678387) ## 7  POINT (449401.2 4678189) ## 8  POINT (449600.3 4678189) ## 9  POINT (449799.3 4678189) ## 10 POINT (449998.3 4678189) rm(v) gc() ##           used  (Mb) gc trigger  (Mb) max used  (Mb) ## Ncells 2113945 112.9    4308367 230.1  2597494 138.8 ## Vcells 3553100  27.2   10146329  77.5 10145027  77.5"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"topography-and-land-cover-type","dir":"Articles > Intro","previous_headings":"","what":"Topography and land cover type","title":"Preparing inputs II: arbitrary locations","text":"Topography object sf defined target locations, need determine topographic features (elevation, slope, aspect) land cover corresponding locations. access Digital Elevation Model (DEM) desired resolution. use DEM raster Catalonia 30 m resolution, load using package terra: digital elevation model, can use function add_topography() extract elevation calculate aspect slope: can check missing values topographic features using: can now examine elevation area, using raster r draw cells instead points:  Land cover type addition topography, users access land cover map, case use land cover raster Catalonia, issued 2018: Users examine legend land cover map decide map legend elements five land cover types used medfateland. inspecting land cover map legend, define following vectors perform legend mapping: inputs, can use add_land_cover() add land cover starting sf: , can check missing data: can examine land cover types target area using:","code":"dem <- terra::rast(paste0(dataset_path,\"Topography/Products/Catalunya/MET30m_ETRS89_UTM31_ICGC.tif\")) dem ## class       : SpatRaster  ## dimensions  : 9282, 9391, 1  (nrow, ncol, nlyr) ## resolution  : 30, 30  (x, y) ## extent      : 258097.5, 539827.5, 4485488, 4763948  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source      : MET30m_ETRS89_UTM31_ICGC.tif  ## name        : met15v20as0f0118Bmr1r050  ## min value   :                   -7.120  ## max value   :                 3133.625 y_0 <- add_topography(x, dem = dem) ## ℹ Checking inputs ## ✔ Checking inputs [13ms] ## ## ℹ Defining column 'id' ## ✔ Defining column 'id' [10ms] ## ## ℹ Extracting topography ## ✔ Extracting topography [6.5s] ## y_0 ## Simple feature collection with 2573 features and 4 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 445022.4 ymin: 4668453 xmax: 459751.3 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 2,573 × 5 ##              geometry    id elevation slope aspect ##           <POINT [m]> <int>     <dbl> <dbl>  <dbl> ##  1 (449799.3 4678387)     1      900.  24.5   164. ##  2 (449998.3 4678387)     2      901.  27.5   155. ##  3 (450197.4 4678387)     3      880.  23.2   146. ##  4 (450396.4 4678387)     4      843.  27.9   201. ##  5 (450595.5 4678387)     5      878.  16.9   158. ##  6 (450794.5 4678387)     6      860.  22.4   188. ##  7 (449401.2 4678189)     7      995.  20.9   180. ##  8 (449600.3 4678189)     8      938.  30.8   107. ##  9 (449799.3 4678189)     9      838.  19.6   140. ## 10 (449998.3 4678189)    10      831.  27.3   101. ## # ℹ 2,563 more rows check_topography(y_0) ## ✔ No missing values in topography. ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. lcm <- terra::rast(paste0(dataset_path,\"LandCover/Sources/Catalunya/cobertes-sol-v1r0-2018.tif\")) lcm ## class       : SpatRaster  ## dimensions  : 259198, 267234, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 260170, 527404, 4488784, 4747982  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source      : cobertes-sol-v1r0-2018.tif  ## color table : 1  ## name        : cobertes-sol-v1r0-2018 agriculture <- 1:6 wildland <- c(7:17,20) rock <- 18:19 artificial <- 21:35 water <- 36:41 y_1 <- add_land_cover(y_0,                        land_cover_map = lcm,                        wildland = wildland,                        agriculture = agriculture,                        rock = rock,                        artificial = artificial,                        water = water, progress = FALSE) y_1 ## Simple feature collection with 2573 features and 5 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 445022.4 ymin: 4668453 xmax: 459751.3 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 2,573 × 6 ##              geometry    id elevation slope aspect land_cover_type ##           <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (449799.3 4678387)     1      900.  24.5   164. wildland        ##  2 (449998.3 4678387)     2      901.  27.5   155. wildland        ##  3 (450197.4 4678387)     3      880.  23.2   146. wildland        ##  4 (450396.4 4678387)     4      843.  27.9   201. wildland        ##  5 (450595.5 4678387)     5      878.  16.9   158. wildland        ##  6 (450794.5 4678387)     6      860.  22.4   188. wildland        ##  7 (449401.2 4678189)     7      995.  20.9   180. wildland        ##  8 (449600.3 4678189)     8      938.  30.8   107. wildland        ##  9 (449799.3 4678189)     9      838.  19.6   140. wildland        ## 10 (449998.3 4678189)    10      831.  27.3   101. wildland        ## # ℹ 2,563 more rows check_land_cover(y_1) ## ✔ No missing values in land cover."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"forest-parameterization","dir":"Articles > Intro","previous_headings":"","what":"Forest parameterization","title":"Preparing inputs II: arbitrary locations","text":"next step define forest objects simulations. Forests defined target locations whose land cover defined wildland. forest inventory plots available target locations, one must resort imputations. Forest inventory data nearby locations. National forest inventories ideal respect. forest map polygons raster cells describe distribution forest (shrubland) types. Raster source vegetation structure (.e. mean tree height basal area), derived aerial satellite LiDAR missions. task perform imputations forest inventory plots target locations according criteria , possible, correct forest structure locations according available data.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"forest-imputation","dir":"Articles > Intro","previous_headings":"Forest parameterization","what":"Forest imputation","title":"Preparing inputs II: arbitrary locations","text":"map forest types target area important determine dominant tree shrub species. start loading Spanish Forest Map (1:25000) region Catalonia, vector format, using package terra: Second, need forest inventory data imputations. Arguably, hardest part. Let’s assume one access data already format package medfateland (build data set illustrated different vignette). also load sf_nfi object contains coordinates forest objects corresponding Fourth Spanish Forest Inventory Catalonia (5509 forest plots): Note already sf object suitable simulations, refers locations forest inventory plots, target area. two inputs (forest map forest inventory data), can use function impute_forests() perform imputation us (normally takes time): target location, function selects forest inventory plots correspond forest class, defined forest map, geographically closer pre-specified maximum distance. Among multiple plots can fulfill criterion, function chooses plot similar elevation position N--S slopes (.e. product cosine aspect slope). details can found documentation impute_forests(). resulting sf extra column named forest: wildland locations forest object, example: important know whether forest inputs complete suitable simulations. can done using function check_forests(): wildland locations missing forest data. correspond shrublands pastures, therefore included forest inventory data. point, call impute_forests() including option missing_class_imputation = TRUE, force imputation forest inventory plots non-forest cells. alternative provide suitable data.","code":"forest_map <- terra::vect(paste0(dataset_path,\"ForestMaps/Products/Catalunya/mfe25_cat_class.shp\")) forest_map ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 238096, 1  (geometries, attributes) ##  extent      : 0.1591812, 3.332506, 40.523, 42.86144  (xmin, xmax, ymin, ymax) ##  source      : mfe25_cat_class.shp ##  coord. ref. : lon/lat ETRS89 (EPSG:4258)  ##  names       :              Class ##  type        :              <chr> ##  values      : Pinus halepensis_2 ##                Pinus halepensis_2 ##                Pinus halepensis_2 nfi_path <- \"/home/miquel/OneDrive/mcaceres_work/model_initialisation/medfate_initialisation/IFN2medfate/\" sf_nfi <- readRDS(paste0(nfi_path, \"data/SpParamsMED/IFN4/Catalunya/IFN4_cat_final_ETRS89H31.rds\")) sf_nfi ## Simple feature collection with 5509 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 260943 ymin: 4491797 xmax: 518928 ymax: 4744883 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 5,509 × 15 ##    Provincia Estadillo Clase Subclase IDPARCELA IDCLASE ID       id    elevation ##  * <chr>     <chr>     <chr> <chr>    <chr>     <chr>   <chr>    <chr>     <dbl> ##  1 08        0001      A     1        080001    A1      080001_… 0800…      1814 ##  2 08        0002      A     1        080002    A1      080002_… 0800…      1797 ##  3 08        0003      A     1        080003    A1      080003_… 0800…      1657 ##  4 08        0004      A     1        080004    A1      080004_… 0800…      1403 ##  5 08        0005      A     1        080005    A1      080005_… 0800…      1371 ##  6 08        0006      A     1        080006    A1      080006_… 0800…      1683 ##  7 08        0009      A     4        080009    A4      080009_… 0800…      1041 ##  8 08        0014      A     1        080014    A1      080014_… 0800…      1538 ##  9 08        0016      A     4        080016    A4      080016_… 0800…      1743 ## 10 08        0020      A     1        080020    A1      080020_… 0800…      1404 ## # ℹ 5,499 more rows ## # ℹ 6 more variables: slope <dbl>, aspect <dbl>, soil <list>, forest <list>, ## #   forest_allrecords <named list>, geom <POINT [m]> y_2 <- impute_forests(y_1, sf_fi = sf_nfi, dem = dem,                        forest_map = forest_map, progress = FALSE) ## |---------|---------|---------|---------|========================================= ## ! 8 forest classes were not represented in forest inventory data. Geographic/topographic criteria used for 103 target locations. ## ℹ Forest imputed on 2018 out of 2161 target wildland locations (93.4%). ## ℹ Forest class was missing for 143 locations and forests were not imputed there. ## ℹ Not enough plots of the same class within geographic distance limits for 19 locations. The closest plot of the same class was chosen in those cases. y_2 ## Simple feature collection with 2573 features and 6 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 445022.4 ymin: 4668453 xmax: 459751.3 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 2,573 × 7 ##              geometry    id elevation slope aspect land_cover_type ##           <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (449799.3 4678387)     1      900.  24.5   164. wildland        ##  2 (449998.3 4678387)     2      901.  27.5   155. wildland        ##  3 (450197.4 4678387)     3      880.  23.2   146. wildland        ##  4 (450396.4 4678387)     4      843.  27.9   201. wildland        ##  5 (450595.5 4678387)     5      878.  16.9   158. wildland        ##  6 (450794.5 4678387)     6      860.  22.4   188. wildland        ##  7 (449401.2 4678189)     7      995.  20.9   180. wildland        ##  8 (449600.3 4678189)     8      938.  30.8   107. wildland        ##  9 (449799.3 4678189)     9      838.  19.6   140. wildland        ## 10 (449998.3 4678189)    10      831.  27.3   101. wildland        ## # ℹ 2,563 more rows ## # ℹ 1 more variable: forest <list> y_2$forest[[1]] ## $treeData ##             Species      DBH   Height         N      Z50  Z95 ## 1      Quercus ilex 29.65000 670.0000  14.14711 702.5790 5020 ## 2      Quercus ilex 24.09090 676.0889  28.29421 702.5790 5020 ## 3      Quercus ilex 19.74620 633.1792  63.66198 702.5790 5020 ## 4 Quercus pubescens 19.35000 890.0000  31.83099 647.0011 4510 ## 5      Quercus ilex 15.23560 595.8797 350.14088 702.5790 5020 ## 6 Quercus pubescens 14.27765 874.6080  63.66198 647.0011 4510 ## 7      Quercus ilex 11.16919 502.2300 381.97186 702.5790 5020 ## 8      Quercus ilex  5.00000 300.0000 381.97186 702.5790 5020 ## 9      Quercus ilex  1.50000 100.0000 318.30989 702.5790 5020 ##  ## $shrubData ##              Species Cover Height       Z50  Z95 ## 1 Buxus sempervirens    15    200 218.54095 1100 ## 2       Genista spp.    10     50 143.90556  639 ## 3  Globularia alypum     2     10  47.19721  150 ## 4  Helianthemum spp.     2     10 133.39433  579 ## 5      Teucrium spp.     1     10  68.62047  244 ## 6        Thymus spp.     5     10 110.82153  455 ##  ## $herbCover ## [1] NA ##  ## $herbHeight ## [1] NA ##  ## attr(,\"class\") ## [1] \"forest\" \"list\" check_forests(y_2) ## ! Missing 'forest' data in 143 wildland locations (6.6%). ## ✔ All objects in column 'forest' have the right class. ## ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"shrubland-imputation","dir":"Articles > Intro","previous_headings":"Forest parameterization","what":"Shrubland imputation","title":"Preparing inputs II: arbitrary locations","text":"section illustrate use function impute_forest() impute forest objects shrubland areas. aim, use vegetation map representing habitats interest EU: Hàbitats d’interès comunitari: case use database 575 shrubland inventory plots Catalonia described Casals et al. (2023): now call impute_forests() information. Unless force , function overwrite forest objects already present y_2. hand, assume wildland location classified forest shrubland correspond pastures. Hence, case ask function make imputations locations missing vegetation class (missing_class_imputation = TRUE) define empty forest imputed (missing_class_forest = emptyforest()): call function check_forests() verify wildland cells without forest object defined:","code":"veg_map <- terra::vect(paste0(dataset_path,\"ForestMaps/Sources/Catalunya/Habitats_v2/Habitats_interes_com.shp\")) veg_map ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 61036, 42  (geometries, attributes) ##  extent      : 260189, 526577.9, 4488766, 4747981  (xmin, xmax, ymin, ymax) ##  source      : Habitats_interes_com.shp ##  coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ##  names       :  OBJECTID  HIC1       TEXT_HIC1 RHIC1 SUP_HIC1  HIC2 ##  type        :     <num> <chr>           <chr> <num>    <num> <chr> ##  values      : 4.218e+04  9340 Alzinars i car~    10     4.17    NA ##                2.444e+04  9340 Alzinars i car~     5    23.56  9540 ##                 2.09e+04  9260     Castanyedes     4     5.02    NA ##        TEXT_HIC2 RHIC2 SUP_HIC2  HIC3 (and 32 more) ##            <chr> <num>    <num> <chr>               ##               NA     0        0    NA               ##  Pinedes medite~     5    23.56    NA               ##               NA     0        0    NA sfi_path <- \"/home/miquel/OneDrive/mcaceres_work/model_initialisation/medfate_initialisation/Shrublands/Combuscat/\" sf_sfi <- readRDS(paste0(sfi_path, \"Products/Combuscat_final.rds\")) sf_sfi ## Simple feature collection with 546 features and 6 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 267500 ymin: 4495400 xmax: 519300 ymax: 4736800 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 546 × 7 ##                geom    id elevation slope aspect soil         forest       ##         <POINT [m]> <dbl>     <dbl> <dbl>  <dbl> <list>       <named list> ##  1 (345200 4574000)     5     619.  11.3     105 <df [4 × 6]> <forest [4]> ##  2 (368600 4582600)     7     695.   1.15      5 <df [4 × 6]> <forest [4]> ##  3 (362800 4586000)    24     533.   8.53    255 <df [4 × 6]> <forest [4]> ##  4 (366000 4567200)    25     274.  16.7     235 <df [4 × 6]> <forest [4]> ##  5 (349500 4576800)    29     536.  11.3      70 <df [4 × 6]> <forest [4]> ##  6 (346400 4574000)    38     707.   0       110 <df [4 × 6]> <forest [4]> ##  7 (498000 4687400)   107      73.0 14.0     340 <df [4 × 6]> <forest [4]> ##  8 (389500 4571800)   315     378.   6.84     63 <df [4 × 6]> <forest [4]> ##  9 (390200 4571400)   318     367.   8.53     12 <df [4 × 6]> <forest [4]> ## 10 (394400 4572800)   330     200.   0         0 <df [4 × 6]> <forest [4]> ## # ℹ 536 more rows y_3 <- impute_forests(y_2, sf_fi = sf_sfi, dem = dem,                        forest_map = veg_map,                        var_class = \"TEXT_HIC1\",                       missing_class_imputation = TRUE,                       missing_class_forest = emptyforest(),                       progress = FALSE) ## |---------|---------|---------|---------|========================================= ## ! 8 forest classes were not represented in forest inventory data. Geographic/topographic criteria used for 65 target locations. ## ℹ Forest imputed on 143 out of 143 target wildland locations (100%). check_forests(y_3) ## ✔ No wildland locations with NULL values in column 'forest'. ## ✔ All objects in column 'forest' have the right class. ## ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"structure-correction","dir":"Articles > Intro","previous_headings":"Forest parameterization","what":"Structure correction","title":"Preparing inputs II: arbitrary locations","text":"forests resulting imputation formally fine simulations, forest structure target locations can different forest inventory used reference, even forest types . Therefore, advisable correct forest structure available information. several global products made recently available, combine satellite LiDAR observations information, Simard et al. (2011), Potapov et al. (2021) Lang et al. (2023). Alternatively, airborne LiDAR products available countries regions. use biophysical structural maps derived LiDAR flights Catalonia (years 2016-2017). First load mean tree height raster 20-m resolution: resolution bit finer size forest inventory plots. Hence, aggregate raster 40m resolution, crop target area: Mean tree height data following distribution:  now call function modify_forest_structure() correct mean tree height according LiDAR data (Note correction units: tree heights cm medfate): Correction tree heights also affects tree diameters, function assumes diameter-height relationship needs preserved. inspect forest object , able note changes height diameter values: Additionally, one may access maps structural variables. case, use raster basal area, also derived LiDAR flights: perform aggregation done heights: Basal area geographic distribution looks follows:  now use function correct basal area values (unit conversion needed case): Note basal area (tree density) corrections done height correction, effect height correction tree diameters. correction basal area operates tree density values. , can inspect changes tree density: finish section, show effect imputation correction structural variables, compared LiDAR data.  apparent height correction basal area correction effect basal area. Correcting height satisfactory terms basal area, modification diameters (without correcting density). Note map two corrections differs LiDAR basal area locations corrected missing LiDAR values (missing tree data). can quantitatively assess relationship predicted basal area observed one using: can also see effect imputation correction mean tree height:  basal area correction effect mean tree height. relationship estimated predicted mean tree height : Finally, check forests well-defined, using function check_forests():","code":"height_map <- terra::rast(paste0(dataset_path, \"RemoteSensing/Sources/Catalunya/Lidar/VariablesBiofisiques/RastersComplets/2016-2017/variables-biofisiques-arbrat-v1r0-hmitjana-2016-2017.tif\")) height_map ## class       : SpatRaster  ## dimensions  : 13100, 13400, 1  (nrow, ncol, nlyr) ## resolution  : 20, 20  (x, y) ## extent      : 260000, 528000, 4488000, 4750000  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source      : variables-biofisiques-arbrat-v1r0-hmitjana-2016-2017.tif  ## name        : variables-biofisiques-arbrat-v1r0-hmitjana-2016-2017 height_map_40 <- terra::aggregate(terra::crop(height_map, r),                                    fact = 2, fun = \"mean\", na.rm = TRUE) height_map_40 ## class       : SpatRaster  ## dimensions  : 253, 374, 1  (nrow, ncol, nlyr) ## resolution  : 40, 40  (x, y) ## extent      : 444920, 459880, 4668360, 4678480  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source(s)   : memory ## name        : variables-biofisiques-arbrat-v1r0-hmitjana-2016-2017  ## min value   :                                                3.965  ## max value   :                                               25.000 names(height_map_40)<- \"height\" ggplot()+   geom_spatraster(aes(fill=height), data=height_map_40)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m\", type = \"viridis\", na.value = NA)+   theme_bw() height_map_40_cm <- height_map_40*100 y_4 <- modify_forest_structure(y_3, height_map_40_cm, var = \"mean_tree_height\",                                progress = FALSE) y_4$forest[[1]] ## $treeData ##             Species       DBH    Height         N      Z50  Z95 ## 1      Quercus ilex 49.850533 1126.4707  14.14711 702.5790 5020 ## 2      Quercus ilex 40.504013 1136.7080  28.29421 702.5790 5020 ## 3      Quercus ilex 33.199282 1064.5640  63.66198 702.5790 5020 ## 4 Quercus pubescens 32.533147 1496.3566  31.83099 647.0011 4510 ## 5      Quercus ilex 25.615603 1001.8524 350.14088 702.5790 5020 ## 6 Quercus pubescens 24.005005 1470.4780  63.66198 647.0011 4510 ## 7      Quercus ilex 18.778757  844.3991 381.97186 702.5790 5020 ## 8      Quercus ilex  8.406498  504.3899 381.97186 702.5790 5020 ## 9      Quercus ilex  2.521949  168.1300 318.30989 702.5790 5020 ##  ## $shrubData ##              Species Cover Height       Z50  Z95 ## 1 Buxus sempervirens    15    200 218.54095 1100 ## 2       Genista spp.    10     50 143.90556  639 ## 3  Globularia alypum     2     10  47.19721  150 ## 4  Helianthemum spp.     2     10 133.39433  579 ## 5      Teucrium spp.     1     10  68.62047  244 ## 6        Thymus spp.     5     10 110.82153  455 ##  ## $herbCover ## [1] NA ##  ## $herbHeight ## [1] NA ##  ## attr(,\"class\") ## [1] \"forest\" \"list\" basal_area_map <- terra::rast(paste0(dataset_path, \"RemoteSensing/Sources/Catalunya/Lidar/VariablesBiofisiques/RastersComplets/2016-2017/variables-biofisiques-arbrat-v1r0-ab-2016-2017.tif\")) basal_area_map ## class       : SpatRaster  ## dimensions  : 13100, 13400, 1  (nrow, ncol, nlyr) ## resolution  : 20, 20  (x, y) ## extent      : 260000, 528000, 4488000, 4750000  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source      : variables-biofisiques-arbrat-v1r0-ab-2016-2017.tif  ## name        : variables-biofisiques-arbrat-v1r0-ab-2016-2017 basal_area_map_40 <- terra::aggregate(terra::crop(basal_area_map, r),                                        fact = 2, fun = \"mean\", na.rm = TRUE) basal_area_map_40 ## class       : SpatRaster  ## dimensions  : 253, 374, 1  (nrow, ncol, nlyr) ## resolution  : 40, 40  (x, y) ## extent      : 444920, 459880, 4668360, 4678480  (xmin, xmax, ymin, ymax) ## coord. ref. : ETRS89 / UTM zone 31N (EPSG:25831)  ## source(s)   : memory ## name        : variables-biofisiques-arbrat-v1r0-ab-2016-2017  ## min value   :                                           3.48  ## max value   :                                          60.00 names(basal_area_map_40)<- \"basal_area\" ggplot()+   geom_spatraster(aes(fill=basal_area), data=basal_area_map_40)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m2/ha\", type = \"viridis\", na.value = NA, limits = c(0,70))+   theme_bw() y_5 <- modify_forest_structure(y_4, basal_area_map_40, var = \"basal_area\",                                progress = FALSE) y_5$forest[[1]] ## $treeData ##             Species       DBH    Height         N      Z50  Z95 ## 1      Quercus ilex 49.850533 1126.4707  10.26564 702.5790 5020 ## 2      Quercus ilex 40.504013 1136.7080  20.53128 702.5790 5020 ## 3      Quercus ilex 33.199282 1064.5640  46.19538 702.5790 5020 ## 4 Quercus pubescens 32.533147 1496.3566  23.09769 647.0011 4510 ## 5      Quercus ilex 25.615603 1001.8524 254.07461 702.5790 5020 ## 6 Quercus pubescens 24.005005 1470.4780  46.19538 647.0011 4510 ## 7      Quercus ilex 18.778757  844.3991 277.17230 702.5790 5020 ## 8      Quercus ilex  8.406498  504.3899 277.17230 702.5790 5020 ## 9      Quercus ilex  2.521949  168.1300 230.97692 702.5790 5020 ##  ## $shrubData ##              Species Cover Height       Z50  Z95 ## 1 Buxus sempervirens    15    200 218.54095 1100 ## 2       Genista spp.    10     50 143.90556  639 ## 3  Globularia alypum     2     10  47.19721  150 ## 4  Helianthemum spp.     2     10 133.39433  579 ## 5      Teucrium spp.     1     10  68.62047  244 ## 6        Thymus spp.     5     10 110.82153  455 ##  ## $herbCover ## [1] NA ##  ## $herbHeight ## [1] NA ##  ## attr(,\"class\") ## [1] \"forest\" \"list\" p1 <- plot_variable(y_3, \"basal_area\", r = r)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m2/ha\", limits = c(0,70), type = \"viridis\", na.value = NA)+   labs(title = \"a) Imputation\")+theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. p2 <- plot_variable(y_4, \"basal_area\", r = r)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m2/ha\", limits = c(0,70), type = \"viridis\", na.value = NA)+   labs(title = \"b) Imputation + H correction\")+theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. p3 <- plot_variable(y_5, \"basal_area\", r = r)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m2/ha\", limits = c(0,70), type = \"viridis\", na.value = NA)+   labs(title = \"c) Imputation + H/BA correction\")+theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. x_vect <- terra::vect(sf::st_transform(sf::st_geometry(x), terra::crs(basal_area_map_40))) x_vect$basal_area <- terra::extract(basal_area_map_40, x_vect)$basal_area r_ba<-terra::rasterize(x_vect, r, field = \"basal_area\") p4 <- ggplot()+   geom_spatraster(aes(fill=last), data=r_ba)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"m2/ha\", limits = c(0,70), type = \"viridis\", na.value = NA)+   labs(title = \"d) Basal area from LiDAR\")+   theme_bw() cowplot::plot_grid(p1, p2, p3, p4, nrow = 4, ncol = 1) ba_5 <- extract_variables(y_5, \"basal_area\")$basal_area cor.test(ba_5, x_vect$basal_area) ##  ##  Pearson's product-moment correlation ##  ## data:  ba_5 and x_vect$basal_area ## t = 94.329, df = 2061, p-value < 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ##  0.8926294 0.9088864 ## sample estimates: ##      cor  ## 0.901074 p1 <- plot_variable(y_3, \"mean_tree_height\", r = r)+   scale_fill_continuous(\"cm\", limits = c(0,2600), type = \"viridis\", na.value = NA)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   labs(title = \"a) Imputation\")+   theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. p2 <- plot_variable(y_4, \"mean_tree_height\", r = r)+   scale_fill_continuous(\"cm\", limits = c(0,2600), type = \"viridis\", na.value = NA)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   labs(title = \"b) Imputation + H mean_tree_height\")+   theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. p3 <- plot_variable(y_5, \"mean_tree_height\", r = r)+   scale_fill_continuous(\"cm\", limits = c(0,2600), type = \"viridis\", na.value = NA)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   labs(title = \"c) Imputation + H/BA correction\")+   theme_bw() ## Scale for fill is already present. ## Adding another scale for fill, which will replace the existing scale. x_vect <- terra::vect(sf::st_transform(sf::st_geometry(x), terra::crs(height_map_40_cm))) x_vect$height <- terra::extract(height_map_40_cm, x_vect)$height r_ba<-terra::rasterize(x_vect, r, field = \"height\") p4 <- ggplot()+   geom_spatraster(aes(fill=last), data=r_ba)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_continuous(\"cm\", limits = c(0,2600), type = \"viridis\", na.value = NA)+   labs(title = \"d) Mean tree height from LiDAR\")+   theme_bw() cowplot::plot_grid(p1, p2, p3, p4, nrow = 4, ncol = 1) mth_5 <- extract_variables(y_5, \"mean_tree_height\")$mean_tree_height cor.test(mth_5, x_vect$height) ##  ##  Pearson's product-moment correlation ##  ## data:  mth_5 and x_vect$height ## t = 95.708, df = 1947, p-value < 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ##  0.9000222 0.9156141 ## sample estimates: ##       cor  ## 0.9081325 check_forests(y_5) ## ✔ No wildland locations with NULL values in column 'forest'. ## ✔ All objects in column 'forest' have the right class. ## ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"soil-parameterization","dir":"Articles > Intro","previous_headings":"","what":"Soil parameterization","title":"Preparing inputs II: arbitrary locations","text":"Soil information usually lacking target locations. Regional maps soil properties may available cases. assume information available, resort global products. particular, use information provided SoilGrids 250 m resolution (Hengl et al. (2017); Poggio et al. (2021)).","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"soilgrids-2-0-data","dir":"Articles > Intro","previous_headings":"Soil parameterization","what":"SoilGrids 2.0 data","title":"Preparing inputs II: arbitrary locations","text":"Function add_soilgrids() can perform queries using REST API SoilGrids, becomes problematic multiple sites. Hence, recommend downloading SoilGrid rasters target region storing particular format, function add_soilgrids() can read (check details function documentation). extraction SoilGrids data target cells rather fast using approach: result extra column soil: elements list usual data frames soil properties medfate: data retrieval, might locations SoilGrids 2.0 data missing. can use function check_soils() detect cases fill default values:","code":"soilgrids_path = paste0(dataset_path,\"Soils/Sources/Global/SoilGrids/Spain/\") y_6 <- add_soilgrids(y_5, soilgrids_path = soilgrids_path, progress = FALSE) y_6 ## Simple feature collection with 2573 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 445022.4 ymin: 4668453 xmax: 459751.3 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 2,573 × 8 ##              geometry    id elevation slope aspect land_cover_type ##           <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (449799.3 4678387)     1      900.  24.5   164. wildland        ##  2 (449998.3 4678387)     2      901.  27.5   155. wildland        ##  3 (450197.4 4678387)     3      880.  23.2   146. wildland        ##  4 (450396.4 4678387)     4      843.  27.9   201. wildland        ##  5 (450595.5 4678387)     5      878.  16.9   158. wildland        ##  6 (450794.5 4678387)     6      860.  22.4   188. wildland        ##  7 (449401.2 4678189)     7      995.  20.9   180. wildland        ##  8 (449600.3 4678189)     8      938.  30.8   107. wildland        ##  9 (449799.3 4678189)     9      838.  19.6   140. wildland        ## 10 (449998.3 4678189)    10      831.  27.3   101. wildland        ## # ℹ 2,563 more rows ## # ℹ 2 more variables: forest <list>, soil <list> y_6$soil[[1]] ##   widths clay sand   om   bd  rfc nitrogen ## 1     50 21.5 38.4 8.69 1.12 18.0     5.16 ## 2    100 21.0 39.2 4.03 1.14 21.2     2.47 ## 3    150 22.7 38.6 2.59 1.27 19.1     1.95 ## 4    300 24.7 38.3 1.87 1.43 17.8     1.16 ## 5    400 25.2 40.0 1.40 1.52 18.2     1.06 ## 6   1000 25.0 39.1 0.88 1.54 19.4     0.97 y_7 <- check_soils(y_6, missing_action = \"default\") ## ℹ 81 null 'soil' elements out of 2492 wildland/agriculture locations (3.3%). ## ✔ No wildland/agriculture locations with NULL values in column 'soil'. ## ℹ Default 'clay' values assigned for 20 locations (0.8%). ## ℹ Default 'sand' values assigned for 20 locations (0.8%). ## ℹ Default 'bd' values assigned for 20 locations (0.8%). ## ℹ Default 'rfc' values assigned for 20 locations (0.8%)."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"soil-depth-and-rock-content-modification","dir":"Articles > Intro","previous_headings":"Soil parameterization","what":"Soil depth and rock content modification","title":"Preparing inputs II: arbitrary locations","text":"SoilGrids 2.0 provide information soil depth, rock fragment content normally underestimated, leads overestimation water holding capacity. Function modify_soils() allows modifying soil definitions, information available soil depth, depth (unaltered) bedrock, . Soil depth maps common many regions, resort global product 250m-resolution Shangguan et al. (2017), consists three rasters: order accelerate raster manipulations, crop global rasters extent target area: Censored soil depth poor product actual soil depth, observed fairly good correlation soil depth values Catalonia probability finding bedrock within first two meters. Hence, multiply two layers use (crude) estimate soil depth, expressing mm: take depth bedrock appropriate, change units mm well: can now call function modify_soils() two rasters perform correction soil characteristics: case, depth bedrock values deeper 2m, soil depth map effect correction procedure. correction, rock fragment content soil changed substantially: can compare effect correction soil water capacity (mm) inspecting following plots (note change magnitude spatial pattern):  Finally, can call check_soils() verify everything fine:","code":"# Censored soil depth (cm) bdricm <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDRICM_M_250m_ll.tif\")) # Probability of bedrock within first 2m [0-100] bdrlog <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDRLOG_M_250m_ll.tif\")) # Absolute depth to bedrock (cm) bdticm <- terra::rast(paste0(dataset_path, \"Soils/Sources/Global/SoilDepth_Shangguan2017/BDTICM_M_250m_ll.tif\")) x_vect <- terra::vect(sf::st_transform(sf::st_geometry(x), terra::crs(bdricm))) x_ext <- terra::ext(x_vect) bdricm <- terra::crop(bdricm, x_ext, snap = \"out\") bdrlog <- terra::crop(bdrlog, x_ext, snap = \"out\") bdticm <- terra::crop(bdticm, x_ext, snap = \"out\") soil_depth_mm <- (bdricm$BDRICM_M_250m_ll*10)*(1 - (bdrlog$BDRLOG_M_250m_ll/100)) depth_to_bedrock_mm <- bdticm*10 y_8 <- modify_soils(y_7,                      soil_depth_map = soil_depth_mm,                      depth_to_bedrock_map = depth_to_bedrock_mm,                     progress = FALSE) y_8$soil[[1]] ##   widths clay sand   om   bd      rfc nitrogen ## 1     50 21.5 38.4 8.69 1.12 18.00000     5.16 ## 2    100 21.0 39.2 4.03 1.14 21.20000     2.47 ## 3    150 22.7 38.6 2.59 1.27 19.10000     1.95 ## 4    300 24.7 38.3 1.87 1.43 31.33929     1.16 ## 5    400 25.2 40.0 1.40 1.52 55.71429     1.06 ## 6   1000 25.0 39.1 0.88 1.54 97.50000     0.97 p1 <- plot_variable(y_7, \"soil_vol_extract\", r = r)+    geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_distiller(\"mm\", type = \"seq\", palette = \"YlGnBu\", direction = 1, na.value = NA)+   labs(title=\"SoilGrids alone\")+   theme_bw() p2 <- plot_variable(y_8, \"soil_vol_extract\", r = r)+    geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   scale_fill_distiller(\"mm\", type = \"seq\", palette = \"YlGnBu\", direction = 1, na.value = NA)+   labs(title=\"SoilGrids + depth correction\")+   theme_bw() cowplot::plot_grid(p1, p2, ncol =1, nrow=2) check_soils(y_8) ## ℹ 81 null 'soil' elements out of 2492 wildland/agriculture locations (3.3%). ## ✔ No wildland/agriculture locations with NULL values in column 'soil'. ## ✔ No missing values detected in key soil attributes."},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"additional-variables","dir":"Articles > Intro","previous_headings":"","what":"Additional variables","title":"Preparing inputs II: arbitrary locations","text":"section illustrate estimation additional variables needed occasions, particularly watershed-level simulations. present, specific functions medfateland variables.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"crop-factors-for-agricultural-areas","dir":"Articles > Intro","previous_headings":"Additional variables","what":"Crop factors for agricultural areas","title":"Preparing inputs II: arbitrary locations","text":"target locations whose land cover type agriculture supply column called crop_factor sf input object, soil water balance can conducted agriculture locations. Crop maps Europe can found, example d’Andrimont et al. (2021). case use regional data Catalan administration (Mapa de cultius 2018). start reading crop map subsetting target area: Crops target watershed, occupy valley bottoms expected:  obtain crop factors, first extract crop name corresponding agriculture locations: cells may missing values, specially land cover map crop map consistent: simplicity assume missing values correspond Ray-grass, common crop area: order transform crop names crop factors, need look-table, prepared Catalonia join two tables crop name column get crop factor (column Kc):","code":"file_crop_map <- paste0(dataset_path,\"Agriculture/Sources/Catalunya/Cultius_DUN2018/Cultius_DUN2018.shp\") crop_map <- sf::st_read(file_crop_map, options = \"ENCODING=UTF-8\") ## options:        ENCODING=UTF-8  ## Reading layer `Cultius_DUN2018' from data source  ##   `/home/miquel/OneDrive/EMF_datasets/Agriculture/Sources/Catalunya/Cultius_DUN2018/Cultius_DUN2018.shp'  ##   using driver `ESRI Shapefile' ## Simple feature collection with 638797 features and 9 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: 264864.2 ymin: 4488884 xmax: 523857.3 ymax: 4733681 ## Projected CRS: ETRS89 / UTM zone 31N crop_map <- terra::crop(terra::vect(crop_map[,\"Cultiu\"]), r) ggplot()+   geom_spatvector(aes(fill=Cultiu), data=crop_map)+   geom_spatvector(fill = NA, col = \"black\", linewidth = 0.5, data = watershed)+   theme_bw()+theme(legend.position = \"none\") sel_agr <- y_1$land_cover_type==\"agriculture\" x_agr <- sf::st_transform(sf::st_geometry(x)[sel_agr], terra::crs(crop_map)) x_agr_crop <- terra::extract(crop_map,                               terra::vect(x_agr)) df_agr_crop <- as.data.frame(x_agr_crop) table(is.na(df_agr_crop$Cultiu)) ##  ## FALSE  TRUE  ##   191   140 df_agr_crop$Cultiu[is.na(df_agr_crop$Cultiu)] <- \"RAY-GRASS\" crop_lookup_table <- readxl::read_xlsx(paste0(dataset_path, \"Agriculture/Sources/Catalunya/Kc_CAT_MOD.xlsx\")) head(crop_lookup_table) ## # A tibble: 6 × 5 ##   Cultiu_map                  Cultiu_text                 Grup   Asignacio    Kc ##   <chr>                       <chr>                       <chr>  <chr>     <dbl> ## 1 ALBERCOQUERS                Albercoquer                 FUITA… Albercoq… 0.383 ## 2 ALBERGÍNIA                  Alberginia                  HORTÍ… Albergin… 0.226 ## 3 ALFÀBREGA                   Alfabrega                   ALTRE… Alfabrega 0.1   ## 4 ALFALS NO SIE               Alfals no siega             FARRA… Alfals    0.78  ## 5 ALFALS SIE                  Alfals siega                FARRA… Alfals    0.78  ## 6 ALGARROBA HERBACIA NO SIEGA Algarroba herbacia no siega LLEGU… Mitjana … 0.36 df_agr_crop <- df_agr_crop |>   left_join(crop_lookup_table, by=c(\"Cultiu\"=\"Cultiu_map\")) y_8$crop_factor <- NA y_8$crop_factor[sel_agr] <- df_agr_crop$Kc summary(y_8$crop_factor[sel_agr]) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##  0.1725  0.5212  1.0000  0.8053  1.0000  1.0000"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"hydrogeology","dir":"Articles > Intro","previous_headings":"Additional variables","what":"Hydrogeology","title":"Preparing inputs II: arbitrary locations","text":"Watershed simulations watershed_model = \"tetis\" require defining spatial variables necessary simulation groundwater flows aquifer dynamics: Depth bedrock [depth_to_bedrock] - Depth unweathered bedrock, mm. Bedrock hydraulic conductivity [bedrock_conductivity] - Hydraulic conductivity bedrock, m·day-1. Bedrock porosity [bedrock_porosity] - Bedrock porosity (proportion volume). estimate depth bedrock, one can use variable Shangguan et al. (2017), already transformed mm: can plot using:  regional maps available inform permeability conductivity, suggest using GLobal HYdrogeology MaPS, GLHYMPS 2.0 (Huscroft et al. 2021): first extract GLHYMPS 2.0 data target locations: porosity simply divide GLHYMPS 2.0 value 100 find proportion: geographic distribution quite simple:  GLHYMPS 2.0 provides permeability log scale, following operations needed obtain hydraulic conductivity m/day: Finally, assign conductivity values sf object: geographic distribution simple, :","code":"x_vect <- terra::vect(sf::st_transform(sf::st_geometry(y_8),                                         terra::crs(depth_to_bedrock_mm))) y_8$depth_to_bedrock <-terra::extract(depth_to_bedrock_mm, x_vect)[,2, drop = TRUE] glhymps_map <- terra::vect(paste0(dataset_path,\"Soils/Sources/Global/GLHYMPS2/GLHYMPS_Spain.shp\")) glhymps_map ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 18954, 23  (geometries, attributes) ##  extent      : -556597.5, 445486.2, 3637705, 4410471  (xmin, xmax, ymin, ymax) ##  source      : GLHYMPS_Spain.shp ##  coord. ref. : Cylindrical_Equal_Area  ##  names       : OBJECTID_1 IDENTITY_ logK_Ice_x logK_Ferr_ Porosity_x K_stdev_x1 ##  type        :      <num>     <chr>      <num>      <num>      <num>      <num> ##  values      :   9.43e+05   ESP3276      -1520      -1520         19        250 ##                  9.43e+05   ESP3282      -1180      -1180          6        150 ##                  9.43e+05   ESP3291      -1180      -1180          6        150 ##  OBJECTID Descriptio    XX    YY (and 13 more) ##     <num>      <chr> <chr> <chr>               ##         0         NA    NA    NA               ##         0         NA    NA    NA               ##         0         NA    NA    NA x_vect <- terra::vect(sf::st_transform(sf::st_geometry(y_8),                                         terra::crs(glhymps_map))) x_glhymps <- terra::extract(glhymps_map, x_vect) head(x_glhymps) ##   id.y OBJECTID_1 IDENTITY_ logK_Ice_x logK_Ferr_ Porosity_x K_stdev_x1 ## 1    1    1194174   ESP3435      -1520      -1520         19        250 ## 2    2    1194174   ESP3435      -1520      -1520         19        250 ## 3    3    1194174   ESP3435      -1520      -1520         19        250 ## 4    4    1194174   ESP3435      -1520      -1520         19        250 ## 5    5    1194174   ESP3435      -1520      -1520         19        250 ## 6    6    1194174   ESP3435      -1520      -1520         19        250 ##   OBJECTID Descriptio   XX   YY   ZZ   AA   DD Shape_Leng GUM_K Prmfrst ## 1        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ## 2        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ## 3        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ## 4        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ## 5        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ## 6        0       <NA> <NA> <NA> <NA> <NA> <NA>          0     1       0 ##   Shape_Le_1 Shape_Area Transmissi COUNT AREA_1 MEAN STD ## 1     939134 1701770734          0     0      0    0   0 ## 2     939134 1701770734          0     0      0    0   0 ## 3     939134 1701770734          0     0      0    0   0 ## 4     939134 1701770734          0     0      0    0   0 ## 5     939134 1701770734          0     0      0    0   0 ## 6     939134 1701770734          0     0      0    0   0 y_8$bedrock_porosity <- x_glhymps[,\"Porosity_x\", drop = TRUE]/100 plot_variable(y_8, \"bedrock_porosity\", r = r) # Permeability m2 k <- 10^(x_glhymps[,\"logK_Ferr_\", drop = TRUE]/100) # Water density kg·m-3 rho <- 999.97  # Gravity m·s-2 g <- 9.8 # Viscosity of water mu <- 1e-3 # Conductivity m/s K <- k*rho*g/mu # Daily conductivity m/day K_day <- K*3600*24 y_8$bedrock_conductivity <- K_day plot_variable(y_8, \"bedrock_conductivity\", r = r)"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"river-network","dir":"Articles > Intro","previous_headings":"Additional variables","what":"River network","title":"Preparing inputs II: arbitrary locations","text":"large watersheds advisable specify river channel network, model can include channel water routing explicitly. done adding logical column channel indicating cells part channel network. start loading river network Catalonia (source: Agència Catalana de l’Aigua): , rasterize using target area raster definition. use .na() function distinguish river cells, independently river order: raster, perform extraction fill column channel: Similarly variables, river network can visualized using:","code":"rivers <-terra::vect(paste0(dataset_path, \"Hydrography/Sources/Catalunya/Rius/Rius_CARACT.shp\")) rivers_rast <- !is.na(terra::rasterize(rivers, r, field = \"OBJECTID\")) y_8$channel <- terra::extract(rivers_rast, y_8, ID = FALSE)$OBJECTID plot_variable(y_8, \"channel\", r = r)"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"other-variables","dir":"Articles > Intro","previous_headings":"Additional variables","what":"Other variables","title":"Preparing inputs II: arbitrary locations","text":"Simulation management scenarios requires defining additional variables sf object, concerning area represented location management unit belongs. illustrated vignette Management scenarios.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"storing","dir":"Articles > Intro","previous_headings":"","what":"Storing","title":"Preparing inputs II: arbitrary locations","text":"end process building spatial inputs, store result RDS file, loaded time performing simulations, e.g. Since data set corresponds watershed, also store raster:","code":"saveRDS(y_8, \"bianya.rds\") r$value <- TRUE terra::writeRaster(r, \"bianya_raster.tif\", overwrite=TRUE)"},{"path":"https://emf-creaf.github.io/medfateland/articles/intro/PreparingInputs_II.html","id":"initialization-test","dir":"Articles > Intro","previous_headings":"","what":"Initialization test","title":"Preparing inputs II: arbitrary locations","text":"can check whether input data set well formed calling function initialize_landscape():","code":"z <- initialize_landscape(y_8, SpParamsMED, defaultControl(),                           progress = FALSE)"},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/ComputingTime.html","id":"about-this-vignette","dir":"Articles > Modelanalysis","previous_headings":"","what":"About this vignette","title":"Computing time estimates","text":"aim vignette provide users rough estimation computing times simulation models included package medfateland. results presented obtained using 3 months simulation example watershed laptop (16 GiB memory 11th Gen Inter Core I5 processor @ 2.40 GHz x 8) Ubuntu Linux OS.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/ComputingTime.html","id":"table-of-computational-times","dir":"Articles > Modelanalysis","previous_headings":"","what":"Table of computational times","title":"Computing time estimates","text":"Computational times estimated using system.time(), seconds shown medfate package version.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"introduction","dir":"Articles > Modelanalysis","previous_headings":"","what":"Introduction","title":"Sensitivity to watershed parameters","text":"aim vignette illustrate sensitivity watershed ecohydrological simulations (e.g. via spwb_land()) variations three watershed parameters sub-model TETIS. parameters scaling factors hydraulic conductivities soil vertical fluxes, subsurface lateral fluxes groundwater lateral fluxes, respectively. referred R_localflow, R_interflow R_baseflow, respectively package.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"preparation","dir":"Articles > Modelanalysis","previous_headings":"","what":"Preparation","title":"Sensitivity to watershed parameters","text":"load small example watershed included package, can used understand inputs required: watershed state result four-year burn-period, order aquifer soil moisture (dynamic) equilibrium. Another spatial input needed describe grid topology, case object class SpatRaster package terra: Finally, load example weather data set used climate forcing, well usual species parameter table:","code":"data(\"example_watershed_burnin\") example_watershed_burnin ## Simple feature collection with 66 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 401430 ymin: 4671870 xmax: 402830 ymax: 4672570 ## Projected CRS: WGS 84 / UTM zone 31N ## # A tibble: 66 × 15 ##            geometry    id elevation slope aspect land_cover_type ##         <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (402630 4672570)     1      1162 11.3   79.2  wildland        ##  2 (402330 4672470)     2      1214 12.4   98.7  agriculture     ##  3 (402430 4672470)     3      1197 10.4  102.   wildland        ##  4 (402530 4672470)     4      1180  8.12  83.3  wildland        ##  5 (402630 4672470)     5      1164 13.9   96.8  wildland        ##  6 (402730 4672470)     6      1146 11.2    8.47 agriculture     ##  7 (402830 4672470)     7      1153  9.26 356.   agriculture     ##  8 (402230 4672370)     8      1237 14.5   75.1  wildland        ##  9 (402330 4672370)     9      1213 13.2   78.7  wildland        ## 10 (402430 4672370)    10      1198  8.56  75.6  agriculture     ## # ℹ 56 more rows ## # ℹ 9 more variables: forest <list>, soil <list>, state <list>, ## #   depth_to_bedrock <dbl>, bedrock_conductivity <dbl>, bedrock_porosity <dbl>, ## #   snowpack <dbl>, aquifer <dbl>, crop_factor <dbl> r <-terra::rast(xmin = 401380, ymin = 4671820, xmax = 402880, ymax = 4672620,                  nrow = 8, ncol = 15, crs = \"epsg:32631\") r ## class       : SpatRaster  ## dimensions  : 8, 15, 1  (nrow, ncol, nlyr) ## resolution  : 100, 100  (x, y) ## extent      : 401380, 402880, 4671820, 4672620  (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 31N (EPSG:32631) # Load example weather dataset data(\"examplemeteo\") # Set simulation period dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-03-31\"), by=\"day\") # Load default medfate parameters data(\"SpParamsMED\")"},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"initial-values-for-scaling-factors","dir":"Articles > Modelanalysis","previous_headings":"","what":"Initial values for scaling factors","title":"Sensitivity to watershed parameters","text":"Watershed simulations overall control parameters. Notably, user needs decide sub-model used lateral water transfer processes, case: default parameterization three scaling factors :","code":"ws_control <- default_watershed_control(\"tetis\") ws_control$tetis_parameters ## $R_localflow ## [1] 1 ##  ## $R_interflow ## [1] 50 ##  ## $R_baseflow ## [1] 5 ##  ## $n_interflow ## [1] 1 ##  ## $n_baseflow ## [1] 1 ##  ## $num_daily_substeps ## [1] 4 ##  ## $channel_flow_speed ## [1] 1 ##  ## $subwatersheds ## [1] FALSE ##  ## $max_overlap ## [1] 0.2 ##  ## $rock_max_infiltration ## [1] 10 ##  ## $deep_aquifer_loss ## [1] 0"},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"simulations","dir":"Articles > Modelanalysis","previous_headings":"","what":"Simulations","title":"Sensitivity to watershed parameters","text":"Since watershed simulations time consuming, perform four simulations, .e. baseline plus modification three scaling factors, one time. Baseline configuration baseline configuration, set three scaling factors one: Now launch simulation. Focus values (mm) predicted aquifer exfiltration, saturation excess , finally, sum two sources export runoff. following compare values issued simulations altered scaling factors. Increasing local vertical conductivity begin sensitivity analysis increasing vertical conductivity five times: Increasing R_localflow effect increasing drainage soils aquifer (hence, decreasing soil moisture). also increases capillarity rise due higher conductivity. Aquifer exfiltration increases downslope consequence larger recharge upslope cells. Increasing subsurface lateral conductivity now focus lateral conductivity subsurface fluxes (interflow): Increasing lateral conductivity subsurface fluxes increases rate lateral exchange (.e. speed kinematic wave), resulting much larger saturation excess. also impacts amount aquifer exfiltration. Increasing groundwater lateral conductivity Let’s now perform simulation increased groundwater conductivity: Increasing speed groundwater fluxes leads much shallower water table downslope, significantly increasing amont exfiltration.","code":"ws_control$tetis_parameters$R_localflow <- 1 ws_control$tetis_parameters$R_interflow <- 1 ws_control$tetis_parameters$R_baseflow <- 1 res_0 <- spwb_land(r, example_watershed_burnin, SpParamsMED, examplemeteo,                     dates = dates, summary_frequency = \"month\",                    watershed_control = ws_control, progress = FALSE) ws_control$tetis_parameters$R_localflow <- 5 ws_control$tetis_parameters$R_interflow <- 1 ws_control$tetis_parameters$R_baseflow <- 1 res_L5 <- spwb_land(r, example_watershed_burnin, SpParamsMED, examplemeteo,                       dates = dates, summary_frequency = \"month\",                      watershed_control = ws_control, progress = FALSE) ws_control$tetis_parameters$R_localflow <- 1 ws_control$tetis_parameters$R_interflow <- 5 ws_control$tetis_parameters$R_baseflow <- 1 res_I5 <- spwb_land(r, example_watershed_burnin, SpParamsMED, examplemeteo,                       dates = dates, summary_frequency = \"month\",                      watershed_control = ws_control, progress = FALSE) ws_control$tetis_parameters$R_localflow <- 1 ws_control$tetis_parameters$R_interflow <- 1 ws_control$tetis_parameters$R_baseflow <- 5 res_B5 <- spwb_land(r, example_watershed_burnin, SpParamsMED, examplemeteo,                       dates = dates, summary_frequency = \"month\",                      watershed_control = ws_control, progress = FALSE)"},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"flux-rate-series","dir":"Articles > Modelanalysis","previous_headings":"Comparing predicted fluxes","what":"Flux rate series","title":"Sensitivity to watershed parameters","text":"Drainage  Aquifer exfiltration","code":"df1<- res_0$watershed_balance df1$Scenario <- \"Baseline\" df2<- res_L5$watershed_balance df2$Scenario <- \"R_local x 5\" df3<- res_I5$watershed_balance df3$Scenario <- \"R_inter x 5\" df4<- res_B5$watershed_balance df4$Scenario <- \"R_base x 5\" df<- rbind(df1,df2,df3, df4) df$Scenario <- factor(df$Scenario, levels = c(\"Baseline\", \"R_local x 5\", \"R_inter x 5\", \"R_base x 5\")) ggplot(df)+   geom_line(aes(x=dates, y =DeepDrainage, col = Scenario, linetype = Scenario))+   ylab(\"Deep drainage (mm)\")+   theme_bw() ggplot(df)+   geom_line(aes(x=dates, y =AquiferExfiltration, col = Scenario, linetype = Scenario))+   ylab(\"Aquifer exfiltration (mm)\")+   theme_bw()"},{"path":"https://emf-creaf.github.io/medfateland/articles/modelanalysis/TetisWatershedParameters.html","id":"flux-rate-maps","dir":"Articles > Modelanalysis","previous_headings":"Comparing predicted fluxes","what":"Flux rate maps","title":"Sensitivity to watershed parameters","text":"Drainage aquifer  Sub-surface balance  Groundwater balance","code":"g1 <- plot_summary(res_0$sf, \"DeepDrainage\", date = \"2001-01-01\", r = r, limits = c(0, 100))+labs(title = \"Baseline\") g2 <- plot_summary(res_L5$sf, \"DeepDrainage\", date = \"2001-01-01\", r = r, limits = c(0, 100))+labs(title = \"R_local x 5\") g3 <- plot_summary(res_I5$sf, \"DeepDrainage\", date = \"2001-01-01\", r = r, limits = c(0, 100))+labs(title = \"R_inter x 5\") g4 <- plot_summary(res_B5$sf, \"DeepDrainage\", date = \"2001-01-01\", r = r, limits = c(0, 100))+labs(title = \"R_base x 5\") cowplot::plot_grid(g1, g2, g3, g4 , ncol = 1, nrow = 4) g1 <- plot_summary(res_0$sf, \"InterflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(limits = c(-100, 450), mid=\"gray\", na.value = NA)+   labs(title = \"Baseline\") g2 <- plot_summary(res_L5$sf, \"InterflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(limits = c(-100, 450), mid=\"gray\", na.value = NA)+   labs(title = \"R_local x 5\") g3 <- plot_summary(res_I5$sf, \"InterflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(limits = c(-100, 450), mid=\"gray\", na.value = NA)+   labs(title = \"R_inter x 5\") g4 <- plot_summary(res_B5$sf, \"InterflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(limits = c(-100, 450), mid=\"gray\", na.value = NA)+   labs(title = \"R_base x 5\") cowplot::plot_grid(g1, g2, g3, g4 , ncol = 1, nrow = 4) g1 <- plot_summary(res_0$sf, \"BaseflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(mid=\"gray\", limits = c(-50, 250), na.value = NA)+   labs(title = \"Baseline\") g2 <- plot_summary(res_L5$sf, \"BaseflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(mid=\"gray\", limits = c(-50, 250), na.value = NA)+   labs(title = \"R_local x 5\") g3 <- plot_summary(res_I5$sf, \"BaseflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(mid=\"gray\", limits = c(-50, 250), na.value = NA)+   labs(title = \"R_inter x 5\") g4 <- plot_summary(res_B5$sf, \"BaseflowBalance\", date = \"2001-03-01\", r = r)+   scale_fill_gradient2(mid=\"gray\", limits = c(-50, 250), na.value = NA)+   labs(title = \"R_base x 5\") cowplot::plot_grid(g1, g2, g3, g4 , ncol = 1, nrow = 4)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"aim","dir":"Articles > Runmodels","previous_headings":"","what":"Aim","title":"Management scenarios","text":"aim vignette illustrate use medfateland (v. 2.6.0) carry simulations forest dynamics set forest stands evaluating demand-based management scenario. particular, illustrate use functions create_management_scenario() fordyn_scenario().","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"forest-stands-topography-and-soils","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Forest stands, topography and soils","title":"Management scenarios","text":"simulations medfateland sf object containing information topography, soils vegetation set target forest stands. begin loading example data set 100 forest stands distributed points landscape: speed-simulations vignette select stands 31 40:","code":"data(\"example_ifn\") example_ifn ## Simple feature collection with 100 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.817095 ymin: 41.93301 xmax: 2.142956 ymax: 41.99881 ## Geodetic CRS:  WGS 84 ## # A tibble: 100 × 8 ##                   geom id        elevation slope aspect land_cover_type soil   ##  *         <POINT [°]> <chr>         <dbl> <dbl>  <dbl> <chr>           <list> ##  1 (2.130641 41.99872) 081015_A1       680  7.73  281.  wildland        <df>   ##  2 (2.142714 41.99881) 081016_A1       736 15.6   212.  wildland        <df>   ##  3 (1.828998 41.98704) 081018_A1       532 17.6   291.  wildland        <df>   ##  4 (1.841068 41.98716) 081019_A1       581  4.79  174.  wildland        <df>   ##  5 (1.853138 41.98728) 081020_A1       613  4.76   36.9 wildland        <df>   ##  6 (1.901418 41.98775) 081021_A1       617 10.6   253.  wildland        <df>   ##  7 (1.937629 41.98809) 081022_A1       622 20.6   360   wildland        <df>   ##  8  (1.949699 41.9882) 081023_A1       687 14.4   324.  wildland        <df>   ##  9  (1.96177 41.98831) 081024_A1       597 11.8    16.3 wildland        <df>   ## 10  (1.97384 41.98842) 081025_A1       577 14.6   348.  wildland        <df>   ## # ℹ 90 more rows ## # ℹ 1 more variable: forest <list> example_subset <- example_ifn[31:40, ] example_subset ## Simple feature collection with 10 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.901727 ymin: 41.96974 xmax: 2.022399 ymax: 41.97083 ## Geodetic CRS:  WGS 84 ## # A tibble: 10 × 8 ##                   geom id        elevation slope aspect land_cover_type soil   ##            <POINT [°]> <chr>         <dbl> <dbl>  <dbl> <chr>           <list> ##  1 (1.901727 41.96974) 081047_A1       478 12.0   259.  wildland        <df>   ##  2 (1.925861 41.96997) 081048_A1       540 16.4   109.  wildland        <df>   ##  3 (1.937928 41.97008) 081049_A1       636  7.65  263.  wildland        <df>   ##  4 (1.949995 41.97019) 081050_A1       722 18.9   204.  wildland        <df>   ##  5  (1.962062 41.9703) 081051_A1       763  9.63  115.  wildland        <df>   ##  6 (1.974129 41.97041) 081052_A1       642  9.32  156.  wildland        <df>   ##  7 (1.986197 41.97052) 081053_A1       640 17.0   326.  wildland        <df>   ##  8 (1.998264 41.97062) 081054_A1       552 10.6    88.7 wildland        <df>   ##  9 (2.010331 41.97073) 081055_A1       593  5.73  265.  wildland        <df>   ## 10 (2.022399 41.97083) 081056_A1       601  5.26   84.8 wildland        <df>   ## # ℹ 1 more variable: forest <list>"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"climate-forcing","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Climate forcing","title":"Management scenarios","text":"example use, simplicity, weather data stands, normal applications address spatial variation weather. following code prepare three-year meteorological data two blocks (data frames), using example weather data provided medfate package:","code":"data(\"examplemeteo\")    meteo_01_02 <- rbind(examplemeteo, examplemeteo) meteo_01_02$dates <- seq(as.Date(\"2001-01-01\"),                           as.Date(\"2002-12-31\"), by=\"day\") meteo_03 <- examplemeteo meteo_03$dates <- seq(as.Date(\"2003-01-01\"),                        as.Date(\"2003-12-31\"), by=\"day\")"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"management-prescriptions","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Management prescriptions","title":"Management scenarios","text":"Management scenarios require classifying forest stands management units. management unit can interpreted set stands managed following prescriptions. Management units can arbitrarily defined, define basis dominant tree species. following code allows determining dominant tree species 10 forest stands: result : Package medfateland includes table default prescription parameters set species. loaded using: columns data frame parameter names required function defaultManagementFunction() package medfate: whereas rows correspond species species groups, whose names : specify management unit stands, first define column management_unit missing values assign corresponding row number defaultPrescriptionsBySpecies stands dominated three species. stands missing values management_unit (one) managed simulations.","code":"example_subset$dominant_tree_species <- sapply(example_subset$forest,                                                stand_dominantTreeSpecies, SpParamsMED) example_subset$dominant_tree_species ##  [1] \"Pinus halepensis\" \"Pinus nigra\"      \"Quercus faginea\"  \"Pinus nigra\"      ##  [5] \"Pinus nigra\"      \"Pinus halepensis\" \"Pinus nigra\"      \"Pinus nigra\"      ##  [9] \"Pinus nigra\"      \"Pinus nigra\" data(\"defaultPrescriptionsBySpecies\") names(defaultPrescriptionsBySpecies) ##  [1] \"Name\"                   \"SpIndex\"                \"type\"                   ##  [4] \"targetTreeSpecies\"      \"thinning\"               \"thinningMetric\"         ##  [7] \"thinningThreshold\"      \"thinningPerc\"           \"minThinningInterval\"    ## [10] \"yearsSinceThinning\"     \"finalMeanDBH\"           \"finalPerc\"              ## [13] \"finalPreviousStage\"     \"finalYearsBetweenCuts\"  \"finalYearsToCut\"        ## [16] \"plantingSpecies\"        \"plantingDBH\"            \"plantingHeight\"         ## [19] \"plantingDensity\"        \"understoryMaximumCover\" defaultPrescriptionsBySpecies$Name ##  [1] \"Abies/Picea/Pseudotsuga spp.\"            ##  [2] \"Betula/Acer spp.\"                        ##  [3] \"Castanea sativa\"                         ##  [4] \"Eucalyptus spp.\"                         ##  [5] \"Fagus sylvatica\"                         ##  [6] \"Fraxinus spp.\"                           ##  [7] \"Juniperus thurifera\"                     ##  [8] \"Cupressus spp.\"                          ##  [9] \"Pinus halepensis\"                        ## [10] \"Pinus nigra\"                             ## [11] \"Pinus pinaster\"                          ## [12] \"Pinus pinea\"                             ## [13] \"Pinus radiata\"                           ## [14] \"Pinus sylvestris\"                        ## [15] \"Pinus uncinata\"                          ## [16] \"Chamaecyparis lawsoniana\"                ## [17] \"Thuja spp.\"                              ## [18] \"Larix spp.\"                              ## [19] \"Quercus ilex\"                            ## [20] \"Quercus faginea\"                         ## [21] \"Quercus suber\"                           ## [22] \"Quercus robur/petraea/rubra/canariensis\" ## [23] \"Quercus pyrenaica/pubescens\"             ## [24] \"Platanus spp.\"                           ## [25] \"Populus spp.\"                            ## [26] \"Salix spp.\"                              ## [27] \"Otras frondosas\" example_subset$management_unit <- NA example_subset$management_unit[example_subset$dominant_tree_species==\"Pinus halepensis\"] <- 9 example_subset$management_unit[example_subset$dominant_tree_species==\"Pinus nigra\"] <- 10 example_subset$management_unit[example_subset$dominant_tree_species==\"Pinus sylvestris\"] <- 14 example_subset[,c(\"id\", \"dominant_tree_species\", \"management_unit\")] ## Simple feature collection with 10 features and 3 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.901727 ymin: 41.96974 xmax: 2.022399 ymax: 41.97083 ## Geodetic CRS:  WGS 84 ## # A tibble: 10 × 4 ##    id        dominant_tree_species management_unit                geom ##    <chr>     <chr>                           <dbl>         <POINT [°]> ##  1 081047_A1 Pinus halepensis                    9 (1.901727 41.96974) ##  2 081048_A1 Pinus nigra                        10 (1.925861 41.96997) ##  3 081049_A1 Quercus faginea                    NA (1.937928 41.97008) ##  4 081050_A1 Pinus nigra                        10 (1.949995 41.97019) ##  5 081051_A1 Pinus nigra                        10  (1.962062 41.9703) ##  6 081052_A1 Pinus halepensis                    9 (1.974129 41.97041) ##  7 081053_A1 Pinus nigra                        10 (1.986197 41.97052) ##  8 081054_A1 Pinus nigra                        10 (1.998264 41.97062) ##  9 081055_A1 Pinus nigra                        10 (2.010331 41.97073) ## 10 081056_A1 Pinus nigra                        10 (2.022399 41.97083)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"demand-based-management-scenario","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Demand-based management scenario","title":"Management scenarios","text":"Management scenarios defined using function create_management_scenario(). Three different kinds scenarios allowed. Two demand-based, meaning management constrained prescribed wood demand. remaining one allows actual management freely interplay forest dynamics management prescriptions. define demand-based scenario fixed demand values years simulation. demand normally depend species available target stands area represent. example, require annual extraction 2300 m3 Pinus nigra P. sylvestris 1000 m3 P. halepensis: Note included data frame defaultPrescriptionBySpecies call create_management_scenario(). allows sylvicultural prescriptions management parameters single object. Simulations assign management parameters using management_unit column information prescription data frame. scenario object list following elements. first one specifies type scenario, case based fixed input demand: next element contains demand values entered: following element NULL case, since used specify demand-based scenarios actual demand depends observed growth desired rate extraction: Finally, element units contains data frame management units, case defaultPrescriptionBySpecies. Normally, need modify management parameters, make thinning operations likely three species lowering basal area threshold triggers :","code":"scen <- create_management_scenario(defaultPrescriptionsBySpecies,                                     c(\"Pinus nigra/Pinus sylvestris\" = 1300,                                      \"Pinus halepensis\" = 500)) names(scen) ## [1] \"scenario_type\"            \"annual_demand_by_species\" ## [3] \"extraction_rate_by_year\"  \"units\" scen$scenario_type ## [1] \"input_demand\" scen$annual_demand_by_species ## Pinus nigra/Pinus sylvestris             Pinus halepensis  ##                         1300                          500 scen$extraction_rate_by_year ## NULL scen$units[c(9,10,14),\"thinningThreshold\"] <-20"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"area-represented-by-forest-stands","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Area represented by forest stands","title":"Management scenarios","text":"running simulations, necessary specify area (ha) forest stand represents. important, wood volumes defined stand level units m3/ha. Hence, need multiply values actual area stand represents, order know much demand fulfilled example, assume constant area 100 ha stands:","code":"example_subset$represented_area_ha <- 100"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"carrying-out-simulations","dir":"Articles > Runmodels","previous_headings":"","what":"Carrying out simulations","title":"Management scenarios","text":"now ready launch simulation management scenario. done using call function fordyn_scenario(). simulation functions medfateland, need supply sf object, table species parameter values source weather information. also specify management scenario set parallelize = TRUE speed-calculations. last parameter also important real-case simulations. Given long process, function produces lot output (can turned progress = FALSE). First, scenario parameters presented, including scenario type, specified demand number forest stands management unit. , output produced year, function first decides reports many forest stands simulated , completed, summarizes results. Function fordyn_scenario() returns list whose elements : first four elements, named result_* contain actual simulation results, whereas last two elements used subsequent simulations (see next section). Stand-level results available element result_sf. column names sf object easy interpret experience functions fordyn() fordyn_spatial(): Another important element results result_volumes, contains several volumes statistics (m3) summarizing happened year simulation. First, can inspect year volume corresponding initial final standing stock, forest growth extracted wood: figures can inspected, corresponding species demand defined: Finally, can display step nominal demand (according input), actual demand (offset previous years included), well cumulative nominal demand cumulative extracted volumes. strong disagreements can exist demand extracted wood annual level, cumulative columns mentioned important check whether simulations fulfilled required demand long term.","code":"fs_12 <- fordyn_scenario(example_subset, SpParamsMED, meteo = meteo_01_02,                           management_scenario = scen,                          parallelize = TRUE) ## ## ── Simulation of a management/fire scenario with fordyn ──────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [8ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [11ms] ## ## ── Scenario parameters ── ## ## • Number of stands: 10 ## • Represented area: 1000 ha ## • Number of years: 2 ## • Management scenario type: input_demand ## • Adding column 'management_arguments' ## • Default volume function ## • Initial volume: 66449 m3 ## • Seed dispersal process included. ## ## ── Simulation ── ## ## ──  [ Year 2001 (1/2) ] ## • Demand (incl. offset): 1800 m3 ## • Determining available volumes and final cuts ## • Demand (after final cuts): 1800 m3 ## • Determining thinning operations ## • Seed bank dynamics and seed dispersal... ## • Calling fordyn_spatial... ## ℹ Checking sf input ## ✔ Checking sf input [8ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [11ms] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [14ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 2) ## ✔ Launching parallel computation (cores = 7; chunk size = 2) [12.1s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [19ms] ## ## ✔ No simulation errors detected ## • Final volume: 64108 m3 ## ## ──  [ Year 2002 (2/2) ] ## • Demand (incl. offset): 2762 m3 ## • Determining available volumes and final cuts ## • Demand (after final cuts): 2762 m3 ## • Determining thinning operations ## • Seed bank dynamics and seed dispersal... ## • Calling fordyn_spatial... ## ℹ Checking sf input ## ✔ Checking sf input [6ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [11ms] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [10ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 2) ## ✔ Launching parallel computation (cores = 7; chunk size = 2) [9.4s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [18ms] ## ## ✔ No simulation errors detected ## • Final volume: 62248 m3 ## ## ── Arranging output ── ## ## • Tree/shrub tables ## • Wood volume table names(fs_12) ## [1] \"result_sf\"             \"result_volumes\"        \"result_volumes_spp\"    ## [4] \"result_volumes_demand\" \"next_demand\"           \"next_sf\" fs_12$result_sf ## Simple feature collection with 10 features and 8 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.901727 ymin: 41.96974 xmax: 2.022399 ymax: 41.97083 ## Geodetic CRS:  WGS 84 ## # A tibble: 10 × 9 ##               geometry id        tree_table         shrub_table dead_tree_table ##            <POINT [°]> <chr>     <list>             <list>      <list>          ##  1 (1.901727 41.96974) 081047_A1 <tibble [50 × 11]> <tibble>    <tibble>        ##  2 (1.925861 41.96997) 081048_A1 <tibble [45 × 11]> <tibble>    <tibble>        ##  3 (1.937928 41.97008) 081049_A1 <tibble [15 × 11]> <tibble>    <tibble>        ##  4 (1.949995 41.97019) 081050_A1 <tibble [47 × 11]> <tibble>    <tibble>        ##  5  (1.962062 41.9703) 081051_A1 <tibble [37 × 11]> <tibble>    <tibble>        ##  6 (1.974129 41.97041) 081052_A1 <tibble [56 × 11]> <tibble>    <tibble>        ##  7 (1.986197 41.97052) 081053_A1 <tibble [61 × 11]> <tibble>    <tibble>        ##  8 (1.998264 41.97062) 081054_A1 <tibble [71 × 11]> <tibble>    <tibble>        ##  9 (2.010331 41.97073) 081055_A1 <tibble [39 × 11]> <tibble>    <tibble>        ## 10 (2.022399 41.97083) 081056_A1 <tibble [64 × 11]> <tibble>    <tibble>        ## # ℹ 4 more variables: dead_shrub_table <list>, cut_tree_table <list>, ## #   cut_shrub_table <list>, summary <list> fs_12$result_volumes[,1:7] ## # A tibble: 2 × 7 ##    Year initial growth mortality extracted  final cumulative_growth ##   <dbl>   <dbl>  <dbl>     <dbl>     <dbl>  <dbl>             <dbl> ## 1  2001  66449.   902.      51.9     3190. 64108.              902. ## 2  2002  64108.   789.      48.1     2602. 62248.             1691. fs_12$result_volumes[,c(1,8:11)] ## # A tibble: 2 × 5 ##    Year cumulative_extraction initial_target growth_target mortality_target ##   <dbl>                 <dbl>          <dbl>         <dbl>            <dbl> ## 1  2001                 3190.         62682.          878.             47.6 ## 2  2002                 5792.         62674.          773.             47.0 fs_12$result_volumes[,c(1, 12:16)] ## # A tibble: 2 × 6 ##    Year extracted_target final_target nominal_demand demand_offset actual_demand ##   <dbl>            <dbl>        <dbl>          <dbl>         <dbl>         <dbl> ## 1  2001             838.       64108.           1800            0          1800  ## 2  2002            2602.       62248.           1800          962.         2762."},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/ManagementScenarios.html","id":"continuing-a-previous-simulation","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Continuing a previous simulation","title":"Management scenarios","text":"mentioned , elements output fordyn_scenario() allow conducting new scenario simulation starting point previous one finished. element next_sf contains sf object corresponding final state simulation: hand, demand-based scenarios may demand offsets need carried next simulations: addition demand offset species species group, note next_demand also contains information last growth. necessary scenarios demand modulated depending intended extraction rates past growth. want carry simulations extra time period (one year example), can simply call fordyn_scenario() along result previous simulation instead original sf object: Note case, initial output makes explicit previous simulation continued.","code":"fs_12$next_sf ## Simple feature collection with 10 features and 12 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.901727 ymin: 41.96974 xmax: 2.022399 ymax: 41.97083 ## Geodetic CRS:  WGS 84 ## # A tibble: 10 × 13 ##                   geom id        elevation slope aspect land_cover_type soil   ##  *         <POINT [°]> <chr>         <dbl> <dbl>  <dbl> <chr>           <list> ##  1 (1.901727 41.96974) 081047_A1       478 12.0   259.  wildland        <soil> ##  2 (1.925861 41.96997) 081048_A1       540 16.4   109.  wildland        <soil> ##  3 (1.937928 41.97008) 081049_A1       636  7.65  263.  wildland        <soil> ##  4 (1.949995 41.97019) 081050_A1       722 18.9   204.  wildland        <soil> ##  5  (1.962062 41.9703) 081051_A1       763  9.63  115.  wildland        <soil> ##  6 (1.974129 41.97041) 081052_A1       642  9.32  156.  wildland        <soil> ##  7 (1.986197 41.97052) 081053_A1       640 17.0   326.  wildland        <soil> ##  8 (1.998264 41.97062) 081054_A1       552 10.6    88.7 wildland        <soil> ##  9 (2.010331 41.97073) 081055_A1       593  5.73  265.  wildland        <soil> ## 10 (2.022399 41.97083) 081056_A1       601  5.26   84.8 wildland        <soil> ## # ℹ 6 more variables: forest <list>, dominant_tree_species <chr>, ## #   management_unit <dbl>, represented_area_ha <dbl>, ## #   management_arguments <list>, state <list> fs_12$next_demand ## $offset ## Pinus nigra/Pinus sylvestris             Pinus halepensis  ##                    -37.01539                    197.63357  ##  ## $last_growth ## [1] 773.0101 fs_3 <- fordyn_scenario(fs_12, SpParamsMED, meteo = meteo_03,                          management_scenario = scen,                         parallelize = TRUE) ## ## ── Simulation of a management/fire scenario with fordyn ──────────────────────── ## ℹ Recovering previous run ## ✔ Recovering previous run [5ms] ## ## ℹ Checking sf input ## ✔ Checking sf input [9ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [9ms] ## ## ── Scenario parameters ── ## ## • Number of stands: 10 ## • Represented area: 1000 ha ## • Number of years: 1 ## • Management scenario type: input_demand ## • Default volume function ## • Initial volume: 62248 m3 ## • Seed dispersal process included. ## ## ── Simulation ── ## ## ──  [ Year 2003 (1/1) ] ## • Demand (incl. offset): 1961 m3 ## • Determining available volumes and final cuts ## • Demand (after final cuts): 1961 m3 ## • Determining thinning operations ## • Seed bank dynamics and seed dispersal... ## • Calling fordyn_spatial... ## ℹ Checking sf input ## ✔ Checking sf input [10ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [11ms] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [13ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 2) ## ✔ Launching parallel computation (cores = 7; chunk size = 2) [11.3s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [21ms] ## ## ✔ No simulation errors detected ## • Final volume: 63010 m3 ## ## ── Arranging output ── ## ## • Tree/shrub tables ## • Wood volume table"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"aim","dir":"Articles > Runmodels","previous_headings":"","what":"Aim","title":"Spatially-uncoupled simulations","text":"aim vignette illustrate use medfateland (v. 2.6.0) carry simulations forest function dynamics set spatial units, without taking account spatial processes. done using functions spwb_spatial(), growth_spatial() fordyn_spatial(); counterparts functions spwb(), growth() fordyn() package medfate. example, use function spwb_spatial(), two functions used similarly.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"input-structures","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Input structures","title":"Spatially-uncoupled simulations","text":"fundamental input structure medfateland object class sf, .e. simple feature collection geometries (normally points) described attributes. case medfateland, spatial attributes correspond model inputs spatial units represented. begin loading example data set 100 forest stands distributed points landscape: Despite geometries (coordinate reference system), following columns required: id identifiers stands (e.g. forest inventory plot codes) elevation (m), slope (degrees), aspect (degrees) describe topography stands land_cover_type describes land cover unit (values wildland agriculture spatially-uncoupled simulations). forest objects class forest (see package medfate) describing structure composition forest stands soil describes soil forest stand, using either data frame physical attributes initialized objects class soil (see package medfate). Note columns forest soil contain vectors lists, elements either lists data.frames. example, forest corresponding first stand : soil :","code":"data(\"example_ifn\") example_ifn ## Simple feature collection with 100 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 1.817095 ymin: 41.93301 xmax: 2.142956 ymax: 41.99881 ## Geodetic CRS:  WGS 84 ## # A tibble: 100 × 8 ##                   geom id        elevation slope aspect land_cover_type soil   ##  *         <POINT [°]> <chr>         <dbl> <dbl>  <dbl> <chr>           <list> ##  1 (2.130641 41.99872) 081015_A1       680  7.73  281.  wildland        <df>   ##  2 (2.142714 41.99881) 081016_A1       736 15.6   212.  wildland        <df>   ##  3 (1.828998 41.98704) 081018_A1       532 17.6   291.  wildland        <df>   ##  4 (1.841068 41.98716) 081019_A1       581  4.79  174.  wildland        <df>   ##  5 (1.853138 41.98728) 081020_A1       613  4.76   36.9 wildland        <df>   ##  6 (1.901418 41.98775) 081021_A1       617 10.6   253.  wildland        <df>   ##  7 (1.937629 41.98809) 081022_A1       622 20.6   360   wildland        <df>   ##  8  (1.949699 41.9882) 081023_A1       687 14.4   324.  wildland        <df>   ##  9  (1.96177 41.98831) 081024_A1       597 11.8    16.3 wildland        <df>   ## 10  (1.97384 41.98842) 081025_A1       577 14.6   348.  wildland        <df>   ## # ℹ 90 more rows ## # ℹ 1 more variable: forest <list> example_ifn$forest[[3]] ## $treeData ##   IFNcode           Species DBH Height        N      Z50  Z95 ## 1    0243 Quercus pubescens 1.5    100 318.3099 647.0011 4510 ##  ## $shrubData ##   IFNcode           Species Height Cover      Z50  Z95 ## 1    0105 Quercus coccifera     40     1 647.0011 4510 ## 2    0114 Salvia rosmarinus     70     3 203.0918 1000 ## 3    3121        Rubus spp.    110     5 151.6395  684 ## 4    7104    Dorycnium spp.     40     5 153.5119  695 ##  ## $herbCover ## [1] NA ##  ## $herbHeight ## [1] NA ##  ## attr(,\"class\") ## [1] \"forest\" \"list\" example_ifn$soil[[3]] ##   widths     clay  sand   om       bd      rfc ## 1    300 25.76667 37.90 2.73 1.406667 23.84454 ## 2    700 27.30000 36.35 0.98 1.535000 31.63389 ## 3   1000 27.70000 36.00 0.64 1.560000 53.90746 ## 4   2000 27.70000 36.00 0.64 1.560000 97.50000"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"displaying-maps-of-landscape-properties","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Displaying maps of landscape properties","title":"Spatially-uncoupled simulations","text":"Using plot_variable() functions spatial landscape objects, can draw maps variables using:  set maps available can known inspecting help function extract_variables(). Alternatively, package provides function shinyplot_land() display maps interactively.","code":"plot_variable(example_ifn, \"basal_area\")"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"climate-forcing","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Climate forcing","title":"Spatially-uncoupled simulations","text":"medfateland several alternatives specify climate forcing. Provide single data frame daily weather stands. Provide different daily weather stand (additional column sf called meteo) Provide object perform daily weather interpolation simulations (see later document). document, follow simpler option, assume weather stands. supply single data frame daily weather plots: interesting alternatives described help function spwb_spatial(). Notably, column meteo may defined sf input object, spatial unit user can supply different data frame.","code":"data(\"examplemeteo\") head(examplemeteo) ##        dates MinTemperature MaxTemperature Precipitation MinRelativeHumidity ## 1 2001-01-01     -0.5934215       6.287950      4.869109            65.15411 ## 2 2001-01-02     -2.3662458       4.569737      2.498292            57.43761 ## 3 2001-01-03     -3.8541036       2.661951      0.000000            58.77432 ## 4 2001-01-04     -1.8744860       3.097705      5.796973            66.84256 ## 5 2001-01-05      0.3288287       7.551532      1.884401            62.97656 ## 6 2001-01-06      0.5461322       7.186784     13.359801            74.25754 ##   MaxRelativeHumidity Radiation WindSpeed ## 1           100.00000  12.89251  2.000000 ## 2            94.71780  13.03079  7.662544 ## 3            94.66823  16.90722  2.000000 ## 4            95.80950  11.07275  2.000000 ## 5           100.00000  13.45205  7.581347 ## 6           100.00000  12.84841  6.570501"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"species-parameters-and-local-control-parameters","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Species parameters and local control parameters","title":"Spatially-uncoupled simulations","text":"Since builds medfate, simulations using medfateland require species parameters control parameters local simulations: Importantly, control parameters apply spatial units sf object.","code":"data(\"SpParamsMED\") local_control <- defaultControl()"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"carrying-out-simulations","dir":"Articles > Runmodels","previous_headings":"","what":"Carrying out simulations","title":"Spatially-uncoupled simulations","text":"already know, package medfate includes functions spwb(), growth() fordyn() simulate soil water balance, carbon balance forest dynamics single forest stand, respectively. section describe run simulations set forest stands one call. example, use function spwb_spatial(), simulates soil plant water balance forests distributed particular locations, growth_spatial() fordyn_spatial() similar.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"calling-the-simulation-function","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Calling the simulation function","title":"Spatially-uncoupled simulations","text":"call spwb_spatial() can done follows (use parameter dates restrict simulation period january february): Function spwb_spatial() first initializes model inputs calling spwbInput() forest stand described sf landscape object. calls function spwb() forest stand stores result. case, asked parallel computation via parameter parallelize = TRUE. simulation result also object class sf following columns: Column geometry contains geometry given input simulations, column id contains identification label stand, column state contains spwbInput corresponding forest stand (can used subsequent simulations) column result contains output spwb() function forest stand (.e. elements objects S3 class spwb).","code":"dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-02-28\"), by=\"day\") res <- spwb_spatial(example_ifn, SpParamsMED, examplemeteo,                      dates = dates, local_control = local_control,                       parallelize = TRUE) ## ## ── Simulation of model 'spwb' ────────────────────────────────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [10ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [14ms] ## ## ℹ Creating 100 input objects for model 'spwb' ## ✔ Creating 100 input objects for model 'spwb' [1.6s] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [51ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 14) ## ✔ Launching parallel computation (cores = 7; chunk size = 14) [8.5s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [29ms] ## ## ✔ No simulation errors detected names(res) ## [1] \"geometry\" \"id\"       \"state\"    \"result\""},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"temporal-summaries-plots-and-maps","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Temporal summaries, plots and maps","title":"Spatially-uncoupled simulations","text":"structure output spwb_spatial() allows querying information simulation particular forest stand. example, may use function plot.spwb(), package medfate, display simulation results particular plot:  Similarly, want monthly summary water balance first stand, can use function summary.spwb() package medfate: However, convenient way generating summaries calculating forest stands one step, using function simulation_summary() objects issued simulations: argument summary_function points function used generate local summaries remaining arguments local summary function. result using simulation_summary() object class sf contains spatial geometry list summaries stands: summary first stand can now accessed first element column summary: Summary objects handy plot_summary() function allows us display maps summaries specific dates:   avoid displaying maps one one, package includes function shinyplot_land() allows displaying maps temporal summaries interactively.","code":"plot(res$result[[1]], \"Evapotranspiration\") summary(res$result[[1]], freq=\"months\",FUN=sum, output=\"WaterBalance\") ##                 PET Precipitation      Rain      Snow   NetRain  Snowmelt ## 2001-01-01 31.14173      74.74949 58.098839 16.650650 40.916807 13.093006 ## 2001-02-01 64.19423       4.99943  2.457859  2.541571  0.949663  5.552842 ##            Infiltration InfiltrationExcess SaturationExcess Runoff DeepDrainage ## 2001-01-01    54.009813                  0                0      0    32.613941 ## 2001-02-01     6.502505                  0                0      0     9.672644 ##            CapillarityRise Evapotranspiration Interception SoilEvaporation ## 2001-01-01               0           30.33189    17.182031        5.406222 ## 2001-02-01               0           19.40535     1.508196        1.961205 ##            HerbTranspiration PlantExtraction Transpiration ## 2001-01-01                 0        7.743636      7.743636 ## 2001-02-01                 0       15.935953     15.935953 ##            HydraulicRedistribution ## 2001-01-01             0.011330227 ## 2001-02-01             0.007692924 res_sum <- simulation_summary(res, summary_function = summary.spwb,                                freq=\"months\", output=\"WaterBalance\") names(res_sum) ## [1] \"geometry\" \"id\"       \"summary\" res_sum$summary[[1]] ##                 PET Precipitation      Rain      Snow   NetRain  Snowmelt ## 2001-01-01 31.14173      74.74949 58.098839 16.650650 40.916807 13.093006 ## 2001-02-01 64.19423       4.99943  2.457859  2.541571  0.949663  5.552842 ##            Infiltration InfiltrationExcess SaturationExcess Runoff DeepDrainage ## 2001-01-01    54.009813                  0                0      0    32.613941 ## 2001-02-01     6.502505                  0                0      0     9.672644 ##            CapillarityRise Evapotranspiration Interception SoilEvaporation ## 2001-01-01               0           30.33189    17.182031        5.406222 ## 2001-02-01               0           19.40535     1.508196        1.961205 ##            HerbTranspiration PlantExtraction Transpiration ## 2001-01-01                 0        7.743636      7.743636 ## 2001-02-01                 0       15.935953     15.935953 ##            HydraulicRedistribution ## 2001-01-01             0.011330227 ## 2001-02-01             0.007692924 plot_summary(res_sum, \"Transpiration\", \"2001-01-01\", limits=c(0,45)) plot_summary(res_sum, \"Transpiration\", \"2001-02-01\", limits=c(0,45))"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"simulation-with-integrated-temporal-summaries","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Simulation with integrated temporal summaries","title":"Spatially-uncoupled simulations","text":"one needs save memory, possible spwb_spatial() generate temporal summaries automatically simulation soil water balance stand, storing summaries instead output function spwb(). example following code keep temporal summaries water balance components instead simulation results: Parameter keep_results = FALSE tells spwb_spatial() keep simulation results forest stands, whereas summary_function = summary.spwb tells spwb_spatial() perform store summaries discarding results stand. output slightly different column names: particular, result included. Now temporal summaries can directly accessed column summary: one can produce maps summary results directly output simulation function:  possibility running summary function simulation stand limited summary.spwb(). Users can define summary functions, provided first argument object, contain result simulation (.e., result calling spwb(), growth() fordyn()). example, following function returns data frame corresponding plant drought stress: Now can call spwb_spatial: drought stress summary stand 3 :","code":"res_2 <- spwb_spatial(example_ifn, SpParamsMED, examplemeteo,                    dates = dates, local_control = local_control,                                     keep_results = FALSE, parallelize = TRUE,                   summary_function = summary.spwb, summary_arguments = list(freq=\"months\")) ## ## ── Simulation of model 'spwb' ────────────────────────────────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [10ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [16ms] ## ## ℹ Creating 100 input objects for model 'spwb' ## ✔ Creating 100 input objects for model 'spwb' [2.4s] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [20ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 14) ## ✔ Launching parallel computation (cores = 7; chunk size = 14) [9s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [26ms] ## ## ✔ No simulation errors detected names(res_2) ## [1] \"geometry\" \"id\"       \"state\"    \"result\"   \"summary\" res_2$summary[[1]] ##                 PET Precipitation      Rain      Snow   NetRain  Snowmelt ## 2001-01-01 31.14173      74.74949 58.098839 16.650650 40.916807 13.093006 ## 2001-02-01 64.19423       4.99943  2.457859  2.541571  0.949663  5.552842 ##            Infiltration InfiltrationExcess SaturationExcess Runoff DeepDrainage ## 2001-01-01    54.009813                  0                0      0    32.613941 ## 2001-02-01     6.502505                  0                0      0     9.672644 ##            CapillarityRise Evapotranspiration Interception SoilEvaporation ## 2001-01-01               0           30.33189    17.182031        5.406222 ## 2001-02-01               0           19.40535     1.508196        1.961205 ##            HerbTranspiration PlantExtraction Transpiration ## 2001-01-01                 0        7.743636      7.743636 ## 2001-02-01                 0       15.935953     15.935953 ##            HydraulicRedistribution ## 2001-01-01             0.011330227 ## 2001-02-01             0.007692924 plot_summary(res_2, \"Transpiration\", \"2001-02-01\", limits=c(0,45)) f_stress <- function(object, ...) {   return(object$Plants$PlantStress) } res_3 <- spwb_spatial(example_ifn, SpParamsMED, examplemeteo,                   dates = dates, local_control = local_control,                   keep_results = FALSE, parallelize = TRUE,                   summary_function = f_stress) ## ## ── Simulation of model 'spwb' ────────────────────────────────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [11ms] ## ## ℹ Checking meteo object input ## ✔ Checking meteo object input [16ms] ## ## ℹ Creating 100 input objects for model 'spwb' ## ✔ Creating 100 input objects for model 'spwb' [2.6s] ## ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [17ms] ## ## ℹ Launching parallel computation (cores = 7; chunk size = 14) ## ✔ Launching parallel computation (cores = 7; chunk size = 14) [8.8s] ## ## ℹ Retrieval of results ## ✔ Retrieval of results [32ms] ## ## ✔ No simulation errors detected head(res_3$summary[[3]]) ##            T1_171      S1_165 S2_188 S3_183 S4_79 ## 2001-01-01      0 0.003088161      0      0     0 ## 2001-01-02      0 0.002857868      0      0     0 ## 2001-01-03      0 0.002832776      0      0     0 ## 2001-01-04      0 0.002913234      0      0     0 ## 2001-01-05      0 0.002777158      0      0     0 ## 2001-01-06      0 0.002774164      0      0     0"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"continuing-a-previous-simulation","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Continuing a previous simulation","title":"Spatially-uncoupled simulations","text":"result simulation includes element state, stores state soil stand variables end simulation. information can used perform new simulation point first one ended. order , need update state variables spatial object values end simulation, using function update_landscape(): Note new column state appears now sf object. can check effect drawing soil water potential:  using new object input can now simulate water balance set stands extra month: display map resulting month transpiration:","code":"example_ifn_mod <- update_landscape(example_ifn, res) names(example_ifn_mod) ## [1] \"geom\"            \"id\"              \"elevation\"       \"slope\"           ## [5] \"aspect\"          \"land_cover_type\" \"soil\"            \"forest\"          ## [9] \"state\" plot_variable(example_ifn_mod, \"soil_psi_curr\") dates <- seq(as.Date(\"2001-03-01\"), as.Date(\"2001-03-31\"), by=\"day\") res_3 <- spwb_spatial(example_ifn_mod, SpParamsMED, examplemeteo,                        dates = dates, local_control = local_control,                        summary_function = summary.spwb, summary_arguments = list(freq = \"months\"),                       parallelize = TRUE) ## ## ── Simulation of model 'spwb' ────────────────────────────────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [10ms] ## ## ℹ Checking meteo object input ## ℹ All input objects are already available for 'spwb' ## ℹ Checking meteo object input✔ Checking meteo object input [19ms] ##  ## ℹ Preparing data for parallelization ## ✔ Preparing data for parallelization [29ms] ##  ## ℹ Launching parallel computation (cores = 7; chunk size = 14) ## ✔ Launching parallel computation (cores = 7; chunk size = 14) [8.3s] ##  ## ℹ Retrieval of results ## ✔ Retrieval of results [29ms] ##  ## ✔ No simulation errors detected plot_summary(res_3, \"Transpiration\", \"2001-03-01\", limits=c(0,45))"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/SpatiallyUncoupledSimulations.html","id":"simulations-using-weather-interpolation","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Simulations using weather interpolation","title":"Spatially-uncoupled simulations","text":"Specifying single weather data frame forest stands may suitable far . Specifying different weather data frame stand can also problem thousands stands simulate, due huge data requirements. solution can using interpolation fly, inside simulations. can done supplying interpolator object (list ), defined package meteoland. use example data provided package: object, using straightforward, via parameter meteo:","code":"interpolator <- meteoland::with_meteo(meteoland_meteo_example, verbose = FALSE) |>     meteoland::create_meteo_interpolator(params = defaultInterpolationParams()) ## ℹ Creating interpolator... ## • Calculating smoothed variables... ## • Updating intial_Rp parameter with the actual stations mean distance... ## ✔ Interpolator created. res_4 <- spwb_spatial(example_ifn_mod, SpParamsMED, meteo = interpolator,                        local_control = local_control,                        summary_function = summary.spwb, summary_arguments = list(freq = \"months\"),                       parallelize = FALSE) ## ## ── Simulation of model 'spwb' ────────────────────────────────────────────────── ## ℹ Checking sf input ## ✔ Checking sf input [10ms] ## ## ℹ Checking meteo object input ## ℹ All input objects are already available for 'spwb' ## ℹ Checking meteo object input✔ Checking meteo object input [17ms] ##  ## ℹ Performing 'spwb' simulations on 100 locations ## ✔ Performing 'spwb' simulations on 100 locations [15ms] ##  ## Stands ■■■                                5% | ETA: 23s ## Stands ■■■■■■■                           21% | ETA: 15s ## Stands ■■■■■■■■■■■■■■■                   45% | ETA:  9s ## Stands ■■■■■■■■■■■■■■■■■■■■■             66% | ETA:  5s ## Stands ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      91% | ETA:  1s ## Stands ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s ## ✔ No simulation errors detected"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"aim","dir":"Articles > Runmodels","previous_headings":"","what":"Aim","title":"Watershed simulations","text":"aim vignette illustrate use medfateland (v. 2.6.0) carry simulations forest function dynamics set forest stands including lateral water transfer processes. done using functions spwb_land(), growth_land() fordyn_land(); counterparts functions spwb(), growth() fordyn() package medfate. focus function spwb_land(), two functions used similarly. can said functions spwb_land_day() growth_land_day(), counterparts spwb_day() growth_day(), respectively.","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"preparation","dir":"Articles > Runmodels","previous_headings":"","what":"Preparation","title":"Watershed simulations","text":"Preparing inputs watershed simulations can tedious. Two main inputs need assembled, described following two sections (see also Preparing inputs II: arbitrary locations).","code":""},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"input-sf-objects","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Input sf objects","title":"Watershed simulations","text":"load small example watershed included package, can used understand inputs required: columns like forest, soil, elevation, state, also present example spatially-uncoupled simulations, repeat . following describes additional columns relevant . Land cover type Simulations watersheds normally include different land cover types. described column land_cover_type: Local landscape processes behave differently depending land cover type. Aquifer snowpack Columns aquifer snowpack used state variables store water content aquifer snowpack, respectively. Crop factors Since landscape contains agricultural lands, need define crop factors, determine transpiration flow proportion potential evapotranspiration: Channel network large watersheds, hydrological behavior model may appropriate water routing river channel considered. binary column called channel included input, model use determine river network, outlets time days reach (see function overland_routing static analysis channel routing).","code":"data(\"example_watershed\") example_watershed ## Simple feature collection with 66 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 401430 ymin: 4671870 xmax: 402830 ymax: 4672570 ## Projected CRS: WGS 84 / UTM zone 31N ## # A tibble: 66 × 15 ##            geometry    id elevation slope aspect land_cover_type ##  *      <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (402630 4672570)     1      1162 11.3   79.2  wildland        ##  2 (402330 4672470)     2      1214 12.4   98.7  agriculture     ##  3 (402430 4672470)     3      1197 10.4  102.   wildland        ##  4 (402530 4672470)     4      1180  8.12  83.3  wildland        ##  5 (402630 4672470)     5      1164 13.9   96.8  wildland        ##  6 (402730 4672470)     6      1146 11.2    8.47 agriculture     ##  7 (402830 4672470)     7      1153  9.26 356.   agriculture     ##  8 (402230 4672370)     8      1237 14.5   75.1  wildland        ##  9 (402330 4672370)     9      1213 13.2   78.7  wildland        ## 10 (402430 4672370)    10      1198  8.56  75.6  agriculture     ## # ℹ 56 more rows ## # ℹ 9 more variables: forest <list>, soil <list>, state <list>, ## #   depth_to_bedrock <dbl>, bedrock_conductivity <dbl>, bedrock_porosity <dbl>, ## #   snowpack <dbl>, aquifer <dbl>, crop_factor <dbl> table(example_watershed$land_cover_type) ##  ## agriculture        rock    wildland  ##          17           1          48 example_watershed$crop_factor = NA example_watershed$crop_factor[example_watershed$land_cover_type==\"agriculture\"] = 0.75"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"grid-topology","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Grid topology","title":"Watershed simulations","text":"Note sf structure imply grid per se. Point geometry used describe central coordinates grid cells, describe grid. means another spatial input needed describe grid topology, case object class SpatRaster package terra: r object must coordinate reference system sf object. Moreover, grid cell can contain one point sf (typically cell center). grid cells may empty, though, actual simulations may done incomplete grid. Note raster contain data, topology needed (define neighbors cell sizes, example). relevant attribute data already included sf object. Combining r sf objects allows drawing rasterized maps:","code":"r <-terra::rast(xmin = 401380, ymin = 4671820, xmax = 402880, ymax = 4672620,                  nrow = 8, ncol = 15, crs = \"epsg:32631\") r ## class       : SpatRaster  ## dimensions  : 8, 15, 1  (nrow, ncol, nlyr) ## resolution  : 100, 100  (x, y) ## extent      : 401380, 402880, 4671820, 4672620  (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 31N (EPSG:32631) plot_variable(example_watershed, variable = \"elevation\", r = r)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"watershed-control-options","dir":"Articles > Runmodels","previous_headings":"Preparation","what":"Watershed control options","title":"Watershed simulations","text":"Analogously local-scale simulations medfate, watershed simulations overall control parameters. Notably, user needs decide sub-model used lateral water transfer processes (decision similar choosing plant transpiration sub-model medfate), default “tetis”:","code":"ws_control <- default_watershed_control(\"tetis\")"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"initialization","dir":"Articles > Runmodels","previous_headings":"","what":"Initialization","title":"Watershed simulations","text":"Simulation model inputs need created target watershed launching simulations. may done automatically, though, calling watershed simulation functions, many occasions practical perform step separately. plan use function spwb_land(), watershed initialization follows: use function defaultControl() specify control parameters local processes. Function initialize_landscape() makes internal calls spwbInput() medfate defines column state initialized inputs. point important learn one option may speed calculations. Initialization may done simplifying forest structure dominant species (see function forest_reduceToDominant() package medfate). Hence, can initialize using simplify = TRUE: computational reasons, keep simplified initialization next sections.","code":"example_init <- initialize_landscape(example_watershed, SpParams = SpParamsMED,                                      local_control = defaultControl(soilDomains = \"buckets\")) ## ℹ Creating 65 state objects for model 'spwb'. ## ✔ Creating 65 state objects for model 'spwb'. [15ms] ## ## • Transpiration mode [Granier: 65, Sperry: 0, Sureau: 0] ## • Soil doimains [buckets: 65, single: 0, dual: 0] example_init ## Simple feature collection with 66 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 401430 ymin: 4671870 xmax: 402830 ymax: 4672570 ## Projected CRS: WGS 84 / UTM zone 31N ## # A tibble: 66 × 15 ##            geometry    id elevation slope aspect land_cover_type ##  *      <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (402630 4672570)     1      1162 11.3   79.2  wildland        ##  2 (402330 4672470)     2      1214 12.4   98.7  agriculture     ##  3 (402430 4672470)     3      1197 10.4  102.   wildland        ##  4 (402530 4672470)     4      1180  8.12  83.3  wildland        ##  5 (402630 4672470)     5      1164 13.9   96.8  wildland        ##  6 (402730 4672470)     6      1146 11.2    8.47 agriculture     ##  7 (402830 4672470)     7      1153  9.26 356.   agriculture     ##  8 (402230 4672370)     8      1237 14.5   75.1  wildland        ##  9 (402330 4672370)     9      1213 13.2   78.7  wildland        ## 10 (402430 4672370)    10      1198  8.56  75.6  agriculture     ## # ℹ 56 more rows ## # ℹ 9 more variables: forest <list>, soil <list>, state <list>, ## #   depth_to_bedrock <dbl>, bedrock_conductivity <dbl>, bedrock_porosity <dbl>, ## #   snowpack <dbl>, aquifer <dbl>, crop_factor <dbl> example_simplified <- initialize_landscape(example_watershed, SpParams = SpParamsMED,                                            local_control = defaultControl(),                                            simplify = TRUE) ## ℹ Creating 65 state objects for model 'spwb'. ## ✔ Creating 65 state objects for model 'spwb'. [5ms] ## ## • Transpiration mode [Granier: 65, Sperry: 0, Sureau: 0] ## • Soil doimains [buckets: 65, single: 0, dual: 0] example_simplified ## Simple feature collection with 66 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 401430 ymin: 4671870 xmax: 402830 ymax: 4672570 ## Projected CRS: WGS 84 / UTM zone 31N ## # A tibble: 66 × 15 ##            geometry    id elevation slope aspect land_cover_type ##  *      <POINT [m]> <int>     <dbl> <dbl>  <dbl> <chr>           ##  1 (402630 4672570)     1      1162 11.3   79.2  wildland        ##  2 (402330 4672470)     2      1214 12.4   98.7  agriculture     ##  3 (402430 4672470)     3      1197 10.4  102.   wildland        ##  4 (402530 4672470)     4      1180  8.12  83.3  wildland        ##  5 (402630 4672470)     5      1164 13.9   96.8  wildland        ##  6 (402730 4672470)     6      1146 11.2    8.47 agriculture     ##  7 (402830 4672470)     7      1153  9.26 356.   agriculture     ##  8 (402230 4672370)     8      1237 14.5   75.1  wildland        ##  9 (402330 4672370)     9      1213 13.2   78.7  wildland        ## 10 (402430 4672370)    10      1198  8.56  75.6  agriculture     ## # ℹ 56 more rows ## # ℹ 9 more variables: forest <list>, soil <list>, state <list>, ## #   depth_to_bedrock <dbl>, bedrock_conductivity <dbl>, bedrock_porosity <dbl>, ## #   snowpack <dbl>, aquifer <dbl>, crop_factor <dbl>"},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"launching-watershed-simulations","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Launching watershed simulations","title":"Watershed simulations","text":"speed calculations, call function spwb_land() single month: Although simulations performed using daily temporal steps, parameter summary_frequency allows storing results coarser temporal scales, reduce amount memory spatial results.","code":"dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-01-31\"), by=\"day\") res_ws1 <- spwb_land(r, example_simplified,                     SpParamsMED, examplemeteo, dates = dates, summary_frequency = \"month\",                     watershed_control = ws_control, progress = FALSE)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"structure-of-simulation-outputs","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Structure of simulation outputs","title":"Watershed simulations","text":"Function spwb_land() growth_land() return list following elements: sf object class sf, analogous functions *_spatial(): Columns state, aquifer snowpack contain state variables, whereas summary contains temporal water balance summaries cells. Column result empty case, see . next two elements simulation result list, namely watershed_balance watershed_soil_balance, refer watershed-level results. example, watershed_balance contains daily elements water balance watershed level, including amount water exported mm last column. Values output data frame averages across cells landscape. Data frame watershed_soil_balance similar watershed_balance focusing cells soil (.e. excluding artificial, rock water land cover). Finally, outlet_export_m3s contains volume per second reaching outlet cell:","code":"names(res_ws1) ## [1] \"watershed_control\"      \"sf\"                     \"watershed_balance\"      ## [4] \"watershed_soil_balance\" \"channel_export_m3s\"     \"outlet_export_m3s\" res_ws1$sf ## Simple feature collection with 66 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 401430 ymin: 4671870 xmax: 402830 ymax: 4672570 ## Projected CRS: WGS 84 / UTM zone 31N ## # A tibble: 66 × 8 ##            geometry state           aquifer snowpack summary  result outlet ##  *      <POINT [m]> <list>            <dbl>    <dbl> <list>   <list> <lgl>  ##  1 (402630 4672570) <spwbInpt [19]> 123.        3.56 <dbl[…]> <NULL> FALSE  ##  2 (402330 4672470) <aspwbInp [4]>    0.308     3.56 <dbl[…]> <NULL> FALSE  ##  3 (402430 4672470) <spwbInpt [19]>   2.19      3.56 <dbl[…]> <NULL> FALSE  ##  4 (402530 4672470) <spwbInpt [19]>   9.65      2.54 <dbl[…]> <NULL> FALSE  ##  5 (402630 4672470) <spwbInpt [19]> 148.        2.57 <dbl[…]> <NULL> FALSE  ##  6 (402730 4672470) <aspwbInp [4]>  868.        3.56 <dbl[…]> <NULL> TRUE   ##  7 (402830 4672470) <aspwbInp [4]>  405.        3.56 <dbl[…]> <NULL> FALSE  ##  8 (402230 4672370) <spwbInpt [19]>   0.261     2.53 <dbl[…]> <NULL> FALSE  ##  9 (402330 4672370) <spwbInpt [19]>   1.45      2.81 <dbl[…]> <NULL> FALSE  ## 10 (402430 4672370) <aspwbInp [4]>    6.03      3.56 <dbl[…]> <NULL> FALSE  ## # ℹ 56 more rows ## # ℹ 1 more variable: outlet_backlog <list> head(res_ws1$watershed_balance) ##        dates Precipitation      Rain Snow Snowmelt Interception   NetRain ## 1 2001-01-01      4.869109  4.869109    0        0    0.7754218  4.093687 ## 2 2001-01-02      2.498292  2.498292    0        0    0.6090627  1.889229 ## 3 2001-01-03      0.000000  0.000000    0        0    0.0000000  0.000000 ## 4 2001-01-04      5.796973  5.796973    0        0    0.7723790  5.024594 ## 5 2001-01-05      1.884401  1.884401    0        0    0.4808826  1.403519 ## 6 2001-01-06     13.359801 13.359801    0        0    0.8613997 12.498401 ##   Infiltration InfiltrationExcess SaturationExcess CellRunon CellRunoff ## 1     4.093687         0.00000000         0.000000   0.00000   0.000000 ## 2     1.889229         0.00000000         0.000000   0.00000   0.000000 ## 3     0.000000         0.00000000         0.000000   0.00000   0.000000 ## 4     5.024594         0.00000000         5.399648  53.29682   5.399648 ## 5     1.403519         0.00000000         8.620277  63.95029   8.620277 ## 6    12.447495         0.05090607        14.321824  68.00257  14.372730 ##   DeepDrainage CapillarityRise DeepAquiferLoss SoilEvaporation Transpiration ## 1     2.870064               0               0       0.3874890     0.2846843 ## 2     1.766980               0               0       0.4675914     0.5045425 ## 3     1.910902               0               0       0.3482580     0.4236354 ## 4     2.275586               0               0       0.2006258     0.1903985 ## 5     2.175750               0               0       0.2893012     0.5029694 ## 6     2.335915               0               0       0.1855159     0.3603860 ##   HerbTranspiration InterflowBalance BaseflowBalance AquiferExfiltration ## 1                 0     0.000000e+00    0.000000e+00                   0 ## 2                 0     1.354136e-16    2.439126e-17                   0 ## 3                 0     4.735269e-16   -5.298792e-17                   0 ## 4                 0     1.703183e-16    2.775558e-17                   0 ## 5                 0     1.350771e-15   -2.102695e-17                   0 ## 6                 0    -2.974052e-15    7.611756e-17                   0 head(res_ws1$outlet_export_m3s) ##                     6 ## 2001-01-01 0.00000000 ## 2001-01-02 0.00000000 ## 2001-01-03 0.00000000 ## 2001-01-04 0.04127060 ## 2001-01-05 0.06588651 ## 2001-01-06 0.10985367"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"accessing-and-plotting-cell-summaries","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Accessing and plotting cell summaries","title":"Watershed simulations","text":"Unlike spwb_spatial() summaries arbitrarily generated posteriori simulation results, spwb_land() summaries always fixed embedded simulation result. example, can inspect summaries given landscape cell using: Several plots can drawn result function spwb_land() similar way done spwb_spatial(). example display map average soil relative water content simulated month:","code":"res_ws1$sf$summary[[1]] ##            MinTemperature MaxTemperature      PET     Rain     Snow Snowmelt ## 2001-01-01      -3.203556       2.427977 31.14151 58.09884 16.65065 13.09301 ##            Interception  NetRain Infiltration InfiltrationExcess ## 2001-01-01     23.59187 34.50697     47.59998                  0 ##            SaturationExcess    Runon Runoff DeepDrainage CapillarityRise ## 2001-01-01                0 287.0711      0     55.34128               0 ##            DeepAquiferLoss SoilEvaporation Transpiration HerbTranspiration ## 2001-01-01               0        2.779548      9.958471                 0 ##            InterflowInput InterflowOutput InterflowBalance BaseflowInput ## 2001-01-01       1027.315        1076.924        -49.60945      241.8465 ##            BaseflowOutput BaseflowBalance AquiferExfiltration      SWE  SoilVol ## 2001-01-01       173.8524        67.99411                   0 1.699603 525.6724 ##                 RWC WTD      DTA ## 2001-01-01 97.68028  NA 14.33906 plot_summary(res_ws1$sf, variable = \"RWC\", date = \"2001-01-01\", r = r)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"full-simulation-results-for-specific-cells","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Full simulation results for specific cells","title":"Watershed simulations","text":"idea generating summaries arises fact local models can produce large amount results, interest landscape level. Nevertheless, possible specify cells full daily results desired. done adding column result_cell input sf object: launch simulations (omitting progress information): can now retrieve results desired cell, e.g. third one, column result sf: object class spwb structure returned function spwb() medfate. Hence, can inspect daily results using functions shinyplot() plot(), example:","code":"# Set request for daily model results in cells number 3 and 9 example_simplified$result_cell <- FALSE example_simplified$result_cell[c(3,9)] <- TRUE res_ws1 <- spwb_land(r, example_simplified,                     SpParamsMED, examplemeteo, dates = dates, summary_frequency = \"month\",                     watershed_control = ws_control, progress = FALSE) S <- res_ws1$sf$result[[3]] class(S) ## [1] \"spwb\" \"list\" plot(S, \"SoilRWC\")"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"continuing-a-previous-simulation","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Continuing a previous simulation","title":"Watershed simulations","text":"result simulation includes element state, stores state soil stand variables end simulation. information can used perform new simulation point first one ended. order , need update state variables spatial object values end simulation, using function update_landscape(): Note new column state appears now sf object. can check effect drawing relative water content:  Now can continue simulation, case adding extra month: fact cell required initialization indication used already initialized landscape.","code":"example_watershed_mod <- update_landscape(example_watershed, res_ws1) names(example_watershed_mod) ##  [1] \"geometry\"             \"id\"                   \"elevation\"            ##  [4] \"slope\"                \"aspect\"               \"land_cover_type\"      ##  [7] \"forest\"               \"soil\"                 \"state\"                ## [10] \"depth_to_bedrock\"     \"bedrock_conductivity\" \"bedrock_porosity\"     ## [13] \"snowpack\"             \"aquifer\"              \"crop_factor\"          ## [16] \"outlet_backlog\" plot_variable(example_watershed_mod, variable = \"soil_rwc_curr\", r = r) dates <- seq(as.Date(\"2001-02-01\"), as.Date(\"2001-02-28\"), by=\"day\") res_ws3 <- spwb_land(r, example_watershed_mod,                     SpParamsMED, examplemeteo, dates = dates, summary_frequency = \"month\",                     watershed_control = ws_control, progress = FALSE)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"burn-in-periods","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Burn-in periods","title":"Watershed simulations","text":"Like distributed hydrological models, watershed simulations medfateland normally require burn-period allow soil moisture aquifer levels reach dynamic equilibrium. recommend users use least one two years burn-period, depend size watershed. medfate provide users copy example watershed, burn-period already simulated. can seen inspecting aquifer level:  run one-month simulation data set can compare output burn-period illustrate importance:","code":"data(\"example_watershed_burnin\") plot_variable(example_watershed_burnin, variable = \"aquifer\", r = r) dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-01-31\"), by=\"day\") res_ws3 <- spwb_land(r, example_watershed_burnin,                     SpParamsMED, examplemeteo, dates = dates, summary_frequency = \"month\",                     watershed_control = ws_control, progress = FALSE) data.frame(\"before\" = res_ws1$watershed_balance$WatershedExport,             \"after\" = res_ws3$watershed_balance$WatershedExport) ## data frame with 0 columns and 0 rows"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"simulations-of-watershed-forest-dynamics","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Simulations of watershed forest dynamics","title":"Watershed simulations","text":"Running growth_land() similar running spwb_land(). However, things change want simulate forest dynamics using fordyn_land(). Regarding sf input, additional column management_arguments may defined specify forest management arguments (.e. silviculture) cells. Furthermore, function allow choosing temporal scale summaries. Strong simplification forest structure dominant species normally make sense kind simulation, since focus forest dynamics. call fordyn_land() single year given , example, starting initial example watershed:","code":"res_ws4 <- fordyn_land(r, example_watershed,                        SpParamsMED, examplemeteo,                        watershed_control = ws_control, progress = FALSE)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"simulations-using-weather-interpolation","dir":"Articles > Runmodels","previous_headings":"Carrying out simulations","what":"Simulations using weather interpolation","title":"Watershed simulations","text":"Large watersheds spatial differences climatic conditions like temperature, precipitation. Specifying single weather data frame watershed may suitable case. Specifying different weather data frame watershed cell can also problem, spatial resolution high, due huge data requirements. solution can using interpolation fly, inside watershed simulations. can done supplying interpolator object (list ), defined package meteoland. use example data provided package: object, using straightforward: Note define dates, taken interpolator data. plot minimum temperature, appreciate spatial variation climate:  large watersheds fine spatial resolution interpolation can become slow. One can specify interpolation performed coarser grid, using watershed control parameter, example: illustrate effect, repeat previous simulation plot minimum temperature:","code":"interpolator <- meteoland::with_meteo(meteoland_meteo_example, verbose = FALSE) |>     meteoland::create_meteo_interpolator(params = defaultInterpolationParams()) ## ℹ Creating interpolator... ##   • Calculating smoothed variables... ##   • Updating intial_Rp parameter with the actual stations mean distance... ## ✔ Interpolator created. res_ws5 <- spwb_land(r, example_watershed_burnin, SpParamsMED,                       meteo = interpolator, summary_frequency = \"month\",                      watershed_control = ws_control, progress = FALSE) plot_summary(res_ws5$sf, variable = \"MinTemperature\", date = \"2022-04-01\", r = r) ws_control$weather_aggregation_factor <- 3 res_ws6 <- spwb_land(r, example_watershed_burnin, SpParamsMED,                       meteo = interpolator, summary_frequency = \"month\",                      watershed_control = ws_control, progress = FALSE) plot_summary(res_ws6$sf, variable = \"MinTemperature\", date = \"2022-04-01\", r = r)"},{"path":"https://emf-creaf.github.io/medfateland/articles/runmodels/WatershedSimulations.html","id":"parallel-simulations-using-subwatersheds","dir":"Articles > Runmodels","previous_headings":"","what":"Parallel simulations using subwatersheds","title":"Watershed simulations","text":"Simulations can rather slow even moderately-sized watersheds. reason, medfateland now incorporates possibility perform parallel simulations subwatersheds, aggregate results. illustrate feature use data set Bianya watershed (see Preparing inputs II: arbitrary locations; can find dataset medfateland GitHub repository). begin loading raster sf inputs Bianya: draw elevation map, visually identify two subwatersheds:  Package medfateland includes function overland_routing() statically illustrate overland runoff processes dealt (.e. distribution runoff among neighbors, channel routing, etc.). function can specifically ask sub-watersheds, follows: short, sub-watershed definition consists : () finding drainage basin outlet channel cell; (b) aggregating drainage basins overlap less specified parameter; (c) deciding sub-watershed border cell belongs . function identified three sub-watersheds, one isolated channel cell:  Let’s now illustrate perform watershed simulations parallelization subwatersheds. begin initializing input (used \"buckets\" soil hydrology speed calculations, \"single\" appropriate). Subwatershed definition controlled via watershed control options follows (simulation functions internally call overland_routing()): Now, ready launch watershed simulation parallelization. consists performing simulations subwatershed independently, aggregating results , finally, performing channel routing. simplicity, simulate five days. ask console output see model :","code":"r <- terra::rast(\"../intro/bianya_raster.tif\") sf <- readRDS(\"../intro/bianya.rds\") plot_variable(sf, variable = \"elevation\", r = r) or <- overland_routing(r, sf) head(or) ## Simple feature collection with 6 features and 11 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 449799.3 ymin: 4678387 xmax: 450794.5 ymax: 4678387 ## Projected CRS: ETRS89 / UTM zone 31N ## # A tibble: 6 × 12 ##             geometry elevation waterRank waterOrder queenNeigh waterQ    ##          <POINT [m]>     <dbl>     <int>      <int> <list>     <list>    ## 1 (449799.3 4678387)      900.       401       2533 <int [4]>  <dbl [4]> ## 2 (449998.3 4678387)      901.       399       2455 <int [5]>  <dbl [5]> ## 3 (450197.4 4678387)      880.       446       2416 <int [5]>  <dbl [5]> ## 4 (450396.4 4678387)      843.       554       2487 <int [5]>  <dbl [5]> ## 5 (450595.5 4678387)      878.       454       2534 <int [5]>  <dbl [5]> ## 6 (450794.5 4678387)      860.       508       2511 <int [4]>  <dbl [4]> ## # ℹ 6 more variables: channel <lgl>, outlet <lgl>, target_outlet <int>, ## #   distance_to_outlet <dbl>, outlet_backlog <list>, subwatersheds <lgl> or <- overland_routing(r, sf, subwatersheds = TRUE,                        max_overlap = 0.3) plot(or[, \"subwatershed\"]) sf_init <- initialize_landscape(sf, SpParams = SpParamsMED,                                 local_control = defaultControl(soilDomains = \"buckets\"),                                 progress = FALSE) ws_control <- default_watershed_control(\"tetis\") ws_control$tetis_parameters$subwatersheds <- TRUE ws_control$tetis_parameters$max_overlap <- 0.3 dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-01-05\"), by=\"day\") res_ws5 <- spwb_land(r, sf_init,                     SpParamsMED, examplemeteo, dates = dates,                     watershed_control = ws_control, progress = TRUE,                     parallelize = TRUE) ## ## ── Simulation of model 'spwb' over a watershed ───────────────────────────────── ## ## ── INPUT CHECKING ── ## ## ℹ Checking raster topology ## ✔ Checking raster topology [15ms] ## ## ℹ Checking 'sf' data columns ## ℹ Column 'snowpack' was missing in 'sf'. Initializing empty snowpack. ## ℹ Checking 'sf' data columnsℹ Minimum bedrock porosity set to 0.1%. ## ℹ Checking 'sf' data columnsℹ Column 'aquifer' was missing in 'sf'. Initializing empty aquifer. ## ℹ Checking 'sf' data columns✔ Checking 'sf' data columns [3.5s] ##  ## ℹ Determining neighbors and overland routing for TETIS ## ✔ Determining neighbors and overland routing for TETIS [3s] ##  ## • Hydrological model: TETIS ## • Number of grid cells: 3825 Number of target cells: 2573 ## • Average cell area: 39575 m2, Total area: 15138 ha, Target area: 10183 ha ## • Cell land use [wildland: 2161 agriculture: 331 artificial: 78 rock: 0 water: ## 3] ## • Cells with soil: 2492 ## • Number of days to simulate: 5 ## • Number of temporal cell summaries: 1 ## • Number of cells with daily model results requested: 0 ## • Number of channel cells: 158 ## • Number of outlet cells: 28 ## • Number of subwatersheds: 3 ##  ## ── INITIALISATION ── ##  ## ℹ All state objects are already available for 'spwb'. ## • Transpiration mode [Granier: 2492, Sperry: 0, Sureau: 0] ## • Soil doimains [buckets: 2492, single: 0, dual: 0] ##  ## ── PARALLEL SIMULATION of 3 SUB-WATERSHEDS in 3 NODES ── ##  ## ── MERGING SUB-WATERSHED RESULTS ── ##  ## ── CHANNEL ROUTING ──"},{"path":"https://emf-creaf.github.io/medfateland/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Miquel De Cáceres. Author, maintainer. Aitor Améztegui. Author. María González. Author. Núria Aquilué. Author. Daniel Caviedes-Voullième. Author. Mario Morales-Hernández. Author. Mario Beltrán. Contributor. Rodrigo Balaguer-Romano. Contributor. Roberto Molowny-Horas. Contributor.","code":""},{"path":"https://emf-creaf.github.io/medfateland/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"De Cáceres M, Améztegui , González M, Aquilué N, Caviedes-Voullième D, Morales-Hernández M (2025). medfateland: Mediterranean Landscape Simulation. R package version 2.6.0, https://github.com/emf-creaf/medfateland, https://emf-creaf.github.io/medfateland/.","code":"@Manual{,   title = {medfateland: Mediterranean Landscape Simulation},   author = {Miquel {De Cáceres} and Aitor Améztegui and María González and Núria Aquilué and Daniel Caviedes-Voullième and Mario Morales-Hernández},   year = {2025},   note = {R package version 2.6.0, https://github.com/emf-creaf/medfateland},   url = {https://emf-creaf.github.io/medfateland/}, }"},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Mediterranean Landscape Simulation","text":"R package medfateland designed extend capabilities package medfate spatially-explicit context. allows running stand-level models available medfate points cells within landscape region, including possibility parallelization. Additionally, medfateland allows considering seed dispersal lateral water transfer processes forested watersheds. Hence, medfateland can used tool eco-hydrological applications.","code":""},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Mediterranean Landscape Simulation","text":"Since packages evolve together, installing medfateland normally requires --date version medfate. Package medfateland can found CRAN, updated every months. Installation CRAN can done via: Users can also download install latest stable versions GitHub follows (required package remotes installed/updated first):","code":"install.packages(\"medfateland\") remotes::install_github(\"emf-creaf/medfateland\")"},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Mediterranean Landscape Simulation","text":"number vignettes illustrate initialize inputs run simulation models medfateland. can found package website. user also advised read articles included medfate. complete documentation packages, including reference book, can found https://emf-creaf.github.io/medfatebook/index.html.","code":""},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"companion-r-packages","dir":"","previous_headings":"","what":"Companion R packages","title":"Mediterranean Landscape Simulation","text":"modelling tools included medfate medfateland closely developed another package: Package traits4models provides functions help creating species parameter inputs process-based models medfate medfateland functions. Two R packages complete simulation framework, can used many purposes beyond forest modelling: Package meteoland allows generating daily weather input simulation models medfate medfateland. Package meteoland dependency medfate medfateland, can used independently obtain daily weather data. Package forestables allows reading harmonizing forest inventory data common data structure. Initialization workflows medfateland can use data forestables, data structures package can used many studies beyond modelling. relationships five packages illustrated figure , black arrows indicate package dependencies gray arrows indicate model parameter data provision.","code":""},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"authorship","dir":"","previous_headings":"","what":"Authorship","title":"Mediterranean Landscape Simulation","text":"Package medfateland developed maintained Ecosystem Modelling Facility unit CREAF (Spain), close collaboration researchers URFM-INRAE (France) CTFC (Spain).","code":""},{"path":"https://emf-creaf.github.io/medfateland/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Mediterranean Landscape Simulation","text":"Research project: Boosting process-based models project forest dynamics associated ecosystem services stand--regional scales (BOMFORES). Financial Entity: Ministerio de Ciencia e Innovación (PID2021-126679OB-I00). Duration : 01/09/2022 : 31/08/2024. PI: Miquel De Cáceres. Research project: Improving modelling key forest dynamic processes forecast long-term changes Mediterranean forests climate change (IMPROMED). Financial Entity: Ministerio de Ciencia e Innovación (PID2023-152644NB-I00). Duration : 01/09/2024 : 31/08/2025. PI: Miquel De Cáceres/Josep Mª Espelta.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":null,"dir":"Reference","previous_headings":"","what":"Add forests — add_forests","title":"Add forests — add_forests","text":"Creates adds forest data sf object reading tree shrub data tables","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add forests — add_forests","text":"","code":"add_forests(   x,   tree_table = NULL,   tree_mapping = NULL,   shrub_table = NULL,   shrub_mapping = NULL,   merge_trees = TRUE,   merge_shrubs = TRUE,   SpParams = NULL,   progress = FALSE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add forests — add_forests","text":"x object class sf valid CRS definition, column called 'id'. tree_table data frame tree records rows attributes columns. Tree records can correspond individual trees groups trees associated density. tree_mapping named character vector specify mappings columns tree_table attributes treeData. Accepted names (corresponding specifications columns tree_table) : \"id\": Forest stand id. \"Species\": Species code (follow codes SpParams). \"Species.name\": Species name. case, species code drawn matching names species names SpParams. \"N\": Tree density (ind./ha). \"DBH\": Diameter breast height (cm). \"Height\": Tree height (cm). \"plot.size\": Plot size (m2) record refers . used calculate tree density (stems per hectare) supplied. \"Z50\": Depth (mm) corresponding 50 percent fine roots. \"Z95\": Depth (mm) corresponding 95 percent fine roots. shrub_table data frame shrub records rows attributes columns. Records can correspond individual shrubs (crown dimensions height) groups shrubs associated cover estimate. shrub_mapping named character vector specify mappings columns shrub_table attributes shrubData. Accepted names (corresponding specifications columns shrub_table) : \"id\": Forest stand id. \"Species\": Species code (follow codes SpParams). \"Species.name\": Species name. case, species code drawn matching names species names SpParams. \"Cover\": Shrub cover (percent). \"D1\": Shrub largest crown diameter (cm). \"D2\": Shrub crown diameter orthogonal largest one (cm). \"Height\": Shrub height (cm). \"plot.size\": Plot size (m2) record refers . used calculate shrub cover shrub data given individual level. \"Z50\": Depth (mm) corresponding 50 percent fine roots. \"Z95\": Depth (mm) corresponding 95 percent fine roots. merge_trees logical flag simplify tree cohorts merging tree records DBH classes (see forest_mergeTrees). merge_shrubs logical flag simplify shrub cohorts merging shrub records height classes (see forest_mergeShrubs). SpParams data frame species parameters (see SpParamsMED) valid species names drawn. progress logical flag include progress bar processing data.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add forests — add_forests","text":"modified object class sf column 'forest'.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add forests — add_forests","text":"current implementation replace existing forests indicated 'id' values.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add forests — add_forests","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_forests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add forests — add_forests","text":"","code":"# Load tree data data(poblet_trees)  # Load species parameters data(SpParamsMED)  # Define sf with three stands cc <- rbind(c(1.0215, 41.3432),             c(1.0219, 41.3443),              c(1.0219, 41.3443)) d <- data.frame(lon = cc[,1], lat = cc[,2],                  id = c(\"POBL_CTL\", \"POBL_THI_BEF\", \"POBL_THI_AFT\")) x <- sf::st_as_sf(d, coords = c(\"lon\", \"lat\"), crs = 4326) x #> Simple feature collection with 3 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.0215 ymin: 41.3432 xmax: 1.0219 ymax: 41.3443 #> Geodetic CRS:  WGS 84 #>             id               geometry #> 1     POBL_CTL POINT (1.0215 41.3432) #> 2 POBL_THI_BEF POINT (1.0219 41.3443) #> 3 POBL_THI_AFT POINT (1.0219 41.3443)  # Define tree mapping  mapping <- c(\"id\" = \"Plot.Code\", \"Species.name\" = \"Species\", \"DBH\" = \"Diameter.cm\")  # Read tree data (warnings are raised) y_1 <- add_forests(x, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED) #> Warning: Taxon names that were not matched: Quercus humilis. #> Warning: Taxon names that were not matched: Quercus humilis.  # Correct scientific name for downy oak and repeat to avoid losing tree records poblet_trees$Species[poblet_trees$Species==\"Quercus humilis\"] <- \"Quercus pubescens\" y_1 <- add_forests(x, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED)  # Display summary of first forest summary(y_1$forest[[1]], SpParamsMED) #> Tree BA (m2/ha): 3.0179815  adult trees: 3.0179815  saplings: 0  #> Density (ind/ha) adult trees: 267  saplings: 0  shrubs (estimated): 0  #> Cover (%) adult trees: 42.3272186  saplings: 0  shrubs: 0  herbs: 0  #> LAI (m2/m2) total: 0.5419688  adult trees: 0.5419688  saplings: 0  shrubs: 0  herbs: 0  #> Fuel loading (kg/m2) total: 0.1414227  adult trees: 0.1414227  saplings: 0  shrubs: 0  herbs: 0  #> PAR ground (%): NA  SWR ground (%): NA   # Add sampled plot surface and repeat reading to correct tree density poblet_trees$PlotSurface <- 706.86 mapping <- c(mapping, \"plot.size\" = \"PlotSurface\")  y_2 <- add_forests(x, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED) summary(y_2$forest[[1]], SpParamsMED) #> Tree BA (m2/ha): 42.6956049  adult trees: 42.6956049  saplings: 0  #> Density (ind/ha) adult trees: 3777.2684832  saplings: 0  shrubs (estimated): 0  #> Cover (%) adult trees: 100  saplings: 0  shrubs: 0  herbs: 0  #> LAI (m2/m2) total: 4.9189289  adult trees: 4.9189289  saplings: 0  shrubs: 0  herbs: 0  #> Fuel loading (kg/m2) total: 1.2992685  adult trees: 1.2992685  saplings: 0  shrubs: 0  herbs: 0  #> PAR ground (%): NA  SWR ground (%): NA   # Check forests (height is missing!) check_forests(y_2) #> ✔ No wildland locations with NULL values in column 'forest'. #> ✔ All objects in column 'forest' have the right class. #> ! Missing tree height values detected for 28 (100%) in 3 wildland locations (100%).  # Estimate tree height using general allometric poblet_trees$Height.cm <- 100 * 1.806*poblet_trees$Diameter.cm^0.518  #Modify mapping to include height and repeat mapping <- c(mapping, \"Height\" = \"Height.cm\")  y_3 <- add_forests(x, tree_table = poblet_trees, tree_mapping = mapping, SpParams = SpParamsMED) summary(y_3$forest[[1]], SpParamsMED) #> Tree BA (m2/ha): 42.6956049  adult trees: 42.6956049  saplings: 0  #> Density (ind/ha) adult trees: 3777.2684832  saplings: 0  shrubs (estimated): 0  #> Cover (%) adult trees: 100  saplings: 0  shrubs: 0  herbs: 0  #> LAI (m2/m2) total: 4.9189289  adult trees: 4.9189289  saplings: 0  shrubs: 0  herbs: 0  #> Fuel loading (kg/m2) total: 1.2992685  adult trees: 1.2992685  saplings: 0  shrubs: 0  herbs: 0  #> PAR ground (%): 6.6842854  SWR ground (%): 13.4793937   # Final check check_forests(y_3) #> ✔ No wildland locations with NULL values in column 'forest'. #> ✔ All objects in column 'forest' have the right class. #> ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects."},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":null,"dir":"Reference","previous_headings":"","what":"Add topography and land cover — add_topography","title":"Add topography and land cover — add_topography","text":"Initializes topography land cover type set target locations","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add topography and land cover — add_topography","text":"","code":"add_topography(x, dem, progress = TRUE)  add_land_cover(   x,   land_cover_map,   wildland = NULL,   agriculture = NULL,   rock = NULL,   artificial = NULL,   water = NULL,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add topography and land cover — add_topography","text":"x object class sf dem digital elevation model (class SpatRaster) meters units progress logical flag print console output land_cover_map object class SpatRaster land cover type. missing, locations considered 'wildland'. wildland, agriculture, rock, artificial, water Strings indicating mapping legend land_cover_map.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add topography and land cover — add_topography","text":"Function add_topography() returns modified object class sf columns: id: Numeric location identifiers (existing). elevation: Elevation sea level (m). slope: Slope (degrees). aspect: Aspect (degrees). land_cover_type: Land cover type. Function add_land_cover() returns modified object class sf new column: id: Numeric location identifiers (existing). land_cover_type: Land cover type.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add topography and land cover — add_topography","text":"user manually define mapping land cover classes land_cover_map land cover types used medfateland.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/add_topography.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add topography and land cover — add_topography","text":"","code":"# See package vignettes 'Preparing inputs'"},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check spatial inputs — check_inputs","title":"Check spatial inputs — check_inputs","text":"Functions check correct spatial inputs simulations","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check spatial inputs — check_inputs","text":"","code":"check_topography(   x,   missing_action = \"no_action\",   default_values = c(elevation = 0, slope = NA, aspect = NA),   verbose = TRUE )  check_land_cover(   x,   missing_action = \"no_action\",   default_values = \"wildland\",   verbose = TRUE )  check_forests(   x,   SpParams = NULL,   missing_action = \"no_action\",   progress = FALSE,   verbose = TRUE )  check_soils(   x,   check_equal_layers = FALSE,   missing_action = \"no_action\",   default_values = c(clay = 25, sand = 25, bd = 1.5, rfc = 25),   progress = FALSE,   verbose = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check spatial inputs — check_inputs","text":"x object class sf checked. missing_action Action perform missing values, either \"no_action\" (checks), \"filter\" (filter missing data), \"default\" (impute default values) default_values Vector default values locations missing data. verbose Logical flag indicate extra console output. SpParams data frame species parameters (see SpParamsMED). progress logical flag print information progress. check_equal_layers Logical flag test whether soils number layers.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check spatial inputs — check_inputs","text":"functions return modified sf object missing_action either \"filter\" \"default\". Otherwise, return invisible tibble logical columns indicating missing information .","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check spatial inputs — check_inputs","text":"Function check_topography() checks columns \"elevation\", \"slope\" \"aspect\" contain missing values. Function check_land_cover() checks column \"land_cover_type\" contain missing values. Function check_forests() checks first forest objects defined \"wildland\" locations. , looks missing data tree shrub attributes required simulations. SpParams provided, function also checks whether species names within taxa represented SpParams. Function check_soils() checks first \"wildland\" \"agriculture\" locations defined soil object. looks missing data required soil physical parameters.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/check_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check spatial inputs — check_inputs","text":"","code":"data(example_ifn)  check_topography(example_ifn) #> ✔ No missing values in topography. check_land_cover(example_ifn) #> ✔ No missing values in land cover. check_forests(example_ifn) #> ✔ No wildland locations with NULL values in column 'forest'. #> ✔ All objects in column 'forest' have the right class. #> ✔ No missing/wrong values detected in key tree/shrub attributes of 'forest' objects. check_soils(example_ifn) #> ✔ No wildland/agriculture locations with NULL values in column 'soil'. #> ✔ No missing values detected in key soil attributes."},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":null,"dir":"Reference","previous_headings":"","what":"Create fire regime — create_fire_regime","title":"Create fire regime — create_fire_regime","text":"Defines object containing fire regime parameters simulations forest dynamics.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create fire regime — create_fire_regime","text":"","code":"create_fire_regime(annual_burned_area, sd_burned_area = NULL, doy = NULL)"},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create fire regime — create_fire_regime","text":"annual_burned_area named vector burned area hectares simulation years. sd_burned_area named vector standard deviation (log scale) burned area. specified, annual target burn determined using log-normal distribution mean values given annual_burned_area. doy named integer vector day year (.e. 1 366) fires simulated simulation year annual_burned_area. NULL fires simulated driest day (.e. vapor pressure deficit largest).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create fire regime — create_fire_regime","text":"list supplied parameters","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create fire regime — create_fire_regime","text":"Names annual_burned_area simulation years. provided, sd_burned_area vector size annual_burned_area names.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create fire regime — create_fire_regime","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_fire_regime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create fire regime — create_fire_regime","text":"","code":"# Fire regime with pre-defined burned area values reg1 <- create_fire_regime(annual_burned_area = c(\"2002\" = 1000, \"2003\" = 5000))   # Fire regime with log-normal distribution for burned area reg2 <- create_fire_regime(annual_burned_area = c(\"2002\" = 1000, \"2003\" = 5000),                            sd_burned_area = c(\"2002\" = 0.9, \"2003\" = 0.8))"},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Create management scenario — create_management_scenario","title":"Create management scenario — create_management_scenario","text":"Defines management scenario simulations forest dynamics","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create management scenario — create_management_scenario","text":"","code":"create_management_scenario(   units,   annual_demand_by_species = NULL,   extraction_rate_by_year = NULL,   default_management_arguments = NULL )"},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create management scenario — create_management_scenario","text":"units Number management units. Alternatively, data frame management options (columns) set units (rows). Options specified witl taken defaults. annual_demand_by_species vector matrix annual wood demand (m3) medfate species names (groups species names). empty, scenario 'bottom-' (based demand). vector supplied, wood demand applied simulated years. matrix supplied, row correspond different year. extraction_rate_by_year vector extraction rates (%) per year simulation, starting second year. specified, annual demand species applied first year simulation, rescaled remaining years according growth observed desired extraction rates. default_management_arguments list arguments passed managementFunction. arguments taken defaults copied management units can later modified. NULL, result calling function defaultManagementArguments taken.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create management scenario — create_management_scenario","text":"list following structure: scenario_type: Either 'bottom-' (demand specified), 'input_demand' (annual species demand specified), 'input_rate' extraction rates also supplied. annual_demand_by_species: vector annual wood demand (m3) species (species groups) (scenario_type 'bottom-' 'input_demand'). extraction_rate_by_year: vector extraction rate values per year. units: data frame many rows units management arguments columns.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create management scenario — create_management_scenario","text":"Three kinds management scenarios allowed: 'bottom-' represents scenario forest stands belong different management units, possibly distinct management prescriptions. However, demand amount extracted wood emerges interplay forest dynamics management prescriptions. 'input_demand' represents scenario certain amount wood extraction targeted species year. requires deciding stands actually undergo thinning operations fulfill demand (stands managed following prescriptions indicate final regeneration cuts managed irrespective demand). 'input_rate' represents scenario similar previous one total amount wood targeted depends (.e. proportion ) growth observed previous year. kind management scenario depends arguments supplied user calling create_management_scenario (see examples). cases, management units need defined. management unit represents group forest stands following management prescriptions. Although create_management_scenario function allows specifying management arguments unit, simulation management scenarios also requires specifying, forest stand, management unit belongs (see fordyn_scenario).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create management scenario — create_management_scenario","text":"Miquel De Cáceres Ainsa, CREAF Aitor Améztegui, UdL","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/create_management_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create management scenario — create_management_scenario","text":"","code":"# A scenario with three management units and annual demand for two species scen_1 <- create_management_scenario(3,  c(\"Quercus ilex\" = 1000, \"Pinus nigra\" = 2000))  # A scenario like the former, but with total annual demand changing as a function of # prescribed extraction rates (second and third years) scen_2 <- create_management_scenario(3,              c(\"Quercus ilex\" = 1000, \"Pinus nigra\" = 2000),            c(\"2002\" = 30, \"2003\" = 50))          # A scenario with as many management units as rows in 'defaultPrescriptionsBySpecies' # and not based on demand data(\"defaultPrescriptionsBySpecies\") scen_3 <- create_management_scenario(defaultPrescriptionsBySpecies)  # A scenario with three management units and annual demand for one species group  # and a third species scen_4 <- create_management_scenario(3,  c(\"Quercus ilex/Quercus pubescens\" = 1000,                                             \"Pinus nigra\" = 2000))"},{"path":"https://emf-creaf.github.io/medfateland/reference/defaultPrescriptionsBySpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Default prescriptions by species — defaultPrescriptionsBySpecies","title":"Default prescriptions by species — defaultPrescriptionsBySpecies","text":"Default management prescriptions species, defined according current practices Catalonia (NE Spain)","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/defaultPrescriptionsBySpecies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Default prescriptions by species — defaultPrescriptionsBySpecies","text":"Mario Beltrán & Míriam Piqué. Forest Science Technology Centre Catalonia (CTFC)","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/defaultPrescriptionsBySpecies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default prescriptions by species — defaultPrescriptionsBySpecies","text":"data frame 27 species (species groups) rows management parameters columns (defined defaultManagementArguments)","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/default_dispersal_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Default control parameters for dispersal — default_dispersal_control","title":"Default control parameters for dispersal — default_dispersal_control","text":"Defines default control parameters dispersal process","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_dispersal_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default control parameters for dispersal — default_dispersal_control","text":"","code":"default_dispersal_control()"},{"path":"https://emf-creaf.github.io/medfateland/reference/default_dispersal_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default control parameters for dispersal — default_dispersal_control","text":"list following items: distance_step  [= 25]: Distance step meters. maximum_dispersal_distance [= 3000]: Maximum dispersal distance meters. min_percent [= 1]: minimum percent seed bank retain entry seedBank element forest. stochastic_resampling [= FALSE]: flag indicate stochastic resampling stands performed.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/default_dispersal_control.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default control parameters for dispersal — default_dispersal_control","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_dispersal_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default control parameters for dispersal — default_dispersal_control","text":"","code":"default_dispersal_control() #> $distance_step #> [1] 25 #>  #> $maximum_dispersal_distance #> [1] 3000 #>  #> $min_percent #> [1] 1 #>  #> $stochastic_resampling #> [1] FALSE #>"},{"path":"https://emf-creaf.github.io/medfateland/reference/default_volume_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Default volume function — default_volume_function","title":"Default volume function — default_volume_function","text":"Example function estimating wood volume (m3/ha) tree table forest object.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_volume_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default volume function — default_volume_function","text":"","code":"default_volume_function(x, SpParams = NULL)"},{"path":"https://emf-creaf.github.io/medfateland/reference/default_volume_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default volume function — default_volume_function","text":"x data frame columns 'DBH', 'Height' 'N' forest object SpParams data frame species parameters (used default function called)","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_volume_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default volume function — default_volume_function","text":"function amenable wood volume estimation.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_volume_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default volume function — default_volume_function","text":"Users define functions taking account : Input named 'x' consist tree table tree records rows columns 'DBH' (cm), 'Height' (cm), 'N' (ind./ha). Output numeric vector length equal number tree records 'x'","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Default control parameters for watershed processes — default_watershed_control","title":"Default control parameters for watershed processes — default_watershed_control","text":"Defines default control parameters watershed processes","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default control parameters for watershed processes — default_watershed_control","text":"","code":"default_watershed_control(watershed_model = \"tetis\")"},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default control parameters for watershed processes — default_watershed_control","text":"watershed_model Hydrological model watershed processes. \"tetis\" \"serghei\" accepted.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default control parameters for watershed processes — default_watershed_control","text":"list following items: watershed_model: string watershed model. weather_aggregation_factor [= 1]: integer specifying spatial aggregation interpolated weather. tetis_parameters: list TETIS parameters following elements: R_localflow [= 1.0]: Correction factor soil hydraulic saturated conductivity (local vertical flows). R_interflow [= 50.0]: Correction factor soil hydraulic saturated conductivity (subsurface flow grid cells). R_baseflow [= 5.0]: Correction factor bedrock hydraulic conductivity (groundwaterflow grid cells). n_interflow [= 1.0]: Exponent determination interflow. n_baseflow [= 1.0]: Exponent determination baseflow. num_daily_substeps [= 4]: Number daily sub-steps interflow calculations. channel_flow_speed [= 1]: Average flow speed channel (m/s). subwatersheds [= FALSE]: boolean flag define watershed subunits. max_overlap [= 0.2]: Maximum proportion overlapping cells watershed subunits considered independent. Lower values normally produce larger subunits. rock_max_infiltration [= 10]: Maximum infiltration rate (mm·day-1) rock cells. deep_aquifer_loss [= 0]: Daily loss rate watershed aquifer towards deeper aquifer connected outlets (mm·day-1). serghei_parameters: list SERGHEI parameters following elements: input_dir [= \"\"]: Path SERGHEI input files. output_dir [= \"\"]: Path SERGHEI output files. force_equal_layer_widths [= FALSE]: boolean flag force equal layer widths (taken first soil element) soils.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default control parameters for watershed processes — default_watershed_control","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/default_watershed_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default control parameters for watershed processes — default_watershed_control","text":"","code":"default_watershed_control() #> $watershed_model #> [1] \"tetis\" #>  #> $weather_aggregation_factor #> [1] 1 #>  #> $tetis_parameters #> $tetis_parameters$R_localflow #> [1] 1 #>  #> $tetis_parameters$R_interflow #> [1] 50 #>  #> $tetis_parameters$R_baseflow #> [1] 5 #>  #> $tetis_parameters$n_interflow #> [1] 1 #>  #> $tetis_parameters$n_baseflow #> [1] 1 #>  #> $tetis_parameters$num_daily_substeps #> [1] 4 #>  #> $tetis_parameters$channel_flow_speed #> [1] 1 #>  #> $tetis_parameters$subwatersheds #> [1] FALSE #>  #> $tetis_parameters$max_overlap #> [1] 0.2 #>  #> $tetis_parameters$rock_max_infiltration #> [1] 10 #>  #> $tetis_parameters$deep_aquifer_loss #> [1] 0 #>  #>  #> $serghei_parameters #> $serghei_parameters$input_dir #> [1] \"\" #>  #> $serghei_parameters$output_dir #> [1] \"\" #>  #> $serghei_parameters$force_equal_layer_widths #> [1] FALSE #>  #>"},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed production, dispersal and seed bank dynamics — dispersal","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"Simulates seed bank mortality, seed production dispersal among stands","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"","code":"dispersal(   sf,   SpParams,   local_control = medfate::defaultControl(),   distance_step = 25,   maximum_dispersal_distance = 3000,   min_percent = 1,   stochastic_resampling = FALSE,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"sf object class sf using UTM projection (measure distances m) following columns: geometry: Spatial geometry. forest: Objects class forest. SpParams data frame species parameters (see SpParamsMED). local_control list control parameters (see defaultControl) distance_step Distance step meters. maximum_dispersal_distance Maximum dispersal distance meters. min_percent minimum percent seed bank retain entry seedBank element forest. stochastic_resampling flag indicate stochastic resampling stands performed. progress Boolean flag display progress information.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"list forest objects (wildland cover type) containing modified seed bank","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"input 'sf' object Universal Transverse Mercator (UTM) coordinate system (projection using meters length unit) appropriate function behavior. Dispersal kernel follows Clark et al. (1999) potential seed donors (neighbors) defined given grid distance order. maximum value 100% seed bank refill attained species seed production seed donors local cell.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"Clark et al. (1999). Seed dispersal near far: Patterns across temperate tropical forests. Ecology 80(5):1475-1494","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"Miquel De Cáceres Ainsa, CREAF. Roberto Molowny-Horas, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/dispersal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seed production, dispersal and seed bank dynamics — dispersal","text":"","code":"# \\donttest{ data(example_watershed) data(SpParamsMED)  # Transform to UTM31 example_watershed_utm31 <- sf::st_transform(example_watershed, crs = 32631)  # Estimate seed production and dispersal over the watershed seedbank_list <- dispersal(example_watershed_utm31, SpParamsMED) #> ℹ Seed bank mortality #> ✔ Seed bank mortality [10ms] #>  #> ℹ Seed production #> ✔ Seed production [16ms] #>  #> ℹ Kernel estimation #> ✔ Kernel estimation [938ms] #>  #> ℹ Seed dispersal #> ✔ Seed dispersal [4.1s] #>   seedbank_list[[1]] #>                   Species   Percent #> 1          Acer campestre  2.608940 #> 2     Colutea arborescens 12.593774 #> 3     Coriaria myrtifolia  2.161164 #> 4        Cornus sanguinea  1.779891 #> 5        Corylus avellana  1.779891 #> 6          Crataegus spp.  2.523497 #> 7       Cytisus scoparius 11.281491 #> 8             Daphne spp.  2.528290 #> 9          Dorycnium spp. 32.933334 #> 10           Genista spp. 53.627022 #> 11           Hedera helix 17.491668 #> 12     Juniperus communis 11.127593 #> 13         Lavandula spp.  1.863512 #> 14      Ligustrum vulgare 22.116229 #> 15          Lonicera spp. 15.433666 #> 16 Phillyrea angustifolia  5.497512 #> 17       Pinus halepensis  4.348542 #> 18            Pinus nigra 17.521331 #> 19       Pinus sylvestris 28.486686 #> 20     Pistacia lentiscus  5.098280 #> 21           Populus spp.  1.779891 #> 22      Quercus coccifera 34.397097 #> 23        Quercus faginea 21.551717 #> 24           Quercus ilex  6.274062 #> 25           Rhamnus spp.  2.452979 #> 26             Ribes spp. 10.298544 #> 27              Rosa spp. 20.060708 #> 28             Rubus spp. 64.958064 #> 29             Salix spp.  1.779891 #> 30      Salvia rosmarinus 48.519881 #> 31              Ulex spp.  2.434644 #> 32          Viburnum spp. 19.875410  # Transform to UTM31 example_ifn_utm31 <- sf::st_transform(example_ifn, crs = 32631)  # Estimate seed production and dispersal over the set of forest inventory plots seedbank_list <- dispersal(example_ifn_utm31, SpParamsMED) #> ℹ Seed bank mortality #> ✔ Seed bank mortality [15ms] #>  #> ℹ Seed production #> ✔ Seed production [22ms] #>  #> ℹ Kernel estimation #> ✔ Kernel estimation [1.1s] #>  #> ℹ Seed dispersal #> ✔ Seed dispersal [17.2s] #>   seedbank_list[[1]] #>                   Species   Percent #> 1          Acer campestre  3.930318 #> 2      Buxus sempervirens  1.105246 #> 3     Colutea arborescens 63.099736 #> 4     Coriaria myrtifolia  3.613453 #> 5        Cornus sanguinea  2.423577 #> 6        Corylus avellana  2.423577 #> 7          Crataegus spp.  5.822714 #> 8       Cytisus scoparius 65.683790 #> 9             Daphne spp.  3.930318 #> 10         Dorycnium spp.  2.176420 #> 11           Genista spp. 78.548559 #> 12           Hedera helix 71.033800 #> 13     Juniperus communis 63.856709 #> 14         Lavandula spp.  1.818856 #> 15      Ligustrum vulgare 74.805260 #> 16          Lonicera spp. 64.987150 #> 17 Phillyrea angustifolia  3.687517 #> 18       Pinus halepensis  8.234622 #> 19            Pinus nigra 15.061614 #> 20       Pinus sylvestris 84.642661 #> 21     Pistacia lentiscus  3.101224 #> 22           Populus spp.  2.991203 #> 23      Quercus coccifera 77.907326 #> 24        Quercus faginea 73.178480 #> 25           Quercus ilex  4.735768 #> 26           Rhamnus spp.  4.758933 #> 27             Ribes spp. 64.087529 #> 28              Rosa spp. 73.242211 #> 29             Rubus spp. 90.007868 #> 30             Salix spp.  2.423577 #> 31      Salvia rosmarinus 14.565035 #> 32             Tilia spp.  1.506741 #> 33              Ulex spp.  2.847994 #> 34          Viburnum spp. 76.993421 # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/example_ifn.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of distributed forest inventory stands — example_ifn","title":"Example of distributed forest inventory stands — example_ifn","text":"example coordinates, topography, forest soil data corresponding 30 forest inventory plots.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/example_ifn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of distributed forest inventory stands — example_ifn","text":"data format object sf","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/example_ifn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example of distributed forest inventory stands — example_ifn","text":"Soil data SoilGrids global database (Hengl et al. 2017). Soil depth depth bedrock Shangguan et al. (2017). Forest structure composition Third Spanish Forest Inventory (IFN3).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/example_watershed.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of watershed — example_watershed","title":"Example of watershed — example_watershed","text":"example object sf data small catchment 66 ha (0.66 km2) Catalonia. Object example_watershed_burnin result three years burn-period.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/example_watershed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of watershed — example_watershed","text":"data format object sf","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/example_watershed.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example of watershed — example_watershed","text":"Watershed limits channel network spanish Ministerio de Transición Ecológica y el Reto Demográfico. Elevation data 30 m resolution catalan Institut Cartogràfic Geològic de Catalunya. Soil data SoilGrids global database (Hengl et al. 2017). Soil depth depth bedrock Shangguan et al. (2017). Bedrock hydraulic properties Huscroft et al. (2018). Land cover data Mapa Forestal de España 1:25000. Forest structure composition Mapa Forestal de España 1:25000 Third Spanish Forest Inventory (IFN3).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/example_watershed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example of watershed — example_watershed","text":"Hengl, T., Mendes De Jesus, J., Heuvelink, G.B.M., Gonzalez, M.R., Kilibarda, M., Blagotí, ., Shangguan, W., Wright, M.N., Geng, X., Bauer-Marschallinger, B., Guevara, M.., Vargas, R., Macmillan, R.., Batjes, N.H., Leenaars, J.G.B., Ribeiro, E., Wheeler, ., Mantel, S., Kempen, B., 2017. SoilGrids250m: Global Gridded Soil Information Based Machine Learning. PLoS One 12, e0169748. doi:10.1371/journal.pone.0169748 Huscroft, J., Gleeson, T., Hartmann, J., Börker, J., 2018. Compiling Mapping Global Permeability Unconsolidated Consolidated Earth: GLobal HYdrogeology MaPS 2.0 (GLHYMPS 2.0). Geophys. Res. Lett. 45, 1897–1904. doi:10.1002/2017GL075860 Shangguan, W., Hengl, T., Mendes de Jesus, J., Yuan, H., Dai, Y., 2017. Mapping global depth bedrock land surface modeling. J. Adv. Model. Earth Syst. 9, 65–88. doi:10.1002/2016MS000686","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape variables — extract_variables","title":"Landscape variables — extract_variables","text":"Extract estimate variables landscape objects (class 'sf').","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape variables — extract_variables","text":"","code":"extract_variables(x, vars = \"land_cover_type\", SpParams = NULL, ...)  plot_variable(x, variable = \"land_cover_type\", SpParams = NULL, r = NULL, ...)"},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Landscape variables — extract_variables","text":"x object class sf appropriate columns. vars string vector name variables extract (see details). SpParams data frame species parameters (see SpParamsMED), required forest stand variables. ... Additional arguments (used). variable string name variables draw (see details). r object class SpatRaster, defining raster topology.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Landscape variables — extract_variables","text":"Function extract_variables() returns object class sf desired variables. Function plot_variables() returns ggplot object.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape variables — extract_variables","text":"following string values available vars. Topography: \"elevation\": Elevation m. \"slope\": Slope degrees. \"aspect\": Slope degrees. \"land_cover_type\": Land cover type. Soil: \"soil_vol_extract\": Total water extractable volume (mm). \"soil_vol_sat\": Total water volume saturation (mm). \"soil_vol_fc\": Total water volume field capacity (mm). \"soil_vol_wp\": Total water volume wilting point (mm). \"soil_vol_curr\": Current total water volume (mm). \"soil_rwc_curr\": Current soil relative water content (%). \"soil_rew_curr\": Current soil relative extractable water (%). \"soil_theta_curr\": Current soil moisture content (% vol.) \"soil_psi_curr\": Current soil water potential (MPa). Watershed: \"depth_to_bedrock\": Depth bedrock (m). \"bedrock_porosity\": Bedrock porosity. \"bedrock_conductivity\": Bedrock conductivity (m/day). \"aquifer_elevation\": Aquifer elevation bedrock (m). \"depth_to_aquifer\": Depth aquifer (m). \"aquifer\": Aquifer volume (mm). \"snowpack\": Snowpack water equivalent (mm). Forest stand: \"basal_area\": Basal area (m2/ha). \"tree_density\": Tree density (ind/ha). \"mean_tree_height\": Mean tree height (cm). \"dominant_tree_height\": Dominant tree height (cm). \"dominant_tree_diameter\": Dominant tree diameter (cm). \"quadratic_mean_tree_diameter\": Quadratic mean tree diameter (cm). \"hart_becking_index\": Hart-Becking index. \"leaf_area_index\": Leaf area index (m2/m2). \"foliar_biomass\": Foliar biomass (kg/m2). \"fuel_loading\": Fine live fuel loading (kg/m2). \"shrub_volume\": Shrub volume (m3/m2).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Landscape variables — extract_variables","text":"Miquel De Cáceres Ainsa, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/extract_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape variables — extract_variables","text":"","code":"# Load data and species parameters from medfate data(example_ifn) data(SpParamsMED)    # Calculate basal area and leaf area index # for all forest stands extract_variables(example_ifn, vars = c(\"basal_area\", \"leaf_area_index\"),                   SpParams = SpParamsMED) #> Simple feature collection with 100 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.817095 ymin: 41.93301 xmax: 2.142956 ymax: 41.99881 #> Geodetic CRS:  WGS 84 #> # A tibble: 100 × 3 #>               geometry basal_area leaf_area_index #>            <POINT [°]>      <dbl>           <dbl> #>  1 (2.130641 41.99872)      13.9            5.29  #>  2 (2.142714 41.99881)      15.7            2.91  #>  3 (1.828998 41.98704)       0              0.833 #>  4 (1.841068 41.98716)       0              3.03  #>  5 (1.853138 41.98728)       0              1.79  #>  6 (1.901418 41.98775)       0              2.76  #>  7 (1.937629 41.98809)      19.7            5.88  #>  8  (1.949699 41.9882)       9.91           3.45  #>  9  (1.96177 41.98831)       0              2.41  #> 10  (1.97384 41.98842)      19.8            3.75  #> # ℹ 90 more rows"},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":null,"dir":"Reference","previous_headings":"","what":"Fire regime instance — fire_regime_instance","title":"Fire regime instance — fire_regime_instance","text":"Applies fire regime object set landscape units determine fire realization","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fire regime instance — fire_regime_instance","text":"","code":"fire_regime_instance(sf, fire_regime)"},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fire regime instance — fire_regime_instance","text":"sf object class sf following columns: geometry: Spatial geometry. id: Stand identifiers. represented_area_ha: Area represented stand (hectares). ignition_weights: Relative weights determine stands burned (optional). fire_regime list parameters defining fire regime (see create_fire_regime).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fire regime instance — fire_regime_instance","text":"integer matrix specifying day year burning landscape unit every year fire regime definition. Values interpreted follows: NA - wildfire year 0 - Wildfire occur driest day (.e. one largest vapor pressure deficit). 1...366 - Day year wildfire occur","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fire regime instance — fire_regime_instance","text":"function randomly determines landscape units burn every year, depending specifications fire regime object. Users can define fire regime instances models (e.g. fire landscape model) use directly functions fordyn_spatial fordyn_scenario.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fire regime instance — fire_regime_instance","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fire_regime_instance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fire regime instance — fire_regime_instance","text":"","code":"# Load example data data(\"example_ifn\")  # Assume that each stand represents 1km2 = 100 ha example_ifn$represented_area_ha <- 100  # Define fire regime characteristics reg1 <- create_fire_regime(c(\"2002\" = 200, \"2003\" = 500))   # Create a fire regime instance m1 <- fire_regime_instance(example_ifn, reg1)  # Check number of plots burned colSums(!is.na(m1)) #> 2002 2003  #>    2    5   # Define fire regime characteristics with stochastic area burned reg2 <- create_fire_regime(annual_burned_area = c(\"2002\" = 200, \"2003\" = 500),                            sd_burned_area = c(\"2002\" = 0.4, \"2003\" = 0.5))   # Create a fire regime instance m2 <- fire_regime_instance(example_ifn, reg2)  # Check number of plots burned colSums(!is.na(m2)) #> 2002 2003  #>    1    8"},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Scenario of forest dynamics — fordyn_scenario","title":"Scenario of forest dynamics — fordyn_scenario","text":"Evaluates forest dynamics landscape including climate management scenarios","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scenario of forest dynamics — fordyn_scenario","text":"","code":"fordyn_scenario(   sf,   SpParams,   meteo = NULL,   management_scenario,   volume_function = NULL,   volume_arguments = NULL,   local_control = defaultControl(),   dispersal_control = default_dispersal_control(),   dates = NULL,   CO2ByYear = numeric(0),   fire_regime = NULL,   summary_function = NULL,   summary_arguments = NULL,   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE,   verbose = FALSE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scenario of forest dynamics — fordyn_scenario","text":"sf object class sf following columns: geometry: Spatial geometry. id: Stand identifiers. elevation: Elevation sea level (m). slope: Slope (degrees). aspect: Aspect (degrees). forest: Objects class forest. soil: Objects class soil. state: Objects class spwbInput growthInput (optional). meteo: Data frames weather data (required parameter meteo = NULL). management_unit: Management unit corresponding stand. represented_area_ha: Area represented stand hectares. ignition_weights: Relative weights determine stands burned. Optional, relevant fire_regime supplied ). local_control: list control parameters (optional). Used override function parameter local_control specific stands (values can NULL remaining ones). Alternatively, user may supply result previous call fordyn_scenario, continue simulations. SpParams data frame species parameters (see SpParamsMED). meteo Meteorology data (see fordyn_spatial). management_scenario list defining management scenario (see create_management_scenario) volume_function function accepting forest object tree data table, species parameter table, input returning wood volume (m3/ha) corresponding tree cohort. function may accept additional arguments. NULL, default volume function used (recommended!). volume_arguments List additional arguments volume function. local_control list local model control parameters (see defaultControl). dispersal_control list dispersal control parameters (see default_dispersal_control). NULL, dispersal simulated. dates Date object days period simulated. NULL, whole period meteo used. CO2ByYear named numeric vector years names atmospheric CO2 concentration (ppm) values. Used specify annual changes CO2 concentration along simulation (alternative specifying daily values meteo). fire_regime list parameters defining fire regime (see create_fire_regime) matrix representing fire regime instance (see fire_regime_instance). NULL, wildfires simulated. Details given fordyn_spatial. summary_function appropriate function calculate summaries object class 'fordyn' (e.g., summary.fordyn). summary_arguments List additional arguments summary function. parallelize Boolean flag try parallelization (use clusters minus one). num_cores Integer number cores used parallel computation. chunk_size Integer indicating size chunks sent different processes (default, number spatial elements divided number cores). progress Boolean flag display progress information simulations. verbose Boolean flag display additional console output.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scenario of forest dynamics — fordyn_scenario","text":"list class 'fordyn_scenario' following elements: result_sf: object class 'sf' using UTM projection containing four elements: geometry: Spatial geometry. id: Stand id, taken input. tree_table: list data frames simulated stand, containing living trees time step. shrub_table: list data frames simulated stand, containing living shrub time step. dead_tree_table: list data frames simulated stand, containing dead trees time step. dead_shrub_table: list data frames simulated stand, containing dead shrub time step. cut_tree_table: list data frames simulated stand, containing cut trees time step. cut_shrub_table: list data frames simulated stand, containing cut shrub time step. summary: list model output summaries simulated stand (summary_function NULL). result_volumes: data frame initial, growth, extracted final volumes (m3) year. demand-based scenarios volumes corresponding species demand also included. result_volumes_spp: data frame growth extracted volumes (m3) species year. result_volumes_demand: demand-based scenarios target volumes also included, data frame growth, target extracted volumes (m3) demand entity year. . next_sf: object class 'sf' continue simulations subsequent calls fordyn_scenario. next_demand: demand-based scenarios, list information (.e. demand offset species last volume growth) modify demand subsequent calls fordyn_scenario.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scenario of forest dynamics — fordyn_scenario","text":"function allows coordinating dynamics simulated forest stands via management scenario defined landscape/regional level (see different kinds scenarios specify create_management_scenario). input 'sf' object Universal Transverse Mercator (UTM) coordinate system (projection using meters length unit) appropriate behavior dispersal sub-model. year simulated, function determines forest stands managed, possibly depending demand, calls function fordyn_spatial one year (normally including parallelization). simulation stands results error, function try restore previous state forest stand next year steps. Finally, function evaluates much specified demand fulfilled stores results, including demand offsets applied year . Management implemented using defaultManagementFunction medfate, meaning management parameters need follow structure defaultManagementArguments Details inclusion fire regimes simulations explained fordyn_spatial.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scenario of forest dynamics — fordyn_scenario","text":"Miquel De Cáceres Ainsa, CREAF Aitor Améztegui, UdL","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/fordyn_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scenario of forest dynamics — fordyn_scenario","text":"","code":"# \\donttest{ # Load example landscape data data(\"example_ifn\")    # Load example meteo data frame from package meteoland data(\"examplemeteo\")    # Load default medfate parameters data(\"SpParamsMED\")  # Creates scenario with one management unit and annual demand for P. nigra  scen <- create_management_scenario(1, c(\"Pinus nigra/Pinus sylvestris\" = 2300))  # Assign management unit to all stands example_ifn$management_unit <- 1   # Assume that each stand represents 1km2 = 100 ha example_ifn$represented_area_ha <- 100  # Transform to UTM31 (necessary for dispersal) example_ifn_utm31 <- sf::st_transform(example_ifn, crs = 32631)  # Subset three plots to speed-up calculations example_subset <- example_ifn_utm31[31:33, ]  # Launch simulation scenario fs_12 <- fordyn_scenario(example_subset, SpParamsMED, meteo = examplemeteo,                           volume_function = NULL, management_scenario = scen,                          parallelize = FALSE) #>  #> ── Simulation of a management/fire scenario with fordyn ──────────────────────── #> ℹ Checking sf input #> ✔ Checking sf input [5ms] #>  #> ℹ Checking meteo object input #> ✔ Checking meteo object input [10ms] #>  #>  #> ── Scenario parameters ── #>  #> • Number of stands: 3 #> • Represented area: 300 ha #> • Number of years: 1 #> • Management scenario type: input_demand #> • Adding column 'management_arguments' #> • Default volume function #> • Initial volume: 12072 m3 #> • Seed dispersal process included. #>  #> ── Simulation ── #>  #> ──  [ Year 2001 (1/1) ]  #> • Demand (incl. offset): 2300 m3 #> • Determining available volumes and final cuts #> • Demand (after final cuts): 2300 m3 #> • Determining thinning operations #> • Seed bank dynamics and seed dispersal... #> • Calling fordyn_spatial... #> ℹ Checking sf input #> ✔ Checking sf input [7ms] #>  #> ℹ Checking meteo object input #> ✔ Checking meteo object input [14ms] #>  #> ℹ Performing 'fordyn' simulations on 3 locations #> ✔ Performing 'fordyn' simulations on 3 locations [11ms] #>  #> Stands ■■■■■■■■■■■                       33% | ETA:  4s #> Stands ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  2s #> Stands ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ No simulation errors detected #> • Final volume: 12235 m3 #>  #> ── Arranging output ── #>  #> • Tree/shrub tables #> • Wood volume table # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape forest parametrization — forest_parametrization","title":"Landscape forest parametrization — forest_parametrization","text":"Utility functions define forest inputs landscape: impute_forests() performs imputation forest objects forest inventory using forest map match forest types topography covariates. modify_forest_structure() uses forest structure rasters supplied user correct forest structure metrics. check_forests() checks forests defined contain missing values key tree/shrub attributes.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape forest parametrization — forest_parametrization","text":"","code":"impute_forests(   x,   sf_fi,   dem,   forest_map,   var_class = NA,   max_distance_km = 100,   replace_existing = FALSE,   missing_class_imputation = FALSE,   missing_class_forest = NULL,   merge_trees = TRUE,   merge_shrubs = TRUE,   progress = TRUE )  modify_forest_structure(   x,   structure_map,   variable,   map_var = NA,   ratio_limits = NULL,   minDBH = 7.5,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Landscape forest parametrization — forest_parametrization","text":"x object class sf. contains column named 'land_cover_type', imputation performed locations whose land cover \"wildland\". Otherwise, forest imputation done locations. structural corrections checking, x already contain column named 'forest' containing  forest objects. sf_fi object class sf forest inventory data column 'forest'. dem digital elevation model (class SpatRaster) meters units forest_map object class SpatRaster SpatVector forest class map var_class Variable name index containing forest classes forest_map. missing first column taken. max_distance_km Maximum distance, km, forest inventory plot imputation. replace_existing logical flag force replacement existing forest objects, present. missing_class_imputation logical flag force imputation locations forest class defined. missing_class_imputation = TRUE, imputation locations based geographic topographic criteria . missing_class_forest forest object used locations missing class. merge_trees logical flag simplify tree cohorts merging tree records DBH classes (see forest_mergeTrees). merge_shrubs logical flag simplify shrub cohorts merging shrub records height classes (see forest_mergeShrubs). progress logical flag print console output. structure_map object class SpatRaster SpatVector forest structural variable map variable Structural variable correct. See options details. map_var Variable name index containing structural variable 'structure_map'. missing first column taken. ratio_limits Limits ratio variable corrections, used avoid outliers. minDBH Minimum diameter stand metric calculation. minDBH > 0 stands smaller trees corrected missing stand metric. special case occurs correction following basal area (see details).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Landscape forest parametrization — forest_parametrization","text":"Functions impute_forests() modify_forest_structure() return modified object class sf. Function check_forests() returns invisible data frame columns indicating missing forest data missing values tree shrub parameters.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape forest parametrization — forest_parametrization","text":"Function impute_forests() performs imputation forest inventory plots target locations provided correspond forest class, defined input forest map, geographically closer distance threshold (max_distance_km). Among multiple stands can fulfill two requirements, function chooses one similar elevation position N--S slopes (.e. product cosine aspect slope). topographic features standardized zero mean unit standard deviation (using supplied digital elevation model calculate metrics), make weight imputation equal. imputation method less successful depending resolution forest classes number forest inventory plots available . Additionally, tree shrub cohorts can simplified imputation (merge_trees merge_shrubs), reduce number records (hence, speed-simulations). Function modify_forest_structure() can used modify specific structure variables imputed forests building rasters supplied user (typically aerial satellite LiDAR products). given metric, function calculate ratio structure metric target forest object (see stand_basalArea) input map target location. Options structural variables following: mean_tree_height: contain values cm. Corrects tree heights diameters (assuming constant diameter-height relationship). dominant_tree_height: contain values cm. Corrects tree heights diameters (assuming constant diameter-height relationship). tree_density: contain values individuals per hectare. Corrects tree density. basal_area: contain values squared meters per hectare (m2/ha). Corrects tree density. Forests mean_shrub_height: contain values cm. Corrects shrub cover. Locations metric value map missing left unmodified. happens metric value zero, avoid division zero. special case occurs correction basal area. case, trees larger minDBH structural map indicates positive values basal area, DBH values set minDBH, correction basal area performed.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Landscape forest parametrization — forest_parametrization","text":"Miquel De Cáceres Ainsa, CREAF Rodrigo Balaguer-Romano, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/forest_parametrization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape forest parametrization — forest_parametrization","text":"","code":"# See package vignettes 'Preparing inputs'"},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"Initializes state local models spwb growth.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"","code":"initialize_landscape(   x,   SpParams,   local_control,   model = \"spwb\",   simplify = FALSE,   replace = FALSE,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"x object class sf following columns: geometry: Spatial geometry. forest: Objects class forest. soil: Objects class soil data frames physical properties. land_cover_type: Land cover type grid cell (values 'wildland' 'agriculture'). crop_factor: Crop evapo-transpiration factor. required 'agriculture' land cover type. local_control: list control parameters (optional). Used override function parameter local_control specific cells (values can NULL remaining ones). SpParams data frame species parameters (see SpParamsMED). local_control list control parameters (see defaultControl). model string indicate model, either \"spwb\" \"growth\". simplify Boolean flag simplify forest tree shrub cohorts largest leaf area index. leaf area index whole tree (respectively, shrub) layer attributed selected cohort. See function forest_reduceToDominant. replace Boolean flag replace existing initialized states progress Boolean flag display progress information.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"Replaces adds column 'state' whose elements spwbInput growthInput objects returns modified object class 'sf'.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"Initialization normally dealt automatically calling simulation functions spwb_spatial,  growth_spatial, spwb_spatial_day growth_spatial_day. However, function initialize_landscape  allows separating initialization model simulations. Option simplify implemented allow simplification forests tree/shrub dominant cohorts watershed simulations focus runoff (e.g. calibration watershed parameters burnin periods). Elements identified result_cell simplified.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/initialize_landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization of model inputs for spatially-distributed forest stands — initialize_landscape","text":"","code":"# Load example landscape data data(\"example_ifn\")    # Load example meteo data frame from package meteoland data(\"examplemeteo\")    # Load default medfate parameters data(\"SpParamsMED\")  # Define local control parameters using function in medfate local_control <- defaultControl()  # If necessary, change defaults  # Initialize state for 'spwb' simulations example_ifn_init <- initialize_landscape(example_ifn, SpParamsMED,                                           local_control = local_control,                                           model = \"spwb\") #> ℹ Creating 100 state objects for model 'spwb'. #> ✔ Creating 100 state objects for model 'spwb'. [4ms] #>  #> • Transpiration mode [Granier: 100, Sperry: 0, Sureau: 0] #> • Soil doimains [buckets: 100, single: 0, dual: 0]"},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest and soil summaries over space — landscape_summary","title":"Forest and soil summaries over space — landscape_summary","text":"Functions calculates summary function forest soil spatial elements object class sf containing landscape information.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest and soil summaries over space — landscape_summary","text":"","code":"landscape_summary(   object,   name,   summary_function,   ...,   unlist = FALSE,   progress = FALSE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest and soil summaries over space — landscape_summary","text":"object object class sf. name string element summarize: \"forest\", \"soil\" \"state\". summary_function function accepts objects class forest, soil model input objects, respectively. ... Additional arguments summary function. unlist Logical flag try converting summaries different columns progress Boolean flag display progress information","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest and soil summaries over space — landscape_summary","text":"object class sf containing calculated statistics. unlist = FALSE column 'summary' list summaries element. unlist = TRUE different columns returned instead, one per variable given summary function.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forest and soil summaries over space — landscape_summary","text":"Miquel De Cáceres Ainsa, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/landscape_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest and soil summaries over space — landscape_summary","text":"","code":"# Load plot data and species parameters from medfate data(example_ifn)  # Load default medfate parameters data(\"SpParamsMED\")   # Apply forest summary function landscape_summary(example_ifn, \"forest\", summary.forest, SpParamsMED) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.817095 ymin: 41.93301 xmax: 2.142956 ymax: 41.99881 #> Geodetic CRS:  WGS 84 #> # A tibble: 100 × 2 #>               geometry summary         #>            <POINT [°]> <list>          #>  1 (2.130641 41.99872) <smmry.fr [26]> #>  2 (2.142714 41.99881) <smmry.fr [26]> #>  3 (1.828998 41.98704) <smmry.fr [26]> #>  4 (1.841068 41.98716) <smmry.fr [26]> #>  5 (1.853138 41.98728) <smmry.fr [26]> #>  6 (1.901418 41.98775) <smmry.fr [26]> #>  7 (1.937629 41.98809) <smmry.fr [26]> #>  8  (1.949699 41.9882) <smmry.fr [26]> #>  9  (1.96177 41.98831) <smmry.fr [26]> #> 10  (1.97384 41.98842) <smmry.fr [26]> #> # ℹ 90 more rows"},{"path":"https://emf-creaf.github.io/medfateland/reference/medfateland-package.html","id":null,"dir":"Reference","previous_headings":"","what":"medfateland: Mediterranean Landscape Forest Simulation — medfateland-package","title":"medfateland: Mediterranean Landscape Forest Simulation — medfateland-package","text":"Functions simulate forest hydrology, forest function dynamics landscapes","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/medfateland-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"medfateland: Mediterranean Landscape Forest Simulation — medfateland-package","text":"Maintainer: Miquel De Cáceres miquelcaceres@gmail.com ORCID Author: Aitor Améztegui ORCID Author: María González ORCID Author: Núria Aquilué Contributor: Mario Beltrán Contributor: Rodrigo Balaguer-Romano ORCID Contributor: Roberto Molowny-Horas ORCID","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":null,"dir":"Reference","previous_headings":"","what":"Rock optimization — optimization_rock","title":"Rock optimization — optimization_rock","text":"Optimization rock fragment content","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rock optimization — optimization_rock","text":"","code":"optimization_rock(   sf,   SpParams,   meteo = NULL,   local_control = defaultControl(),   dates = NULL,   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   PLCquantile = 0.9,   qPLC_target = 12,   qPLC_tol = 0.5,   sew_min = 30,   max_rocks = 99,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rock optimization — optimization_rock","text":"sf object class sf (see spwb_spatial). SpParams data frame species parameters (see SpParamsMED). meteo Input meteorological data (see section details spwb_spatial). local_control list control parameters (see defaultControl). dates Date object describing days period modeled. parallelize Boolean flag try parallelization (use clusters minus one). num_cores Integer number cores used parallel computation. chunk_size Integer indicating size chuncks sent different processes (default, number spatial elements divided number cores). PLCquantile Maximum PLC quantile calculated across years. qPLC_target Target PLC achieved (default 12%). qPLC_tol Tolerance PLC difference target accepted finding solution. sew_min Minimum soil extractable water (mm) rock exploration. max_rocks Maximum content coarse fragments allowed soil layer. progress Boolean flag display progress information simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rock optimization — optimization_rock","text":"object class sf modified soil column additional column optimization_message text information optimization.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rock optimization — optimization_rock","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/optimization_rock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rock optimization — optimization_rock","text":"","code":"# \\donttest{ data(\"example_ifn\") data(\"examplemeteo\") data(\"SpParamsMED\") example_subset <- example_ifn[31:32, ] optimization_rock(example_subset, SpParamsMED, examplemeteo) #> ℹ Checking meteo object input #> ✔ Checking meteo object input [6ms] #>  #> ℹ Rock optimization on 2 locations #> ✔ Rock optimization on 2 locations [10ms] #>  #> Stands ■■■■■■■■■■■■■■■■                  50% | ETA:  4s #> Stands ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> Simple feature collection with 2 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.901727 ymin: 41.96974 xmax: 1.925861 ymax: 41.96997 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 9 #>                  geom id        elevation slope aspect land_cover_type soil   #>           <POINT [°]> <chr>         <dbl> <dbl>  <dbl> <chr>           <list> #> 1 (1.901727 41.96974) 081047_A1       478  12.0   259. wildland        <df>   #> 2 (1.925861 41.96997) 081048_A1       540  16.4   109. wildland        <df>   #> # ℹ 2 more variables: forest <list>, optimization_message <chr> # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":null,"dir":"Reference","previous_headings":"","what":"Overland routing for TETIS sub-model — overland_routing","title":"Overland routing for TETIS sub-model — overland_routing","text":"Determines overland routing given raster definition set target locations watershed simulations. channel supplied, also determines channel routing.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overland routing for TETIS sub-model — overland_routing","text":"","code":"overland_routing(   r,   sf,   channel_flow_speed = 1,   subwatersheds = FALSE,   max_overlap = 0.2 )  cell_neighbors(r, sf)"},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overland routing for TETIS sub-model — overland_routing","text":"r object class SpatRaster, defining raster topology. sf object class sf following columns: geometry: Spatial point geometry corresponding cell centers. elevation: Elevation sea level (m). channel: optional logical (binary) vector indicating cells corresponding river channel. channel_flow_speed Average flow speed channel (m/s). subwatersheds boolean flag define watershed subunits. max_overlap Maximum proportion overlapping cells watershed subunits considered independent. Lower values normally produce larger subunits.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overland routing for TETIS sub-model — overland_routing","text":"object class sf describing overland routing parameters outlet cells: geometry: Spatial point geometry corresponding cell centers. elevation: Elevation sea level (m). waterRank: Ranked elevation decreasing order. waterOrder: vector cell's processing order overland routing (based elevation). First value corresponds row index first processed cell, second value corresponds row index second processed cell forth. queenNeigh: list , cell, vector gives identity neighbours (eight). waterQ: list , cell, vector gives proportion overland flow neighbour. channel: logical vector indicating channel cells. outlet: logical vector indicating outlet cells. target_outlet: Index outlet cell channel leads  (NA non-channel cells). distance_to_outlet: Distance target outlet number cells (NA non-channel cells). outlet_backlog: outlet, backlog vector watershed export (NA non-outlet cells). subwatershed: Integer vector indicating watershed subunits (NA subwatersheds = FALSE).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overland routing for TETIS sub-model — overland_routing","text":"channel supplied, cells neighbors higher elevation considered outlet cells. channel supplied, outlets channel cells domain limits neighbor channel lower elevation. case, model simulations include channel routing towards outlet cells. defining watershed subunits requested (.e. subwatersheds = TRUE), subunits defined first determining area draining channel outlet cell. , areas progressively merged one nested proportion overlapping cells lower pre-specified threshold (.e. larger max_overlap). given cell belong one subunit. Therefore, overlap final subwatersheds eliminated deciding main subwatershed cell. neighbors proportion overland flow neighbors modified cells located subunit boundaries.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/overland_routing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overland routing for TETIS sub-model — overland_routing","text":"","code":"# Load example watershed data data(\"example_watershed\")  # Get bounding box to determine limits b <- sf::st_bbox(example_watershed) b #>    xmin    ymin    xmax    ymax  #>  401430 4671870  402830 4672570   # Define a raster topology, using terra package,  # with the same CRS as the watershed. In this example cells have 100 m side. # Coordinates in the 'sf' object are assumed to be cell centers r <-terra::rast(xmin = 401380, ymin = 4671820, xmax = 402880, ymax = 4672620,                  nrow = 8, ncol = 15, crs = \"epsg:32631\")                  # Generate overland routing or <- overland_routing(r, example_watershed)  # Plot elevation plot(or[\"elevation\"])   # Rank (decreasing elevation) for processing plot(or[\"waterRank\"])   # Plot outlet cells plot(or[\"outlet\"])   # Define 4-cell channel example_watershed$channel <- FALSE example_watershed$channel[c(6, 11, 12, 20)] <- TRUE  # Generate overland and channel routing or_channel <- overland_routing(r, example_watershed)  # Plot outlet and distance to outlet plot(or_channel[\"outlet\"]) plot(or_channel[\"distance_to_outlet\"])"},{"path":"https://emf-creaf.github.io/medfateland/reference/parse_forestable.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse forestable — parse_forestable","title":"Parse forestable — parse_forestable","text":"Transforms data frame sf object issued package forestables sf object simulations medfateland.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/parse_forestable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse forestable — parse_forestable","text":"","code":"parse_forestable(   x,   keepSpeciesCodes = TRUE,   filterMissingSpecies = TRUE,   filterDeadTrees = TRUE,   filterCutTrees = TRUE,   keepUnfilteredCopy = FALSE,   minimumTreeDBH = 0.1,   progress = FALSE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/parse_forestable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse forestable — parse_forestable","text":"x data frame sf object issued package forestables. keepSpeciesCodes Keeps forest inventory species codes. filterMissingSpecies TRUE, filters records species missing. filterDeadTrees TRUE, filters dead trees (Spanish forest inventory IFN3 IFN4). filterCutTrees TRUE, filters cut trees (Spanish forest inventory IFN3 IFN4). keepUnfilteredCopy TRUE, additional column given dead/cut trees filtered. minimumTreeDBH Minimum DBH keeping tree record. progress logical flag include progress bar processing data.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/parse_forestable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse forestable — parse_forestable","text":"sf object including 'forest' column. keepUnfilteredCopy=TRUE additional column 'forest_unfiltered' also given.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/parse_forestable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse forestable — parse_forestable","text":"function retrieves following information forestables object: Id unique code, survey year, non-unique plot code country. Plot location. Output geometry always points WGS 84. Note exact coordinates normally given forest inventory data. Elevation, slope aspect, whenever available Tree understory data. function create column forest information. tree understory data missing given row, corresponding forest empty.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays spatial simulation summaries — plot_summary","title":"Displays spatial simulation summaries — plot_summary","text":"Produces graphical output summaries simulation models","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays spatial simulation summaries — plot_summary","text":"","code":"plot_summary(x, variable, date, r = NULL, ...)"},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays spatial simulation summaries — plot_summary","text":"x object class sf, simulation summaries. variable variable drawn. date date summary plotted. r object class SpatRaster, defining raster topology. ... Additional parameters (passed scale definition, limits).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays spatial simulation summaries — plot_summary","text":"object class ggplot.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Displays spatial simulation summaries — plot_summary","text":"Appropriate values x can originate calls simulation_summary. Alternatively, summary functions specified time performing simulations, result spatial simulation function (e.g. spwb_spatial) already contain summaries. special case made spwb_land growth_land, accepted inputs x, element 'sf' used.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/plot_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Displays spatial simulation summaries — plot_summary","text":"Miquel De Cáceres Ainsa, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny app with interactive plots and maps — shinyplot_land","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"Creates shiny app interactive plots spatial inputs simulation results","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"","code":"shinyplot_land(x, SpParams = NULL, r = NULL)"},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"x object class 'sf' containing information drawn (see details). Alternatively, object class 'spwb_land', 'growth_land' 'fordyn_land'. SpParams data frame species parameters (see SpParamsMED), required forest stand variables. r object class SpatRaster, defining raster topology.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"object represents shiny app","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"run function interactive mode. shiny app can used display spatial inputs simulation results. Spatial inputs: case user supplies object class sf simulation inputs. Simulation result summaries: case user supplies object class sf simulation summaries. Available plots depend summary function used create result summaries.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/shinyplot_land.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shiny app with interactive plots and maps — shinyplot_land","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes spatial simulation results — simulation_summary","title":"Summarizes spatial simulation results — simulation_summary","text":"Creates spatial objects containing summaries simulations","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes spatial simulation results — simulation_summary","text":"","code":"simulation_summary(object, summary_function, ...)"},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes spatial simulation results — simulation_summary","text":"object object class 'sf' simulation results (e.g. result calling spwb_spatial). summary_function summary function executed simulation results (see details). ... Additional parameters summary function.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizes spatial simulation results — simulation_summary","text":"object class sf, following two elements: geometry: Spatial geometry. id: Stand id, taken input. summary: list model output summaries simulated location.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarizes spatial simulation results — simulation_summary","text":"function supplied take input object local simulation function, .e. spwb, growth, fordyn. output matrix dates rows variables columns. example suitable function summary.spwb.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/simulation_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarizes spatial simulation results — simulation_summary","text":"Miquel De Cáceres Ainsa, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape soil parametrization — soil_parametrization","title":"Landscape soil parametrization — soil_parametrization","text":"Function add_soilgrids fills column 'soil' physical soil characteristics drawn SoilGrids 2.0 (Hengl et al. 2017; Poggio et al. 2021). Function modify_soils modifies soil definition according soil depth depth bedrock information. Function check_soils verifies soil data contain missing values key variables , , assigns default values.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landscape soil parametrization — soil_parametrization","text":"","code":"add_soilgrids(   x,   soilgrids_path = NULL,   widths = NULL,   replace_existing = TRUE,   progress = TRUE )  modify_soils(   x,   soil_depth_map = NULL,   depth_to_bedrock_map = NULL,   regolith_rfc = 97.5,   full_rock_filling = TRUE,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Landscape soil parametrization — soil_parametrization","text":"x object class sf valid CRS definition. contains column called 'land_cover_type', soils retrieved \"agriculture\" \"wildland\" cover types . Otherwise, soils retrieved locations. functions modify_soils check_soils, x already contain column named \"soil\". soilgrids_path Path SoilGrids rasters (see details). missing, SoilGrids REST API (https://rest.isric.org) queried. widths numeric vector indicating desired layer widths, mm. NULL default soil grids layer definition returned. replace_existing logical flag force replacement existing soil data, already present progress logical flag include progress bar processing output query SoilGrids REST API. soil_depth_map object class SpatRaster SpatVector soil depth (mm) values. depth_to_bedrock_map object class SpatRaster SpatVector depth bedrock (mm) values. regolith_rfc Rock fragment content, percent volume, soil depth 200cm depth (lower depths, modified via widths). full_rock_filling Logical flag modify rock fragment content soil layers according distance soil depth.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Landscape soil parametrization — soil_parametrization","text":"modified object class sf column 'soil'.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape soil parametrization — soil_parametrization","text":"soilgrids_path = NULL function connects SoilGrids REST API (https://rest.isric.org) retrieve soil physical chemical characteristics site (Hengl et al. 2007; Poggio et al. 2021), selected coordinates. Also, case depths default ones SoilGrids API, function uses averages values soil grid layers depending overlap soil layer definitions. Unfortunately, SoilGrids REST API queries limited points. soilgrids_path != NULL function read SoilGrid rasters file disk. Folders need defined variable (\"sand\", \"clay\", \"soc\", \"bdod\", \"cfvo\" \"nitrogen\"). File paths soilgrids_path named: var/var_layer_mean.tif var one layer \"0-5cm\", \"5-15cm\", \"15-30cm\", \"30-60cm\", \"60-100cm\" \"100-200cm\" SoilGrids provide soil depth estimates. Function modify_soils designed adjust soil depths according available information. soil_depth_map provided, function adjusts rock fragment content layers soil depth value regolith_rfc. depth_to_bedrock_map provided, function truncates total depth soil definition depth bedrock. regional maps soil depth available, users recommended resort Shangguan et al (2017).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Landscape soil parametrization — soil_parametrization","text":"Hengl T, Mendes de Jesus J, Heuvelink GBM, Ruiperez Gonzalez M, Kilibarda M, Blagotić , et al. (2017) SoilGrids250m: Global gridded soil information based machine learning. PLoS ONE 12(2): e0169748. doi:10.1371/journal.pone.0169748. Poggio L, de Sousa LM, Batjes NH, Heuvelink GBM, Kempen B, Ribeiro E, Rossiter D (2021). SoilGrids 2.0: producing soil information globe quantified spatial uncertainty. SOIL 7, 217-240. doi: 10.5194/soil-7-217-2021 Shangguan W, Hengl T, Mendes de Jesus J, Yuan H, Dai J (2017). Mapping global depth bedrock land surface modeling. Journal Advances Modeling Earth Systems 9: 65-88. doi: 10.1002/2016MS000686","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Landscape soil parametrization — soil_parametrization","text":"Víctor Granda, EMF-CREAF Miquel De Cáceres Ainsa, EMF-CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/soil_parametrization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landscape soil parametrization — soil_parametrization","text":"","code":"# \\donttest{    library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE    x <- st_sf(geometry = st_sfc(st_point(c(-5.6333, 42.6667)), crs = 4326))    x_soil <- add_soilgrids(x, widths = c(300, 700, 1000)) #> ℹ Defining new column 'soil' #> ✔ Defining new column 'soil' [5ms] #>  #> ℹ Querying 1 points to rest.isric.org: #> ✔ Querying 1 points to rest.isric.org: [9ms] #>     x_soil #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -5.6333 ymin: 42.6667 xmax: -5.6333 ymax: 42.6667 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 2 #>            geometry soil         #>         <POINT [°]> <list>       #> 1 (-5.6333 42.6667) <df [3 × 7]>    # See more complete examples in package vignettes 'Preparing inputs'  # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Watershed simulations — spwb_land","title":"Watershed simulations — spwb_land","text":"Functions perform simulations watershed described set connected grid cells. Function spwb_land implements distributed hydrological model simulates daily local water balance, spwb_day, grid cells watershed accounting overland runoff, subsurface flow groundwater flow cells. Function growth_land similar spwb_land, includes daily local carbon balance, growth mortality processes grid cells, provided growth_day. Function fordyn_land extends previous two functions simulation management, seed dispersal, recruitment resprouting.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Watershed simulations — spwb_land","text":"","code":"spwb_land(   r,   sf,   SpParams,   meteo = NULL,   dates = NULL,   CO2ByYear = numeric(0),   summary_frequency = \"years\",   local_control = defaultControl(soilDomains = \"single\"),   watershed_control = default_watershed_control(),   parallelize = FALSE,   num_cores = parallel::detectCores() - 1,   progress = TRUE )  growth_land(   r,   sf,   SpParams,   meteo = NULL,   dates = NULL,   CO2ByYear = numeric(0),   summary_frequency = \"years\",   local_control = medfate::defaultControl(soilDomains = \"single\"),   watershed_control = default_watershed_control(),   parallelize = FALSE,   num_cores = parallel::detectCores() - 1,   progress = TRUE )  fordyn_land(   r,   sf,   SpParams,   meteo = NULL,   dates = NULL,   CO2ByYear = numeric(0),   local_control = medfate::defaultControl(soilDomains = \"single\"),   watershed_control = default_watershed_control(),   dispersal_control = default_dispersal_control(),   management_function = NULL,   parallelize = FALSE,   num_cores = parallel::detectCores() - 1,   progress = TRUE )  # S3 method for class 'spwb_land' summary(object, ...)  # S3 method for class 'growth_land' summary(object, ...)"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Watershed simulations — spwb_land","text":"r object class SpatRaster, defining raster topology. sf object class sf following columns: geometry: Spatial point geometry corresponding cell centers. elevation: Elevation sea level (m). slope: Slope (degrees). aspect: Aspect (degrees). land_cover_type: Land cover type grid cell (values 'wildland', 'agriculture', 'rock', 'artificial' 'water'). forest: Objects class forest. soil: Objects class soil data frames physical properties. state: Objects class spwbInput growthInput (optional). meteo: Data frames weather data (required parameter meteo = NULL). crop_factor: Crop evapo-transpiration factor. required 'agriculture' land cover type. local_control: list control parameters (optional). Used override function parameter local_control specific cells (values can NULL remaining ones). snowpack: optional numeric vector snow water equivalent content snowpack cell (mm). missing initialized zero. management_arguments: Lists management arguments (optional, relevant fordyn_land ). result_cell: logical indicating local model results desired (optional, relevant spwb_land  growth_land ). Model results produced wildland agriculture cells. using TETIS watershed model, following columns also REQUIRED: depth_to_bedrock: Depth bedrock (mm). bedrock_conductivity: Bedrock (saturated) conductivity (m·day-1). bedrock_porosity: Bedrock porosity (proportion pore space rock). using TETIS watershed model, following columns OPTIONAL: aquifer: numeric vector water content aquifer cell (mm). missing, initialized zero. deep_aquifer_loss: numeric vector maximum daily loss deeper aquifer (mm·day-1). missing cells take value deep_aquifer_loss default_watershed_control channel: logical (binary) vector indicating overland channel routing. outlet_backlog: list vector indicating channel backlog outlet cells previous simulation. SpParams data frame species parameters (see SpParamsMED). IMPORTANT: sf already initialized, parameter effect. meteo Input meteorological data (see spwb_spatial details). dates Date object describing days period modeled. CO2ByYear named numeric vector years names atmospheric CO2 concentration (ppm) values. Used specify annual changes CO2 concentration along simulation (alternative specifying daily values meteo). summary_frequency Frequency cell summary produced (e.g. \"years\", \"months\", ...) (see cut.Date). fordyn_land summaries always produced monthly resolution. local_control list control parameters (see defaultControl) function spwb_day growth_day. default, parameter soilDomains set \"single\", meaning single-domain Richards model. IMPORTANT: sf already initialized, parameter effect. watershed_control list watershed control parameters (see default_watershed_control). Importantly, sub-model used lateral water flows - either Francés et al. (2007) Caviedes-Voullième et al. (2023) - specified . parallelize Boolean flag try parallelization (works subwatersheds, see details). num_cores Integer number cores used parallel computation (default use clusters minus one). progress Boolean flag display progress information simulations. dispersal_control list dispersal control parameters (see default_dispersal_control). NULL, dispersal simulated. management_function function implements forest management actions (see fordyn). lists, one per spatial unit. object object class spwb_land groth_land ... Additional parameters summary functions","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Watershed simulations — spwb_land","text":"Functions spwb_land, growth_land fordyn_land return list class name function following elements: watershed_control: list input control parameters. sf: object class sf, similar output spwb_spatial, following columns: geometry: Spatial geometry. state: list model input objects simulated stand. aquifer: numeric vector water volume aquifer cell. snowpack: numeric vector snowpack water equivalent volume cell. summary: list cell summaries, containing following variables: MinTemperature: Minimum temperature (degrees Celsius). MaxTemperature: Maximum temperature (degrees Celsius). PET: Potential evapotranspiration (mm). Rain: Rainfall (mm). Snow: Snowfall (mm). Snowmelt: Snow melt (mm). Interception: Rainfall interception (mm). NetRain: Net rainfall, .e. throughfall, (mm). Infiltration: amount water infiltrating soil (mm). InfiltrationExcess: amount water exceeding soil infiltration capacity (mm). SaturationExcess: amount water reaches soil surface soil saturation (mm). Runon: amount water reaching cell via surface runon (mm). Runoff: amount water exported cell via surface runoff (mm). DeepDrainage: amount water draining soil aquifer via deep drainage (mm). CapillarityRise: Water entering soil via capillarity rise (mm) water table. SoilEvaporation: Bare soil evaporation (mm). Transpiration: Woody plant transpiration (mm). HerbTranspiration: Herbaceous transpiration (mm). InterflowInput: amount water reaches soil cell adjacent cells via subsurface flow (mm). InterflowOutput: amount water leaves soil cell towards adjacent cells via subsurface flow (mm). InterflowBalance: balance water circulating via subsurface flow (mm). BaseflowInput: amount water reaches aquifer cell adjacent cells via groundwater flow (mm). BaseflowOutput: amount water leaves aquifer cell towards adjacent cells via groundwater flow (mm). BaseflowBalance: balance water circulating via groundwater flow (mm). AquiferExfiltration: amount water cell generates surface runoff due aquifer reaching soil surface (mm). SWE: Snow water equivalent (mm) snowpack. RWC: Soil relative water content respect field capacity (percent). SoilVol: Soil water volume integrated across vertical layers (mm). WTD: Saturated soil water table depth (mm surface). DTA: Depth aquifer (m surface). result: list cell detailed results (indicated input), contents depending local model. outlet: logical vector indicating outlet cells. outlet_backlog: list vector indicating channel backlog outlet cells (subsequent simulations). forest: list forest objects simulated stand, used subsequent simulations (see update_landscape). management_arguments: list management arguments simulated stand, used subsequent simulations (see update_landscape). tree_table: list data frames simulated stand, containing living trees time step. shrub_table: list data frames simulated stand, containing living shrub time step. dead_tree_table: list data frames simulated stand, containing dead trees time step. dead_shrub_table: list data frames simulated stand, containing dead shrub time step. cut_tree_table: list data frames simulated stand, containing cut trees time step. cut_shrub_table: list data frames simulated stand, containing cut shrub time step. watershed_balance: data frame many rows days columns components water balance watershed level (.e., rain, snow, interception, infiltration, soil evaporation, plant transpiration, ...). watershed_soil_balance: data frame many rows days columns components water balance watershed level restricted cells soil definition. channel_export_m3s: matrix daily values runoff (m3/s) reaching channel cells landscape (useful channel processing external model). outlet_export_m3s: matrix daily values runoff (m3/s) reaching outlet cells landscape. outlet drains subset cells (sometimes including channel routing), daily overall watershed export corresponds sum row values.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Watershed simulations — spwb_land","text":"IMPORTANT: Simulation function normally call initialization state variables via internal call initialize_landscape, using parameters local_control SpParams call. default soilDomains = \"single\" means vertical bulk soil flows simulated using single permeability domain Richards equation. However, object sf previously initialized, control parameters previous initialization remain . words, parameters local_control SpParams effect call simulation routines sf previously initialized. Two sub-models available lateral water transfer processes (overland flow, sub-surface flow, etc.), either \"TETIS\" (similar Francés et al. 2007) \"SERGHEI\" (Caviedes-Voullième et al. 2023). IMPORTANT: medfateland needs compiled along SERGHEI model order launch simulations using distributed hydrological model. running fordyn_land, input 'sf' object Universal Transverse Mercator (UTM) coordinate system (projection using meters length unit) appropriate behavior dispersal sub-model. Due large communication overload, parallel computation allowed TETIS combination definition subwatersheds (see flag TETIS parameters default_watershed_control). dealing large data sets, weather data included 'sf' object likely data hungry. cases, recommended resort weather interpolation (see spwb_spatial). Weather interpolation can done using coarser resolution raster 'r', changing watershed control parameter called 'weather_aggregation_factor' (see default_watershed_control).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Watershed simulations — spwb_land","text":"Francés, F., Vélez, J.. & Vélez, J.J. (2007). Split-parameter structure automatic calibration distributed hydrological models. Journal Hydrology, 332, 226–240. Caviedes-Voullième, D., Morales-Hernández, M., Norman, M.R. & Ogzen-Xian, . (2023). SERGHEI (SERGHEI-SWE) v1.0: performance-portable high-performance parallel-computing shallow-water solver hydrology environmental hydraulics. Geoscientific Model Development, 16, 977-1008.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Watershed simulations — spwb_land","text":"Miquel De Cáceres Ainsa, CREAF. Maria González-Sanchís, Universitat Politecnica de Valencia. Daniel Caviedes-Voullième, Forschungszentrum Julich. Mario Morales-Hernández, Universidad de Zaragoza.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Watershed simulations — spwb_land","text":"","code":"# \\donttest{ # Load example watershed data data(\"example_watershed\")  # Set crop factor  example_watershed$crop_factor <- NA example_watershed$crop_factor[example_watershed$land_cover_type==\"agriculture\"] <- 0.75  # Set request for daily model results in cells number 3, 6 (outlet) and 9 example_watershed$result_cell <- FALSE example_watershed$result_cell[c(3,6,9)] <- TRUE  # Get bounding box to determine limits b <- sf::st_bbox(example_watershed) b #>    xmin    ymin    xmax    ymax  #>  401430 4671870  402830 4672570   # Define a raster topology, using terra package,  # with the same CRS as the watershed. In this example cells have 100 m side. # Coordinates in the 'sf' object are assumed to be cell centers r <-terra::rast(xmin = 401380, ymin = 4671820, xmax = 402880, ymax = 4672620,                  nrow = 8, ncol = 15, crs = \"epsg:32631\")  # Load example meteo data frame from package meteoland data(\"examplemeteo\")    # Load default medfate parameters data(\"SpParamsMED\")    # Set simulation period dates <- seq(as.Date(\"2001-01-01\"), as.Date(\"2001-03-31\"), by=\"day\")  # Watershed control parameters (TETIS model; Frances et al. 2007) ws_control <- default_watershed_control(\"tetis\")  # Launch simulations  res <- spwb_land(r, example_watershed, SpParamsMED, examplemeteo,                   dates = dates, summary_frequency = \"month\",                  watershed_control = ws_control) #>  #> ── Simulation of model 'spwb' over a watershed ───────────────────────────────── #>  #> ── INPUT CHECKING ── #>  #> ℹ Checking raster topology #> ✔ Checking raster topology [10ms] #>  #> ℹ Checking 'sf' data columns #> ✔ Checking 'sf' data columns [24ms] #>  #> ℹ Determining neighbors and overland routing for TETIS #> ✔ Determining neighbors and overland routing for TETIS [14ms] #>  #> • Hydrological model: TETIS #> • Number of grid cells: 120 Number of target cells: 66 #> • Average cell area: 10006 m2, Total area: 120 ha, Target area: 66 ha #> • Cell land use [wildland: 48 agriculture: 17 artificial: 0 rock: 1 water: 0] #> • Cells with soil: 65 #> • Number of days to simulate: 90 #> • Number of temporal cell summaries: 3 #> • Number of cells with daily model results requested: 3 #> • Number of channel cells: 0 #> • Number of outlet cells: 1 #>  #> ── INITIALISATION ── #>  #> ℹ Creating 65 state objects for model 'spwb'. #> ✔ Creating 65 state objects for model 'spwb'. [4ms] #>  #> • Transpiration mode [Granier: 65, Sperry: 0, Sureau: 0] #> • Soil doimains [buckets: 0, single: 65, dual: 0] #>  #> ── WHOLE-WATERSHED SIMULATION ── #>  #> Daily simulations ■■■■                              10% | ETA:  9s #> Daily simulations ■■■■                              11% | ETA:  9s #> Daily simulations ■■■■■                             12% | ETA:  9s #> Daily simulations ■■■■■                             14% | ETA:  9s #> Daily simulations ■■■■■■                            16% | ETA:  9s #> Daily simulations ■■■■■■                            18% | ETA:  9s #> Daily simulations ■■■■■■■                           19% | ETA:  9s #> Daily simulations ■■■■■■■                           20% | ETA:  9s #> Daily simulations ■■■■■■■■                          22% | ETA:  9s #> Daily simulations ■■■■■■■■                          23% | ETA:  9s #> Daily simulations ■■■■■■■■■                         26% | ETA:  9s #> Daily simulations ■■■■■■■■■                         27% | ETA:  9s #> Daily simulations ■■■■■■■■■                         28% | ETA:  9s #> Daily simulations ■■■■■■■■■■                        29% | ETA:  9s #> Daily simulations ■■■■■■■■■■                        30% | ETA:  9s #> Daily simulations ■■■■■■■■■■■                       32% | ETA:  8s #> Daily simulations ■■■■■■■■■■■                       33% | ETA:  8s #> Daily simulations ■■■■■■■■■■■                       34% | ETA:  8s #> Daily simulations ■■■■■■■■■■■■                      37% | ETA:  8s #> Daily simulations ■■■■■■■■■■■■                      38% | ETA:  8s #> Daily simulations ■■■■■■■■■■■■■                     40% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■                     41% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■■                    43% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■■                    44% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■■■                   47% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■■■                   48% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■                  49% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■                  51% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■■                 52% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■■                 54% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■■■                56% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■■■                58% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■               59% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■               61% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■              62% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■              64% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■             66% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■             67% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■            69% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■            70% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■           72% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■          76% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■          77% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■         79% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■         81% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■        84% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      90% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      91% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    96% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    98% | ETA:  0s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■   99% | ETA:  0s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> • Snowpack balance content (mm): 0 fluxes (mm): 0 #> • Soil balance content (mm): -52.97 fluxes (mm): -52.97 #> • Aquifer balance content (mm): 25.44 fluxes (mm): 25.42 #> • Aquifer fluxes (mm) Drainage input: 69.71 Exfiltration: 44.25 Capillary rise: #> 0.04 Deep loss: 0 #> • Watershed balance content (mm): -26.73 fluxes (mm): -26.75 #> • Watershed fluxes (mm) Precipitation: 154.74 Surface export: 108.91 #> Evapotransp.: 72.58 Deep loss: 0                   # Print a summary of water balance components summary(res) #>   Snowpack water balance components: #>     Snow fall (mm) 19.19  Snow melt (mm) 19.19 #>   Soil water balance components: #>     Infiltration (mm) 137.01  Saturation excess (mm) 65.15 #>     Deep drainage (mm) 68.92  Capillarity rise (mm) 0.04 #>     Soil evaporation (mm) 3.57  Plant transpiration (mm) 52.39 #>     Interflow balance (mm) 0 #>   Aquifer water balance components: #>     Deep drainage (mm) 69.71  Capillarity rise (mm) 0.04 #>     Exfiltration (mm) 44.25  Deep aquifer loss (mm) 0 #>   Watershed water balance components: #>     Precipitation (mm) 154.74 #>     Interception (mm) 17.47  Soil evaporation (mm) 3.51 #>     Plant transpiration (mm) 51.6 #>     Subsurface flow balance (mm) 0 #>     Groundwater flow balance (mm) 0 #>     Export runoff (mm) 0  # Option 'simplify = TRUE' in initialization, may be useful to speed up calculations example_simplified <- initialize_landscape(example_watershed, SpParams = SpParamsMED,                                            local_control = defaultControl(soilDomains = \"single\"),                                             simplify = TRUE) #> ℹ Creating 65 state objects for model 'spwb'. #> ✔ Creating 65 state objects for model 'spwb'. [5ms] #>  #> • Transpiration mode [Granier: 65, Sperry: 0, Sureau: 0] #> • Soil doimains [buckets: 0, single: 65, dual: 0]  # Launch simulations over simplified landscape (should be considerably faster) res_simplified <- spwb_land(r, example_simplified, SpParamsMED, examplemeteo,                              dates = dates, summary_frequency = \"month\",                             watershed_control = ws_control) #>  #> ── Simulation of model 'spwb' over a watershed ───────────────────────────────── #>  #> ── INPUT CHECKING ── #>  #> ℹ Checking raster topology #> ✔ Checking raster topology [9ms] #>  #> ℹ Checking 'sf' data columns #> ✔ Checking 'sf' data columns [26ms] #>  #> ℹ Determining neighbors and overland routing for TETIS #> ✔ Determining neighbors and overland routing for TETIS [14ms] #>  #> • Hydrological model: TETIS #> • Number of grid cells: 120 Number of target cells: 66 #> • Average cell area: 10006 m2, Total area: 120 ha, Target area: 66 ha #> • Cell land use [wildland: 48 agriculture: 17 artificial: 0 rock: 1 water: 0] #> • Cells with soil: 65 #> • Number of days to simulate: 90 #> • Number of temporal cell summaries: 3 #> • Number of cells with daily model results requested: 3 #> • Number of channel cells: 0 #> • Number of outlet cells: 1 #>  #> ── INITIALISATION ── #>  #> ℹ All state objects are already available for 'spwb'. #> • Transpiration mode [Granier: 65, Sperry: 0, Sureau: 0] #> • Soil doimains [buckets: 0, single: 65, dual: 0] #>  #> ── WHOLE-WATERSHED SIMULATION ── #>  #> Daily simulations ■■■■■                             13% | ETA:  7s #> Daily simulations ■■■■■■                            16% | ETA:  7s #> Daily simulations ■■■■■■                            17% | ETA:  7s #> Daily simulations ■■■■■■■                           19% | ETA:  7s #> Daily simulations ■■■■■■■                           20% | ETA:  7s #> Daily simulations ■■■■■■■■                          22% | ETA:  7s #> Daily simulations ■■■■■■■■                          23% | ETA:  7s #> Daily simulations ■■■■■■■■■                         26% | ETA:  8s #> Daily simulations ■■■■■■■■■                         27% | ETA:  8s #> Daily simulations ■■■■■■■■■                         28% | ETA:  8s #> Daily simulations ■■■■■■■■■■                        29% | ETA:  8s #> Daily simulations ■■■■■■■■■■                        31% | ETA:  7s #> Daily simulations ■■■■■■■■■■■                       32% | ETA:  7s #> Daily simulations ■■■■■■■■■■■                       34% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■                      36% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■                      38% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■                     40% | ETA:  7s #> Daily simulations ■■■■■■■■■■■■■                     41% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■                    43% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■                    44% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■                   47% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■                   48% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■                  50% | ETA:  6s #> Daily simulations ■■■■■■■■■■■■■■■■■                 52% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■                 53% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■                56% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■                57% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■               59% | ETA:  5s #> Daily simulations ■■■■■■■■■■■■■■■■■■■               61% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■              62% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■              64% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■             66% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■             68% | ETA:  4s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■            69% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■            71% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■           72% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■           74% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■          76% | ETA:  3s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■          78% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■         81% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■        84% | ETA:  2s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      90% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      91% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     93% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    96% | ETA:  1s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    97% | ETA:  0s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■   99% | ETA:  0s #> Daily simulations ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> • Snowpack balance content (mm): 0 fluxes (mm): 0 #> • Soil balance content (mm): -54.79 fluxes (mm): -54.79 #> • Aquifer balance content (mm): 25.62 fluxes (mm): 25.59 #> • Aquifer fluxes (mm) Drainage input: 72.51 Exfiltration: 46.85 Capillary rise: #> 0.07 Deep loss: 0 #> • Watershed balance content (mm): -28.34 fluxes (mm): -28.36 #> • Watershed fluxes (mm) Precipitation: 154.74 Surface export: 113.9 #> Evapotransp.: 69.2 Deep loss: 0 # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":null,"dir":"Reference","previous_headings":"","what":"One-day watershed simulations — spwb_land_day","title":"One-day watershed simulations — spwb_land_day","text":"Functions perform one-day simulations watershed described set connected grid cells. Function spwb_land_day implements distributed hydrological model simulates daily local water balance, spwb_day, grid cells watershed accounting overland runoff, subsurface flow groundwater flow cells. Function growth_land_day similar spwb_land_day, includes daily local carbon balance, growth mortality processes grid cells, provided growth_day.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-day watershed simulations — spwb_land_day","text":"","code":"spwb_land_day(   r,   sf,   SpParams,   meteo = NULL,   date = NULL,   local_control = medfate::defaultControl(soilDomains = \"single\"),   watershed_control = default_watershed_control(),   progress = TRUE )  growth_land_day(   r,   sf,   SpParams,   meteo = NULL,   date = NULL,   local_control = medfate::defaultControl(soilDomains = \"single\"),   watershed_control = default_watershed_control(),   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-day watershed simulations — spwb_land_day","text":"r object class SpatRaster, defining raster topology. sf object class sf described spwb_land. SpParams data frame species parameters (see SpParamsMED). meteo Input meteorological data (see spwb_spatial details). date string date simulated. local_control list control parameters (see defaultControl) function spwb_day growth_day. watershed_control list watershed control parameters (see default_watershed_control). Importantly, sub-model used lateral water flows - either Francés et al. (2007) Caviedes-Voullième et al. (2023) - specified . progress Boolean flag display progress information simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-day watershed simulations — spwb_land_day","text":"Functions spwb_land_day spwb_land_day return sf object: geometry: Spatial geometry. state: list model input objects simulated stand. aquifer: numeric vector water volume aquifer cell. snowpack: numeric vector snowpack water equivalent volume cell. result: list cell detailed results (indicated input), contents depending local model. outlet: logical vector indicating outlet cells (subsequent simulations). outlet_backlog: list vector indicating channel backlog outlet cells. MinTemperature: Minimum temperature (degrees Celsius). MaxTemperature: Maximum temperature (degrees Celsius). PET: Potential evapotranspiration (mm). Rain: Rainfall (mm). Snow: Snowfall (mm). Snowmelt: Snow melt (mm). Interception: Rainfall interception (mm). NetRain: Net rainfall, .e. throughfall, (mm). Infiltration: amount water infiltrating soil (mm). InfiltrationExcess: amount water exceeding soil infiltration capacity (mm). SaturationExcess: amount water reaches soil surface soil saturation (mm). Runoff: amount water exported via surface runoff (mm). DeepDrainage: amount water draining soil aquifer via deep drainage (mm). CapillarityRise: Water entering soil via capillarity rise (mm) water table. SoilEvaporation: Bare soil evaporation (mm). Transpiration: Woody plant transpiration (mm). HerbTranspiration: Herbaceous transpiration (mm). InterflowInput: amount water reaches soil cell adjacent cells via subsurface flow (mm). InterflowOutput: amount water leaves soil cell towards adjacent cells via subsurface flow (mm). InterflowBalance: balance water circulating via subsurface flow (mm). BaseflowInput: amount water reaches aquifer cell adjacent cells via groundwater flow (mm). BaseflowOutput: amount water leaves aquifer cell towards adjacent cells via groundwater flow (mm). BaseflowBalance: balance water circulating via groundwater flow (mm). AquiferExfiltration: amount water cell generates surface runoff due aquifer reaching soil surface (mm).","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-day watershed simulations — spwb_land_day","text":"See details spwb_land. Subwatershed units parallelization possible, present, single-day watershed simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"One-day watershed simulations — spwb_land_day","text":"Francés, F., Vélez, J.. & Vélez, J.J. (2007). Split-parameter structure automatic calibration distributed hydrological models. Journal Hydrology, 332, 226–240. Caviedes-Voullième, D., Morales-Hernández, M., Norman, M.R. & Ogzen-Xian, . (2023). SERGHEI (SERGHEI-SWE) v1.0: performance-portable high-performance parallel-computing shallow-water solver hydrology environmental hydraulics. Geoscientific Model Development, 16, 977-1008.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One-day watershed simulations — spwb_land_day","text":"Miquel De Cáceres Ainsa, CREAF. Maria González-Sanchís, Universitat Politecnica de Valencia. Daniel Caviedes-Voullième, Forschungszentrum Julich. Mario Morales-Hernández, Universidad de Zaragoza.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_land_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-day watershed simulations — spwb_land_day","text":"","code":"# Load example watershed data after burnin period data(\"example_watershed_burnin\")  # Set request for daily model results in cells number 3, 6 (outlet) and 9 example_watershed_burnin$result_cell <- FALSE example_watershed_burnin$result_cell[c(3,6,9)] <- TRUE  # Get bounding box to determine limits b <- sf::st_bbox(example_watershed_burnin) b #>    xmin    ymin    xmax    ymax  #>  401430 4671870  402830 4672570   # Define a raster topology, using terra package,  # with the same CRS as the watershed. In this example cells have 100 m side. # Coordinates in the 'sf' object are assumed to be cell centers r <-terra::rast(xmin = 401380, ymin = 4671820, xmax = 402880, ymax = 4672620,                  nrow = 8, ncol = 15, crs = \"epsg:32631\")  # Load example meteo data frame from package meteoland data(\"examplemeteo\")    # Load default medfate parameters data(\"SpParamsMED\")    # Watershed control parameters (TETIS model; Frances et al. 2007) ws_control <- default_watershed_control(\"tetis\")  # Launch simulation  date <- \"2001-03-01\" sf_out <- spwb_land_day(r, example_watershed_burnin, SpParamsMED, examplemeteo,                          date = date,                          watershed_control = ws_control) #>  #> ── Simulation of model 'spwb' over a watershed for day '2001-03-01' ──────────── #> ℹ Checking topology #> ✔ Checking topology [9ms] #>  #> ℹ Checking 'sf' data #> ✔ Checking 'sf' data [19ms] #>  #> ℹ Determining neighbors and discharge for TETIS #> ✔ Determining neighbors and discharge for TETIS [14ms] #>  #> • Hydrological model: TETIS #> • Number of grid cells: 120 Number of target cells: 66 #> • Average cell area: 10006 m2, Total area: 120 ha, Target area: 66 ha #> • Cell land use wildland: 48 agriculture: 17 artificial: 0 rock: 1 water: 0 #> • Cells with soil: 65 #> • Number of cells with daily model results requested: 3 #> • Number of channel cells: 0 #> • Number of outlet cells: 1 #> ℹ Building spwb input #> ✔ Building spwb input [5ms] #>  #> ℹ 0 cells needed initialization #> ✔ 0 cells needed initialization [61ms] #>"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulations for spatially-distributed forest stands — spwb_spatial","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"Functions allow calling local models spwb, growth fordyn, set forest stands distributed specific locations. spatial processes simulated.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"","code":"spwb_spatial(   sf,   SpParams,   meteo = NULL,   local_control = defaultControl(),   dates = NULL,   CO2ByYear = numeric(0),   keep_results = TRUE,   summary_function = NULL,   summary_arguments = NULL,   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE,   local_verbose = FALSE )  growth_spatial(   sf,   SpParams,   meteo = NULL,   local_control = defaultControl(),   dates = NULL,   CO2ByYear = numeric(0),   fire_regime = NULL,   keep_results = TRUE,   summary_function = NULL,   summary_arguments = NULL,   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE,   local_verbose = FALSE )  fordyn_spatial(   sf,   SpParams,   meteo = NULL,   local_control = defaultControl(),   dates = NULL,   CO2ByYear = numeric(0),   fire_regime = NULL,   keep_results = TRUE,   management_function = NULL,   summary_function = NULL,   summary_arguments = NULL,   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE,   local_verbose = FALSE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"sf object class sf following columns: geometry: Spatial geometry. id: Stand identifiers. elevation: Elevation sea level (m). slope: Slope (degrees). aspect: Aspect (degrees). land_cover_type: Land cover type grid cell (values 'wildland' 'agriculture'). forest: Objects class forest. soil: Objects class soil data frames physical properties. state: Objects class spwbInput growthInput (optional). meteo: Data frames weather data (required parameter meteo = NULL). crop_factor: Crop evapo-transpiration factor. required 'agriculture' land cover type. local_control: list control parameters (optional). Used override function parameter local_control specific locations (values can NULL remaining ones). management_arguments: Lists management arguments. Optional, relevant fordyn_spatial . represented_area_ha: Area represented stand hectares. Optional, relevant fordyn_spatial fire_regime supplied ). ignition_weights: Relative weights determine stands burned. Optional, relevant fordyn_spatial fire_regime supplied ). SpParams data frame species parameters (see SpParamsMED). meteo Input meteorological data (see section details). NULL, function expect column 'meteo' parameter y. local_control list control parameters (see defaultControl) function spwb_day growth_day. dates Date object describing days period modeled. CO2ByYear named numeric vector years names atmospheric CO2 concentration (ppm) values. Used specify annual changes CO2 concentration along simulation (alternative specifying daily values meteo). keep_results Boolean flag indicate point/cell simulation results returned (set FALSE use summary functions large data sets). summary_function appropriate function calculate summaries (e.g., summary.spwb). summary_arguments List additional arguments summary function. parallelize Boolean flag try parallelization (use clusters minus one). num_cores Integer number cores used parallel computation. chunk_size Integer indicating size chuncks sent different processes (default, number spatial elements divided number cores). progress Boolean flag display progress information simulations. local_verbose Boolean flag display detailed progress information local simulations. fire_regime list parameters defining fire regime (see create_fire_regime) matrix representing fire regime instance (see fire_regime_instance), used simulations fordyn_spatial. NULL, wildfires simulated. management_function function implements forest management actions (see fordyn). lists, one per spatial unit.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"object class 'sf' containing four elements: geometry: Spatial geometry. id: Stand id, taken input. state: list spwbInput growthInput objects simulated stand, used subsequent simulations (see update_landscape) NULL values whenever simulation errors occurred. forest: list forest objects simulated stand (function fordyn_spatial), used subsequent simulations (see update_landscape) NULL values whenever simulation errors occurred. management_arguments: list management arguments simulated stand (function fordyn_spatial management function supplied), used subsequent simulations (see update_landscape). result: list model output simulated stand. elements can contain error condition simulation resulted error. Values NULL (errors) keep_results = FALSE. summary: list model output summaries simulated stand (summary_function NULL), NULL values whenever simulation errors occurred.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"Simulation functions  accept different formats meteorological input (parameter meteo). user may supply two kinds daily weather sources: data frame meteorological data common spatial location (spatial variation weather considered). object (list objects) class stars reference interpolation data created package meteoland. list interpolator objects supplied, simulation functions interpolate target locations periods covered interpolator, user responsible supplying interpolators correct temporal order. Alternatively, user may leave parameter meteo = NULL specify weather data frame element y column named 'meteo'. Fire regimes allowed function fordyn_spatial. object class fire_regime supplied, function call fire_regime_instance generate realization fire regime conducting simulations. Alternatively, users can directly supply fire regime instance matrix, derived another source (e.g. fire landscape model). Note operating fire regimes assumes forest stands share period simulation, enforcing left user.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulations for spatially-distributed forest stands — spwb_spatial","text":"","code":"# \\donttest{ # Load example landscape data data(\"example_ifn\")    # Load example meteo data frame from package meteoland data(\"examplemeteo\")    # Load default medfate parameters data(\"SpParamsMED\")    # Subset two plots to speed-up calculations example_subset <- example_ifn[31:32, ]  # Perform simulation dates <- seq(as.Date(\"2001-03-01\"), as.Date(\"2001-03-15\"), by=\"day\") res <- spwb_spatial(example_subset, SpParamsMED, examplemeteo, dates = dates) #>  #> ── Simulation of model 'spwb' ────────────────────────────────────────────────── #> ℹ Checking sf input #> ✔ Checking sf input [6ms] #>  #> ℹ Checking meteo object input #> ✔ Checking meteo object input [10ms] #>  #> ℹ Creating 2 input objects for model 'spwb' #> ✔ Creating 2 input objects for model 'spwb' [57ms] #>  #> ℹ Performing 'spwb' simulations on 2 locations #> ✔ Performing 'spwb' simulations on 2 locations [4ms] #>  #> ✔ No simulation errors detected    # Perform fordyn simulation for one year (one stand) without management res_noman <- fordyn_spatial(example_subset, SpParamsMED, examplemeteo) #>  #> ── Simulation of model 'fordyn' ──────────────────────────────────────────────── #> ℹ Checking sf input #> ✔ Checking sf input [6ms] #>  #> ℹ Checking meteo object input #> ✔ Checking meteo object input [10ms] #>  #> ℹ Performing 'fordyn' simulations on 2 locations #> ✔ Performing 'fordyn' simulations on 2 locations [9ms] #>  #> Stands ■■■■■■■■■■■■■■■■                  50% | ETA:  2s #> Stands ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ No simulation errors detected  # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":null,"dir":"Reference","previous_headings":"","what":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"Functions allow calling local models spwb_day growth_day, set forest stands distributed specific locations given date. spatial processes simulated.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"","code":"spwb_spatial_day(   sf,   meteo = NULL,   date,   SpParams,   local_control = defaultControl(),   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE )  growth_spatial_day(   sf,   meteo = NULL,   date,   SpParams,   local_control = defaultControl(),   parallelize = FALSE,   num_cores = detectCores() - 1,   chunk_size = NULL,   progress = TRUE )"},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"sf object class sf landscape information (see spwb_spatial). meteo Meteorology data (see spwb_spatial). date string date simulated. SpParams data frame species parameters (see SpParamsMED). local_control list local model control parameters (see defaultControl). parallelize Boolean flag try parallelization (use clusters minus one). num_cores Integer number cores used parallel computation. chunk_size Integer indicating size chunks sent different processes (default, number spatial elements divided number cores). progress Boolean flag display progress information simulations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"object class sf name function called containing three elements: geometry: Spatial geometry. id: Stand id, taken input. state: list model input objects simulated stand, used subsequent simulations. result: list model output simulated stand.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"Simulation functions accept different formats meteorological input (described spwb_spatial).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"Miquel De Cáceres Ainsa, CREAF","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/spwb_spatial_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-day simulation for spatially-distributed forest stands — spwb_spatial_day","text":"","code":"# \\donttest{ #Load example landscape data data(\"example_ifn\")  #Load example meteo data frame from package meteoland data(\"examplemeteo\")    #Load default medfate parameters data(\"SpParamsMED\")    #Perform simulation date <- \"2001-03-01\" res <- spwb_spatial_day(example_ifn, examplemeteo, date, SpParamsMED) #>  #> ── Simulation of model 'spwb' for date '2001-03-01' ──────────────────────────── #> ℹ Checking sf input #> ✔ Checking sf input [7ms] #>  #> ℹ Checking meteo object input #> ✔ Checking meteo object input [10ms] #>  #> ℹ Creating '100' input objects. #> ✔ Creating '100' input objects. [1.6s] #>  #> • Performing 'spwb' simulations. # }"},{"path":"https://emf-creaf.github.io/medfateland/reference/update_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates the state of a landscape object — update_landscape","title":"Updates the state of a landscape object — update_landscape","text":"Updates state spatial object 'x' according final state simulation outcome 'y'","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/update_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates the state of a landscape object — update_landscape","text":"","code":"update_landscape(x, y)"},{"path":"https://emf-creaf.github.io/medfateland/reference/update_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates the state of a landscape object — update_landscape","text":"x object class sf corresponding landscape columns. y object resulting simulation previously carried x using spwb_spatial, growth_spatial, spwb_land, etc.","code":""},{"path":"https://emf-creaf.github.io/medfateland/reference/update_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates the state of a landscape object — update_landscape","text":"object class sf modified state variables.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/medfateland/reference/update_landscape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Updates the state of a landscape object — update_landscape","text":"Miquel De Cáceres Ainsa, CREAF.","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-260","dir":"Changelog","previous_headings":"","what":"medfateland 2.6.0","title":"medfateland 2.6.0","text":"*_land() functions can process subwatersheds parallelization *_land() subwatersheds","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-253","dir":"Changelog","previous_headings":"","what":"medfateland 2.5.3","title":"medfateland 2.5.3","text":"new function optimization_rock() channel cells now forced outlet *_land simulations channel routing via outlet backlog implemented","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-252","dir":"Changelog","previous_headings":"","what":"medfateland 2.5.2","title":"medfateland 2.5.2","text":"information soil domain transpiration mode initialized landscapes overland routing available new function overland_routing() overland flow allowed completely flat areas (according processing order) bug correction: management fordyn_land()","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-251","dir":"Changelog","previous_headings":"","what":"medfateland 2.5.1","title":"medfateland 2.5.1","text":"CRAN release: 2025-01-28 id mapping existence checked add_forests overland routing exported spwb_land","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-250","dir":"Changelog","previous_headings":"","what":"medfateland 2.5.0","title":"medfateland 2.5.0","text":"Compliance medfate 4.8.0: internal communication structures Bug correction: input column regen longer kept parse_forestable()","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-246","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.6","title":"medfateland 2.4.6","text":"CRAN release: 2024-10-03 Numerical species codes allowed input fordyn_land() Added filterMissingSpecies parse_forestable() Added keepUnfilteredCopy parse_forestable() Revision input checks","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-245","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.5","title":"medfateland 2.4.5","text":"CRAN release: 2024-07-24 New helper function parse_forestable() Soil domains set “single” default","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-244","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.4","title":"medfateland 2.4.4","text":"Improvements modify_forest_structure()","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-243","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.3","title":"medfateland 2.4.3","text":"CRAN release: 2024-06-02 Revision fordyn_scenario vs dispersal Version submitted CRAN","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-242","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.2","title":"medfateland 2.4.2","text":"New control parameters dispersal","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-241","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.1","title":"medfateland 2.4.1","text":"Compliance medfate v. 4.3.1 New helper function add_forests() parse forest plot data tables New option simplify function initialize_landscape() Submission CRAN","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-240","dir":"Changelog","previous_headings":"","what":"medfateland 2.4.0","title":"medfateland 2.4.0","text":"Compliance medfate v. 4.3.0 New watershed parameters n_interflow, n_baseflow Daily substeps allowed interflow calculations","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-230","dir":"Changelog","previous_headings":"","what":"medfateland 2.3.0","title":"medfateland 2.3.0","text":"Infiltration runoff non-soil cells Helper functions create landscape sf objects Loss deeper aquifer implemented","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-221","dir":"Changelog","previous_headings":"","what":"medfateland 2.2.1","title":"medfateland 2.2.1","text":"Weather aggregation interpolation New functions spwb_land_day spwb_growth_day","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-220","dir":"Changelog","previous_headings":"","what":"medfateland 2.2.0","title":"medfateland 2.2.0","text":"Compliance medfate ver. 4.1.0 spwb_land revisited (tetis) rasterized maps using tidyterra","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-211","dir":"Changelog","previous_headings":"","what":"medfateland 2.1.1","title":"medfateland 2.1.1","text":"Removing need define ‘channel’ Input sf can contain column ‘local_control’ override control specific cells/locations.","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-210","dir":"Changelog","previous_headings":"","what":"medfateland 2.1.0","title":"medfateland 2.1.0","text":"SERGHEI coupling Raster topology terra package required watershed simulations Parallel computation enabled spwb_land (SERGHEI)","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-205","dir":"Changelog","previous_headings":"","what":"medfateland 2.0.5","title":"medfateland 2.0.5","text":"Seed production seed bank dynamics (medfate v.3.2.0) Dispersal process implemented fordyn_land fordyn_scenario Fire regime growth_spatial","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-203","dir":"Changelog","previous_headings":"","what":"medfateland 2.0.3","title":"medfateland 2.0.3","text":"Fire regimes can simulated functions fordyn_spatial fordyn_scenario","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-202","dir":"Changelog","previous_headings":"","what":"medfateland 2.0.2","title":"medfateland 2.0.2","text":"Improvements fordyn_scenario Allowing management scenarios specify demand groups species Ignoring convex hull checks calling meteoland interpolation New vignette ‘ManagementScenario’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-200","dir":"Changelog","previous_headings":"","what":"medfateland 2.0.0","title":"medfateland 2.0.0","text":"IMPORTANT: version removed sp-type S4 classes deprecated 1.0.1. Use release version 1.2.1 continue using deprecated classes. New function ‘fordyn_land’ Compliance medfate 3.1.1 Can accept list interpolator objects weather input","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-121","dir":"Changelog","previous_headings":"","what":"medfateland 1.2.1","title":"medfateland 1.2.1","text":"Compliance medfate 3.0.0 New function ‘initialize_state’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-112","dir":"Changelog","previous_headings":"","what":"medfateland 1.1.2","title":"medfateland 1.1.2","text":"Package ‘cli’ adopted client interface Soil water balance agricultural soils","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-111","dir":"Changelog","previous_headings":"","what":"medfateland 1.1.1","title":"medfateland 1.1.1","text":"Compliance medfate 2.9.0 Allowing use input state fordyn_spatial simulations Simulation errors, occurring, now stored ‘result’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-110","dir":"Changelog","previous_headings":"","what":"medfateland 1.1.0","title":"medfateland 1.1.0","text":"New function ‘fordyn_scenario’ Allowing column called ‘meteo’ input ‘sf’ objects","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-101","dir":"Changelog","previous_headings":"","what":"medfateland 1.0.1","title":"medfateland 1.0.1","text":"Adapting new meteoland interpolation procedure","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-100","dir":"Changelog","previous_headings":"","what":"medfateland 1.0.0","title":"medfateland 1.0.0","text":"Major restructuring work ‘sf’ instead ‘sp’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-050","dir":"Changelog","previous_headings":"","what":"medfateland 0.5.0","title":"medfateland 0.5.0","text":"Reduction package functions ‘spatial’ functions Moving documentation Roxygen","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-043","dir":"Changelog","previous_headings":"","what":"medfateland 0.4.3","title":"medfateland 0.4.3","text":"Compliance medfate ‘2.7.6’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-042","dir":"Changelog","previous_headings":"","what":"medfateland 0.4.2","title":"medfateland 0.4.2","text":"Compliance medfate ‘2.6.2’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-041","dir":"Changelog","previous_headings":"","what":"medfateland 0.4.1","title":"medfateland 0.4.1","text":"Bug correction modelspatial coordinate checking Welcome sentence","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-040","dir":"Changelog","previous_headings":"","what":"medfateland 0.4.0","title":"medfateland 0.4.0","text":"New functions ‘spwbpoints_day’, ‘growthpoints_day’,… New function ‘updateState’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-030","dir":"Changelog","previous_headings":"","what":"medfateland 0.3.0","title":"medfateland 0.3.0","text":"Function ‘wswb’ renamed ‘spwbland’ New function ‘growthland’ ‘plot.growthland’ New summary functions ‘summary.spwbpoints’…. New plotting functions ‘plot.summarypoints’, ‘plot.summarypixels’ ‘plot.summarygrid’ New function ‘shinyplot_land’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-025","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.5","title":"medfateland 0.2.5","text":"Update medfate 2.2","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-024","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.4","title":"medfateland 0.2.4","text":"Update medfate 2.0","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-023","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.3","title":"medfateland 0.2.3","text":"Parallelization spwb growth simulations Spatial*Landscape objects","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-022","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.2","title":"medfateland 0.2.2","text":"New spatial object definitions New function buildWatershedTopography","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-021","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.1","title":"medfateland 0.2.1","text":"Update medfate version 0.2.1 Revision runoff Grid simulations MeteorologyInterpolationData input Cell state output Outlet cell daily runoff","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-020","dir":"Changelog","previous_headings":"","what":"medfateland 0.2.0","title":"medfateland 0.2.0","text":"SFI extract functions moved ‘medfate’","code":""},{"path":"https://emf-creaf.github.io/medfateland/news/index.html","id":"medfateland-010","dir":"Changelog","previous_headings":"","what":"medfateland 0.1.0","title":"medfateland 0.1.0","text":"Corrections energy balance z Package creation files previously package ‘medfate’. Linking package ‘medfate’","code":""}]
